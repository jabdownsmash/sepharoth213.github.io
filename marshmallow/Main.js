(function ($hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.preloader = null;
ApplicationMain.embed = $hx_exports.openfl.embed = function(elementName,width,height,background) {
	var element = null;
	if(elementName != null) element = window.document.getElementById(elementName);
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	openfl.Lib.create(element,width,height,color);
	ApplicationMain.preloader = new NMEPreloader();
	openfl.Lib.current.addChild(ApplicationMain.preloader);
	ApplicationMain.preloader.onInit();
	var sounds = [];
	var id;
	var image = new Image();
	id = "embeds/floor_diffuse.jpg";
	ApplicationMain.images.set(id,image);
	image.onload = ApplicationMain.image_onLoad;
	image.src = id;
	ApplicationMain.total++;
	if(ApplicationMain.total == 0) ApplicationMain.start(); else {
		var $it0 = ApplicationMain.urlLoaders.keys();
		while( $it0.hasNext() ) {
			var path = $it0.next();
			var urlLoader = ApplicationMain.urlLoaders.get(path);
			urlLoader.addEventListener("complete",ApplicationMain.loader_onComplete);
			urlLoader.load(new openfl.net.URLRequest(path));
		}
		var _g = 0;
		while(_g < sounds.length) {
			var soundName = sounds[_g];
			++_g;
			var sound = new openfl.media.Sound();
			sound.addEventListener(openfl.events.Event.COMPLETE,ApplicationMain.sound_onComplete);
			sound.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,ApplicationMain.sound_onIOError);
			sound.load(new openfl.net.URLRequest(soundName + ".ogg"));
		}
	}
};
ApplicationMain.main = function() {
};
ApplicationMain.start = function() {
	ApplicationMain.preloader.addEventListener(openfl.events.Event.COMPLETE,ApplicationMain.preloader_onComplete);
	ApplicationMain.preloader.onLoaded();
};
ApplicationMain.image_onLoad = function(_) {
	ApplicationMain.assetsLoaded++;
	ApplicationMain.preloader.onUpdate(ApplicationMain.assetsLoaded,ApplicationMain.total);
	if(ApplicationMain.assetsLoaded == ApplicationMain.total) ApplicationMain.start();
};
ApplicationMain.loader_onComplete = function(event) {
	ApplicationMain.assetsLoaded++;
	ApplicationMain.preloader.onUpdate(ApplicationMain.assetsLoaded,ApplicationMain.total);
	if(ApplicationMain.assetsLoaded == ApplicationMain.total) ApplicationMain.start();
};
ApplicationMain.preloader_onComplete = function(event) {
	ApplicationMain.preloader.removeEventListener(openfl.events.Event.COMPLETE,ApplicationMain.preloader_onComplete);
	openfl.Lib.current.removeChild(ApplicationMain.preloader);
	ApplicationMain.preloader = null;
	var hasMain = false;
	var _g = 0;
	var _g1 = Type.getClassFields(Main);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	if(hasMain) Reflect.callMethod(Main,Reflect.field(Main,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
		if(js.Boot.__instanceof(instance,openfl.display.DisplayObject)) openfl.Lib.current.addChild(instance); else {
			haxe.Log.trace("Error: No entry point found",{ fileName : "ApplicationMain.hx", lineNumber : 191, className : "ApplicationMain", methodName : "preloader_onComplete"});
			haxe.Log.trace("If you are using DCE with a static main, you may need to @:keep the function",{ fileName : "ApplicationMain.hx", lineNumber : 192, className : "ApplicationMain", methodName : "preloader_onComplete"});
		}
	}
};
ApplicationMain.sound_onComplete = function(event) {
	ApplicationMain.assetsLoaded++;
	ApplicationMain.preloader.onUpdate(ApplicationMain.assetsLoaded,ApplicationMain.total);
	if(ApplicationMain.assetsLoaded == ApplicationMain.total) ApplicationMain.start();
};
ApplicationMain.sound_onIOError = function(event) {
	ApplicationMain.assetsLoaded++;
	ApplicationMain.preloader.onUpdate(ApplicationMain.assetsLoaded,ApplicationMain.total);
	if(ApplicationMain.assetsLoaded == ApplicationMain.total) ApplicationMain.start();
};
var openfl = {};
openfl.events = {};
openfl.events.IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl.events.IEventDispatcher;
openfl.events.IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl.events.IEventDispatcher.prototype = {
	__class__: openfl.events.IEventDispatcher
};
openfl.events.EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl.events.EventDispatcher;
openfl.events.EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl.events.EventDispatcher.__interfaces__ = [openfl.events.IEventDispatcher];
openfl.events.EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl.events.EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) this.__eventMap = new haxe.ds.StringMap();
		if(!this.__eventMap.exists(type)) {
			var list = new Array();
			list.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1 = this.__eventMap.get(type);
			list1.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			list1.sort(openfl.events.EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var list = this.__eventMap.get(event.type);
		if(list == null) return false;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 0;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) return true;
			}
			if(listener == list[index]) index++;
		}
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) this.__eventMap = null;
	}
	,toString: function() {
		var full = Type.getClassName(Type.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl.events.EventDispatcher
};
openfl.display = {};
openfl.display.IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl.display.IBitmapDrawable;
openfl.display.IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl.display.IBitmapDrawable.prototype = {
	__class__: openfl.display.IBitmapDrawable
};
openfl.display.DisplayObject = function() {
	openfl.events.EventDispatcher.call(this);
	this.set_alpha(1);
	this.set_rotation(0);
	this.set_scaleX(1);
	this.set_scaleY(1);
	this.set_visible(true);
	this.set_x(0);
	this.set_y(0);
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl.geom.Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl.display.DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl.display.DisplayObject;
openfl.display.DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl.display.DisplayObject.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.DisplayObject.__super__ = openfl.events.EventDispatcher;
openfl.display.DisplayObject.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispatchEvent: function(event) {
		var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 2;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl.geom.Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return this.getBounds(null).contains(x,y);
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__applyStyle: function(renderSession,setTransform,setAlpha,setClip) {
		if(setTransform && this.__worldTransformChanged) {
			if(renderSession.isWebkitDOM) {
				this.__worldTransform.a = Math.round(this.__worldTransform.a * 1000) / 1000;
				this.__worldTransform.b = Math.round(this.__worldTransform.b * 1000) / 1000;
				this.__worldTransform.c = Math.round(this.__worldTransform.c * 1000) / 1000;
				this.__worldTransform.d = Math.round(this.__worldTransform.d * 1000) / 1000;
				this.__worldTransform.tx = Math.round(this.__worldTransform.tx * 10) / 10;
				this.__worldTransform.ty = Math.round(this.__worldTransform.ty * 10) / 10;
			}
			this.__style.setProperty(renderSession.transformProperty,this.__worldTransform.to3DString(renderSession.roundPixels),null);
		}
		if(this.__worldZ != ++renderSession.z) {
			this.__worldZ = renderSession.z;
			this.__style.setProperty("z-index",Std.string(this.__worldZ),null);
		}
		if(setAlpha && this.__worldAlphaChanged) {
			if(this.__worldAlpha < 1) this.__style.setProperty("opacity",Std.string(this.__worldAlpha),null); else this.__style.removeProperty("opacity");
		}
		if(setClip && this.__worldClipChanged) {
			if(this.__worldClip == null) this.__style.removeProperty("clip"); else {
				var clip = this.__worldClip.transform(this.__worldTransform.clone().invert());
				this.__style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
	}
	,__getInteractive: function(stack) {
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl.geom.Matrix());
	}
	,__getTransform: function() {
		if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		return false;
	}
	,__initializeElement: function(element,renderSession) {
		this.__style = element.style;
		this.__style.setProperty("position","absolute",null);
		this.__style.setProperty("top","0",null);
		this.__style.setProperty("left","0",null);
		this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
		renderSession.element.appendChild(element);
		this.__worldAlphaChanged = true;
		this.__worldClipChanged = true;
		this.__worldTransformChanged = true;
		this.__worldVisibleChanged = true;
		this.__worldZ = -1;
	}
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
	}
	,__renderMask: function(renderSession) {
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl.display.DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
				this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			} else {
				this.__worldTransform.tx = (this.get_x() - this.get_scrollRect().x) * b00 + (this.get_y() - this.get_scrollRect().y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - this.get_scrollRect().x) * b01 + (this.get_y() - this.get_scrollRect().y) * b11 + parentTransform.ty;
			}
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x();
				this.__worldTransform.ty = this.get_y();
			} else {
				this.__worldTransform.tx = this.get_y() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly) {
			this.__worldTransformChanged = !this.__worldTransform.equals(this.__worldTransformCache);
			this.__worldTransformCache = this.__worldTransform.clone();
			var worldClip = null;
			if(this.parent != null) {
				var worldVisible = this.parent.__worldVisible && this.get_visible();
				this.__worldVisibleChanged = this.__worldVisible != worldVisible;
				this.__worldVisible = worldVisible;
				var worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
				this.__worldAlpha = worldAlpha;
				if(this.parent.__worldClip != null) worldClip = this.parent.__worldClip.clone();
				if(this.get_scrollRect() != null) {
					var bounds = this.get_scrollRect().clone();
					bounds = bounds.transform(this.__worldTransform);
					if(worldClip != null) bounds.__contract(worldClip.x - this.get_scrollRect().x,worldClip.y - this.get_scrollRect().y,worldClip.width,worldClip.height);
					worldClip = bounds;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				this.__worldVisibleChanged = this.__worldVisible != this.get_visible();
				this.__worldVisible = this.get_visible();
				this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				if(this.get_scrollRect() != null) worldClip = this.get_scrollRect().clone().transform(this.__worldTransform);
			}
			this.__worldClipChanged = worldClip == null && this.__worldClip != null || worldClip != null && !worldClip.equals(this.__worldClip);
			this.__worldClip = worldClip;
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return new Array(); else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) this.__mask.__isMask = false;
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl.Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		return this.__scrollRect;
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new openfl.errors.TypeError("Parameter transform must be non-null.");
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.colorTransform = new openfl.geom.ColorTransform(value.colorTransform.redMultiplier,value.colorTransform.greenMultiplier,value.colorTransform.blueMultiplier,value.colorTransform.alphaMultiplier,value.colorTransform.redOffset,value.colorTransform.greenOffset,value.colorTransform.blueOffset,value.colorTransform.alphaOffset);
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl.display.DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
openfl.display.InteractiveObject = function() {
	openfl.display.DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl.display.InteractiveObject;
openfl.display.InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl.display.InteractiveObject.__super__ = openfl.display.DisplayObject;
openfl.display.InteractiveObject.prototype = $extend(openfl.display.DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl.Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		stack.push(this);
		if(this.parent != null) this.parent.__getInteractive(stack);
	}
	,__class__: openfl.display.InteractiveObject
});
openfl.display.DisplayObjectContainer = function() {
	openfl.display.InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = new Array();
	this.__removedChildren = new Array();
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl.display.DisplayObjectContainer;
openfl.display.DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl.display.DisplayObjectContainer.__super__ = openfl.display.InteractiveObject;
openfl.display.DisplayObjectContainer.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED,true));
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED,true));
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return HxOverrides.indexOf(this.__children,child,0) > -1;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = new Array();
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.shift();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new openfl.errors.RangeError("The supplied index is out of bounds.");
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		if(notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return openfl.display.InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,null);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var i = this.__children.length;
		if(interactiveOnly && (stack == null || !this.mouseChildren)) {
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,interactiveOnly)) {
				if(stack != null) stack.push(this);
				return true;
			}
		} else if(stack != null) {
			var length = stack.length;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,interactiveOnly)) {
				stack.splice(length,0,this);
				return true;
			}
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderDOM: function(renderSession) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		this.__removedChildren = [];
	}
	,__renderMask: function(renderSession) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl.display.InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(!this.__renderable && !this.__worldAlphaChanged && !this.__worldClipChanged && !this.__worldTransformChanged && !this.__worldVisibleChanged) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl.display.InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl.display.DisplayObjectContainer
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
openfl.display.Sprite = function() {
	openfl.display.DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl.display.Sprite;
openfl.display.Sprite.__name__ = ["openfl","display","Sprite"];
openfl.display.Sprite.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Sprite.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getBounds: function(rect,matrix) {
		openfl.display.DisplayObjectContainer.prototype.__getBounds.call(this,rect,matrix);
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix != null?matrix:this.__worldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl.display.DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__worldTransform)) {
			if(stack != null) stack.splice(length,0,this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) {
			this.__graphics.__render();
			if(this.__graphics.__canvas != null) {
				if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
				var context = renderSession.context;
				context.globalAlpha = this.__worldAlpha;
				var transform = this.__worldTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				if(this.get_scrollRect() == null) context.drawImage(this.__graphics.__canvas,this.__graphics.__bounds.x,this.__graphics.__bounds.y); else context.drawImage(this.__graphics.__canvas,this.get_scrollRect().x - this.__graphics.__bounds.x,this.get_scrollRect().y - this.__graphics.__bounds.y,this.get_scrollRect().width,this.get_scrollRect().height,this.__graphics.__bounds.x + this.get_scrollRect().x,this.__graphics.__bounds.y + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__mask != null) renderSession.maskManager.popMask();
			}
		}
		openfl.display.DisplayObjectContainer.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.__graphics != null) {
			if(this.__graphics.__dirty || this.__worldAlphaChanged || this.__canvas == null && this.__graphics.__canvas != null) {
				this.__graphics.__render();
				if(this.__graphics.__canvas != null) {
					if(this.__canvas == null) {
						this.__canvas = window.document.createElement("canvas");
						this.__canvasContext = this.__canvas.getContext("2d");
						this.__initializeElement(this.__canvas,renderSession);
					}
					this.__canvas.width = this.__graphics.__canvas.width;
					this.__canvas.height = this.__graphics.__canvas.height;
					this.__canvasContext.globalAlpha = this.__worldAlpha;
					this.__canvasContext.drawImage(this.__graphics.__canvas,0,0);
				} else if(this.__canvas != null) {
					renderSession.element.removeChild(this.__canvas);
					this.__canvas = null;
					this.__style = null;
				}
			}
			if(this.__canvas != null) {
				if(this.__worldTransformChanged) {
					var transform = new openfl.geom.Matrix();
					transform.translate(this.__graphics.__bounds.x,this.__graphics.__bounds.y);
					transform = transform.mult(this.__worldTransform);
					if(renderSession.isWebkitDOM) {
						transform.a = Math.round(transform.a * 1000) / 1000;
						transform.b = Math.round(transform.b * 1000) / 1000;
						transform.c = Math.round(transform.c * 1000) / 1000;
						transform.d = Math.round(transform.d * 1000) / 1000;
						transform.tx = Math.round(transform.tx * 10) / 10;
						transform.ty = Math.round(transform.ty * 10) / 10;
					}
					this.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
				}
				this.__applyStyle(renderSession,false,false,true);
			}
		} else if(this.__canvas != null) {
			renderSession.element.removeChild(this.__canvas);
			this.__canvas = null;
			this.__style = null;
		}
		openfl.display.DisplayObjectContainer.prototype.__renderDOM.call(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) this.__graphics.__renderMask(renderSession); else openfl.display.DisplayObjectContainer.prototype.__renderMask.call(this,renderSession);
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl.display.Graphics();
		return this.__graphics;
	}
	,__class__: openfl.display.Sprite
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	this.zAccelerometerAxis = 0;
	this.yAccelerometerAxis = 0;
	this.xAccelerometerAxis = 0;
	this.move = false;
	openfl.display.Sprite.call(this);
	this.stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	this.stage.align = openfl.display.StageAlign.TOP_LEFT;
	this._view = new away3d.containers.View3D();
	this.addChild(this._view);
	this._view.get_camera().set_z(-600);
	this._view.get_camera().set_y(200);
	this._view.get_camera().lookAt(new openfl.geom.Vector3D());
	var dat = new openfl.display.BitmapData(256,256,false,11382189);
	var mMaterial = new away3d.materials.TextureMaterial(new away3d.textures.BitmapTexture(dat));
	this._light = new away3d.lights.PointLight();
	this._light.set_x(1000);
	this._light.set_y(2000);
	this._light.set_z(-2000);
	this._light.set_color(16777215);
	this._light2 = new away3d.lights.PointLight();
	this._light2.set_x(5000);
	this._light2.set_y(5000);
	this._light2.set_z(2000);
	this._light2.set_color(1118719);
	this._light3 = new away3d.lights.DirectionalLight(-1,-1,1);
	this._light3.set_color(8947848);
	this._light3.set_ambient(.3);
	this._view.get_scene().addChild(this._light2);
	var container = new away3d.containers.ObjectContainer3D();
	container.addChild(this._light);
	this._view.get_scene().addChild(container);
	this.lightPicker = new away3d.materials.lightpickers.StaticLightPicker([this._light,this._light3]);
	mMaterial.set_lightPicker(this.lightPicker);
	var diffuseMethod = new away3d.materials.methods.CelDiffuseMethod(3);
	var specularMethod = new away3d.materials.methods.CelSpecularMethod();
	specularMethod.set_smoothness(100);
	diffuseMethod.set_smoothness(0);
	mMaterial.set_diffuseMethod(diffuseMethod);
	mMaterial.set_specularMethod(specularMethod);
	this.mesh = new Marshmallow(mMaterial);
	this._view.get_scene().addChild(this.mesh);
	this._view.setRenderCallback($bind(this,this._onEnterFrame));
	this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
	this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
	this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	this.stage.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.onResize));
	this.onResize();
	if(openfl.sensors.Accelerometer.get_isSupported()) {
		this.accl = new openfl.sensors.Accelerometer();
		this.accl.addEventListener(openfl.events.AccelerometerEvent.UPDATE,$bind(this,this.onAcclUpdate));
	}
	var follow = new away3d.containers.ObjectContainer3D();
	follow.set_z(-100);
	this.mesh.addChild(follow);
	this.emitter = new FireEmitter(this.lightPicker,container,follow);
	this.lastMouseX = this.stage.get_mouseX();
	this.lastMouseY = this.stage.get_mouseY();
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = openfl.display.Sprite;
Main.prototype = $extend(openfl.display.Sprite.prototype,{
	onAcclUpdate: function(e) {
		var xAxis = e.accelerationX;
		var yAxis = e.accelerationY;
		var zAxis = e.accelerationZ;
		var pitch = Math.atan(xAxis / Math.sqrt(Math.pow(yAxis,2) + Math.pow(zAxis,2)));
		var roll = Math.atan(yAxis / Math.sqrt(Math.pow(xAxis,2) + Math.pow(zAxis,2)));
		pitch = pitch * 57.2957795130823229;
		roll = roll * 57.2957795130823229;
		this.xAccelerometerAxis = xAxis;
		this.yAccelerometerAxis = yAxis;
		this.zAccelerometerAxis = zAxis;
	}
	,_onEnterFrame: function(e) {
		var xCalc = 0.3 * (this.lastMouseX - this.stage.get_mouseX());
		var yCalc = 0.3 * (this.lastMouseY - this.stage.get_mouseY());
		if(this.move) {
			var objTransform = this.mesh.get_transform();
			objTransform.appendRotation(xCalc,new openfl.geom.Vector3D(0,1,0),null);
			objTransform.appendRotation(yCalc,new openfl.geom.Vector3D(1,0,0),null);
			this.mesh.set_transform(objTransform);
		}
		this.lastMouseX = this.stage.get_mouseX();
		this.lastMouseY = this.stage.get_mouseY();
		this.emitter.update(new openfl.geom.Vector3D(0,.1,0));
		this._view.render();
		this._light.set_x(this.emitter.x * 2);
		this._light.set_y(this.emitter.y * 2);
		this._light.set_z(this.emitter.z * 2);
		if(this.emitter.fireRate > 1010) this._light.set_color(0);
	}
	,onResize: function(event) {
		this._view.set_width(this.stage.stageWidth);
		this._view.set_height(this.stage.stageHeight);
	}
	,onMouseDown: function(event) {
		this.move = true;
		this.lastMouseX = this.stage.get_mouseX();
		this.lastMouseY = this.stage.get_mouseY();
		this.stage.addEventListener(openfl.events.Event.MOUSE_LEAVE,$bind(this,this.onStageMouseLeave));
	}
	,onMouseUp: function(e) {
		this.move = false;
		this.stage.removeEventListener(openfl.events.Event.MOUSE_LEAVE,$bind(this,this.onStageMouseLeave));
	}
	,onStageMouseLeave: function(event) {
		this.move = false;
		this.stage.removeEventListener(openfl.events.Event.MOUSE_LEAVE,$bind(this,this.onStageMouseLeave));
	}
	,onMouseMove: function(e) {
		if(this.move) {
		}
	}
	,__class__: Main
});
var DocumentClass = function() {
	this.stage = openfl.Lib.current.stage;
	Main.call(this);
	this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
openfl.AssetLibrary = function() {
};
$hxClasses["openfl.AssetLibrary"] = openfl.AssetLibrary;
openfl.AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl.AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getBitmapData: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getPath: function(id) {
		return null;
	}
	,getSound: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadBitmapData: function(id,handler) {
		handler(this.getBitmapData(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: openfl.AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe.ds.StringMap();
	this.path = new haxe.ds.StringMap();
	this.className = new haxe.ds.StringMap();
	openfl.AssetLibrary.call(this);
	var id;
	id = "embeds/floor_diffuse.jpg";
	this.path.set(id,id);
	this.type.set(id,openfl.AssetType.IMAGE);
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = openfl.AssetLibrary;
DefaultAssetLibrary.prototype = $extend(openfl.AssetLibrary.prototype,{
	exists: function(id,type) {
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == type || (type == openfl.AssetType.SOUND || type == openfl.AssetType.MUSIC) && (assetType == openfl.AssetType.MUSIC || assetType == openfl.AssetType.SOUND)) return true;
			if(type == openfl.AssetType.BINARY || type == null) return true;
		}
		return false;
	}
	,getBitmapData: function(id) {
		return openfl.display.BitmapData.fromImage((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = ApplicationMain.images.get(key);
			return $r;
		}(this)));
	}
	,getBytes: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = ApplicationMain.urlLoaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new openfl.utils.ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js.Boot.__instanceof(data,openfl.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js.Boot.__cast(Type.createInstance(this.className.get(id),[]) , openfl.text.Font);
	}
	,getMusic: function(id) {
		var sound = new openfl.media.Sound();
		sound.__buffer = true;
		sound.load(new openfl.net.URLRequest(this.path.get(id)));
		return sound;
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getSound: function(id) {
		return new openfl.media.Sound(new openfl.net.URLRequest(this.path.get(id)));
	}
	,getText: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = ApplicationMain.urlLoaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js.Boot.__instanceof(data,openfl.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(type == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadBitmapData: function(id,handler) {
		if(this.path.exists(id)) {
			var loader = new openfl.display.Loader();
			loader.contentLoaderInfo.addEventListener(openfl.events.Event.COMPLETE,function(event) {
				handler((js.Boot.__cast(event.currentTarget.content , openfl.display.Bitmap)).bitmapData);
			});
			loader.load(new openfl.net.URLRequest(this.path.get(id)));
		} else handler(this.getBitmapData(id));
	}
	,loadBytes: function(id,handler) {
		if(this.path.exists(id)) {
			var loader = new openfl.net.URLLoader();
			loader.addEventListener(openfl.events.Event.COMPLETE,function(event) {
				var bytes = new openfl.utils.ByteArray();
				bytes.writeUTFBytes(event.currentTarget.data);
				bytes.position = 0;
				handler(bytes);
			});
			loader.load(new openfl.net.URLRequest(this.path.get(id)));
		} else handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,loadText: function(id,handler) {
		if(this.path.exists(id)) {
			var loader = new openfl.net.URLLoader();
			loader.addEventListener(openfl.events.Event.COMPLETE,function(event) {
				handler(event.currentTarget.data);
			});
			loader.load(new openfl.net.URLRequest(this.path.get(id)));
		} else handler(this.getText(id));
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw "No string matched";
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var FireEmitter = function(lightPicker,parentObject,followObject) {
	this.rotationalVariance = 1;
	this.perpendicularVariance = .5;
	this.fireRate = 2;
	this.fireCounter = 0;
	this.follow = followObject;
	this.parent = parentObject;
	this.fireParticles = new Array();
	this._lightPicker = lightPicker;
	this.x = 0;
	this.y = 0;
	this.z = -100;
	this.spawnFire();
};
$hxClasses["FireEmitter"] = FireEmitter;
FireEmitter.__name__ = ["FireEmitter"];
FireEmitter.prototype = {
	spawnFire: function() {
		var dat = new openfl.display.BitmapData(256,256,false,10242560);
		var material = new away3d.materials.TextureMaterial(new away3d.textures.BitmapTexture(dat));
		material.set_alpha(.9);
		material.set_alphaPremultiplied(true);
		material.set_blendMode(openfl.display.BlendMode.ADD);
		var fireParticle = new FireParticle(this,material,90,Math.random() * 2 * this.perpendicularVariance - this.perpendicularVariance,.1,Math.random() * 2 * this.perpendicularVariance - this.perpendicularVariance,Math.random() * 2 * this.rotationalVariance - this.rotationalVariance,Math.random() * 2 * this.rotationalVariance - this.rotationalVariance,Math.random() * 2 * this.rotationalVariance - this.rotationalVariance);
		fireParticle.set_x(this.x);
		fireParticle.set_y(this.y);
		fireParticle.set_z(this.z);
		fireParticle.speedOffset = Math.random() * .1;
		this.parent.addChild(fireParticle);
		this.fireParticles.push(fireParticle);
	}
	,update: function(gravity) {
		var _g = 0;
		var _g1 = this.fireParticles;
		while(_g < _g1.length) {
			var fireParticle = _g1[_g];
			++_g;
			fireParticle.update(gravity.x,gravity.y,gravity.z);
		}
		if(this.fireParticles.length == 0) this.fireRate = 999999999;
		if(this.fireCounter++ > this.fireRate) {
			this.spawnFire();
			this.fireCounter = 0;
		}
		var position = this.follow.get_scenePosition();
		this.x = position.x;
		this.y = position.y;
		this.z = position.z;
	}
	,remove: function(fireParticle) {
		this.parent.removeChild(fireParticle);
		HxOverrides.remove(this.fireParticles,fireParticle);
	}
	,__class__: FireEmitter
};
var away3d = {};
away3d.library = {};
away3d.library.assets = {};
away3d.library.assets.NamedAssetBase = function(name) {
	if(name == null) name = "null";
	this._name = name;
	this._originalName = name;
	this.updateFullPath();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.library.assets.NamedAssetBase"] = away3d.library.assets.NamedAssetBase;
away3d.library.assets.NamedAssetBase.__name__ = ["away3d","library","assets","NamedAssetBase"];
away3d.library.assets.NamedAssetBase.__super__ = openfl.events.EventDispatcher;
away3d.library.assets.NamedAssetBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_originalName: function() {
		return this._originalName;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(newID) {
		this._id = newID;
		return newID;
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(val) {
		var prev;
		prev = this._name;
		this._name = val;
		if(this._name == null) this._name = "null";
		this.updateFullPath();
		if(this.hasEventListener(away3d.events.Asset3DEvent.ASSET_RENAME)) this.dispatchEvent(new away3d.events.Asset3DEvent(away3d.events.Asset3DEvent.ASSET_RENAME,js.Boot.__cast(this , away3d.library.assets.IAsset),prev));
		return val;
	}
	,get_assetNamespace: function() {
		return this._namespace;
	}
	,get_assetFullPath: function() {
		return this._full_path;
	}
	,assetPathEquals: function(name,ns) {
		return this._name == name && (ns == null || this._namespace == ns);
	}
	,resetAssetPath: function(name,ns,overrideOriginal) {
		if(overrideOriginal == null) overrideOriginal = true;
		if(name != null) this._name = name; else this._name = "null";
		if(ns != null) this._namespace = ns; else this._namespace = away3d.library.assets.NamedAssetBase.DEFAULT_NAMESPACE;
		if(overrideOriginal) this._originalName = this._name;
		this.updateFullPath();
	}
	,updateFullPath: function() {
		this._full_path = [this._namespace,this._name];
	}
	,__class__: away3d.library.assets.NamedAssetBase
	,__properties__: {get_assetFullPath:"get_assetFullPath",get_assetNamespace:"get_assetNamespace",set_name:"set_name",get_name:"get_name",set_id:"set_id",get_id:"get_id",get_originalName:"get_originalName"}
});
away3d.core = {};
away3d.core.base = {};
away3d.core.base.Object3D = function() {
	this._smallestNumber = 0.0000000000000000000001;
	this._transformDirty = true;
	this._rotationX = 0;
	this._rotationY = 0;
	this._rotationZ = 0;
	this._eulers = new openfl.geom.Vector3D();
	this._flipY = new openfl.geom.Matrix3D();
	this._zOffset = 0;
	this._transform = new openfl.geom.Matrix3D();
	this._scaleX = 1;
	this._scaleY = 1;
	this._scaleZ = 1;
	this._x = 0;
	this._y = 0;
	this._z = 0;
	this._pivotPoint = new openfl.geom.Vector3D();
	this._pivotZero = true;
	this._pos = new openfl.geom.Vector3D();
	this._rot = new openfl.geom.Vector3D();
	this._sca = new openfl.geom.Vector3D();
	this._transformComponents = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(openfl._Vector.Vector_Impl_._new(3)),3);
	var this1 = this._transformComponents;
	if(0 >= this1.length && !this1.fixed) this1.length = 1;
	this1.data[0] = this._pos;
	var this2 = this._transformComponents;
	if(1 >= this2.length && !this2.fixed) this2.length = 2;
	this2.data[1] = this._rot;
	var this3 = this._transformComponents;
	if(2 >= this3.length && !this3.fixed) this3.length = 3;
	this3.data[2] = this._sca;
	this._transform.identity();
	this._flipY.appendScale(1,-1,1);
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.core.base.Object3D"] = away3d.core.base.Object3D;
away3d.core.base.Object3D.__name__ = ["away3d","core","base","Object3D"];
away3d.core.base.Object3D.__super__ = away3d.library.assets.NamedAssetBase;
away3d.core.base.Object3D.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	invalidatePivot: function() {
		this._pivotZero = this._pivotPoint.x == 0 && this._pivotPoint.y == 0 && this._pivotPoint.z == 0;
		this.invalidateTransform();
	}
	,invalidatePosition: function() {
		if(this._positionDirty) return;
		this._positionDirty = true;
		this.invalidateTransform();
		if(this._listenToPositionChanged) this.notifyPositionChanged();
	}
	,notifyPositionChanged: function() {
		if(this._positionChanged == null) this._positionChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.POSITION_CHANGED,this);
		this.dispatchEvent(this._positionChanged);
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		away3d.library.assets.NamedAssetBase.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case away3d.events.Object3DEvent.POSITION_CHANGED:
			this._listenToPositionChanged = true;
			break;
		case away3d.events.Object3DEvent.ROTATION_CHANGED:
			this._listenToRotationChanged = true;
			break;
		case away3d.events.Object3DEvent.SCALE_CHANGED:
			this._listenToRotationChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		away3d.library.assets.NamedAssetBase.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) return;
		switch(type) {
		case away3d.events.Object3DEvent.POSITION_CHANGED:
			this._listenToPositionChanged = false;
			break;
		case away3d.events.Object3DEvent.ROTATION_CHANGED:
			this._listenToRotationChanged = false;
			break;
		case away3d.events.Object3DEvent.SCALE_CHANGED:
			this._listenToScaleChanged = false;
			break;
		}
	}
	,invalidateRotation: function() {
		if(this._rotationDirty) return;
		this._rotationDirty = true;
		this.invalidateTransform();
		if(this._listenToRotationChanged) this.notifyRotationChanged();
	}
	,notifyRotationChanged: function() {
		if(this._rotationChanged == null) this._rotationChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.ROTATION_CHANGED,this);
		this.dispatchEvent(this._rotationChanged);
	}
	,invalidateScale: function() {
		if(this._scaleDirty) return;
		this._scaleDirty = true;
		this.invalidateTransform();
		if(this._listenToScaleChanged) this.notifyScaleChanged();
	}
	,notifyScaleChanged: function() {
		if(this._scaleChanged == null) this._scaleChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCALE_CHANGED,this);
		this.dispatchEvent(this._scaleChanged);
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._x == val) return val;
		this._x = val;
		this.invalidatePosition();
		return val;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._y == val) return val;
		this._y = val;
		this.invalidatePosition();
		return val;
	}
	,get_z: function() {
		return this._z;
	}
	,set_z: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._z == val) return val;
		this._z = val;
		this.invalidatePosition();
		return val;
	}
	,get_rotationX: function() {
		return this._rotationX * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationX: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationX() == val) return val;
		this._rotationX = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationY: function() {
		return this._rotationY * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationY: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationY() == val) return val;
		this._rotationY = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationZ: function() {
		return this._rotationZ * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationZ: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationZ() == val) return val;
		this._rotationZ = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_scaleX: function() {
		return this._scaleX;
	}
	,set_scaleX: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleX == val) return val;
		this._scaleX = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleY: function() {
		return this._scaleY;
	}
	,set_scaleY: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleY == val) return val;
		this._scaleY = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleZ: function() {
		return this._scaleZ;
	}
	,set_scaleZ: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleZ == val) return val;
		this._scaleZ = val;
		this.invalidateScale();
		return val;
	}
	,get_eulers: function() {
		this._eulers.x = this._rotationX * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		this._eulers.y = this._rotationY * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		this._eulers.z = this._rotationZ * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		return this._eulers;
	}
	,set_eulers: function(value) {
		this._rotationX = value.x * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = value.y * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = value.z * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return value;
	}
	,get_transform: function() {
		if(this._transformDirty) this.updateTransform();
		return this._transform;
	}
	,set_transform: function(val) {
		if(val.rawData.data[0] == 0) {
			var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
			val.copyRawDataTo(raw);
			if(0 >= raw.length && !raw.fixed) raw.length = 1;
			raw.data[0] = this._smallestNumber;
			val.copyRawDataFrom(raw);
		}
		var elements = val.decompose();
		var vec;
		vec = elements.data[0];
		if(this._x != vec.x || this._y != vec.y || this._z != vec.z) {
			this._x = vec.x;
			this._y = vec.y;
			this._z = vec.z;
			this.invalidatePosition();
		}
		vec = elements.data[1];
		if(this._rotationX != vec.x || this._rotationY != vec.y || this._rotationZ != vec.z) {
			this._rotationX = vec.x;
			this._rotationY = vec.y;
			this._rotationZ = vec.z;
			this.invalidateRotation();
		}
		vec = elements.data[2];
		if(this._scaleX != vec.x || this._scaleY != vec.y || this._scaleZ != vec.z) {
			this._scaleX = vec.x;
			this._scaleY = vec.y;
			this._scaleZ = vec.z;
			this.invalidateScale();
		}
		return val;
	}
	,get_pivotPoint: function() {
		return this._pivotPoint;
	}
	,set_pivotPoint: function(pivot) {
		this._pivotPoint = new openfl.geom.Vector3D(pivot.x,pivot.y,pivot.z,pivot.w);
		this.invalidatePivot();
		return pivot;
	}
	,get_position: function() {
		this.get_transform().copyColumnTo(3,this._pos);
		return this._pos.clone();
	}
	,set_position: function(value) {
		this._x = value.x;
		this._y = value.y;
		this._z = value.z;
		this.invalidatePosition();
		return value;
	}
	,get_forwardVector: function() {
		return away3d.core.math.Matrix3DUtils.getForward(this.get_transform());
	}
	,get_rightVector: function() {
		return away3d.core.math.Matrix3DUtils.getRight(this.get_transform());
	}
	,get_upVector: function() {
		return away3d.core.math.Matrix3DUtils.getUp(this.get_transform());
	}
	,get_backVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getForward(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,get_leftVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getRight(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,get_downVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getUp(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,scale: function(value) {
		this._scaleX *= value;
		this._scaleY *= value;
		this._scaleZ *= value;
		this.invalidateScale();
	}
	,moveForward: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,0,1),distance);
	}
	,moveBackward: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,0,1),-distance);
	}
	,moveLeft: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(1,0,0),-distance);
	}
	,moveRight: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(1,0,0),distance);
	}
	,moveUp: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,1,0),distance);
	}
	,moveDown: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,1,0),-distance);
	}
	,moveTo: function(dx,dy,dz) {
		if(this._x == dx && this._y == dy && this._z == dz) return;
		this._x = dx;
		this._y = dy;
		this._z = dz;
		this.invalidatePosition();
	}
	,movePivot: function(dx,dy,dz) {
		if(this._pivotPoint == null) this._pivotPoint = new openfl.geom.Vector3D();
		this._pivotPoint.x += dx;
		this._pivotPoint.y += dy;
		this._pivotPoint.z += dz;
		this.invalidatePivot();
	}
	,translate: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this._x += x * len;
		this._y += y * len;
		this._z += z * len;
		this.invalidatePosition();
	}
	,translateLocal: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this.get_transform().prependTranslation(x * len,y * len,z * len);
		this._transform.copyColumnTo(3,this._pos);
		this._x = this._pos.x;
		this._y = this._pos.y;
		this._z = this._pos.z;
		this.invalidatePosition();
	}
	,pitch: function(angle) {
		this.rotate(new openfl.geom.Vector3D(1,0,0),angle);
	}
	,yaw: function(angle) {
		this.rotate(new openfl.geom.Vector3D(0,1,0),angle);
	}
	,roll: function(angle) {
		this.rotate(new openfl.geom.Vector3D(0,0,1),angle);
	}
	,clone: function() {
		var clone = new away3d.core.base.Object3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_name(this.get_name());
		return clone;
	}
	,rotateTo: function(ax,ay,az) {
		this._rotationX = ax * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = ay * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = az * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
	}
	,rotate: function(axis,angle) {
		var m = new openfl.geom.Matrix3D();
		m.prependRotation(angle,axis,null);
		var vec;
		var this1 = m.decompose();
		vec = this1.data[1];
		this._rotationX += vec.x;
		this._rotationY += vec.y;
		this._rotationZ += vec.z;
		this.invalidateRotation();
	}
	,lookAt: function(target,upAxis) {
		var yAxis;
		var zAxis;
		var xAxis;
		var raw;
		if(upAxis == null) upAxis = new openfl.geom.Vector3D(0,1,0);
		zAxis = target.subtract(this.get_position());
		zAxis.normalize();
		xAxis = new openfl.geom.Vector3D(upAxis.y * zAxis.z - upAxis.z * zAxis.y,upAxis.z * zAxis.x - upAxis.x * zAxis.z,upAxis.x * zAxis.y - upAxis.y * zAxis.x,1);
		xAxis.normalize();
		if(Math.sqrt(xAxis.x * xAxis.x + xAxis.y * xAxis.y + xAxis.z * xAxis.z) < .05) xAxis = upAxis.crossProduct(new openfl.geom.Vector3D(0,0,1));
		yAxis = new openfl.geom.Vector3D(zAxis.y * xAxis.z - zAxis.z * xAxis.y,zAxis.z * xAxis.x - zAxis.x * xAxis.z,zAxis.x * xAxis.y - zAxis.y * xAxis.x,1);
		raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		if(0 >= raw.length && !raw.fixed) raw.length = 1;
		raw.data[0] = this._scaleX * xAxis.x;
		if(1 >= raw.length && !raw.fixed) raw.length = 2;
		raw.data[1] = this._scaleX * xAxis.y;
		if(2 >= raw.length && !raw.fixed) raw.length = 3;
		raw.data[2] = this._scaleX * xAxis.z;
		if(3 >= raw.length && !raw.fixed) raw.length = 4;
		raw.data[3] = 0;
		if(4 >= raw.length && !raw.fixed) raw.length = 5;
		raw.data[4] = this._scaleY * yAxis.x;
		if(5 >= raw.length && !raw.fixed) raw.length = 6;
		raw.data[5] = this._scaleY * yAxis.y;
		if(6 >= raw.length && !raw.fixed) raw.length = 7;
		raw.data[6] = this._scaleY * yAxis.z;
		if(7 >= raw.length && !raw.fixed) raw.length = 8;
		raw.data[7] = 0;
		if(8 >= raw.length && !raw.fixed) raw.length = 9;
		raw.data[8] = this._scaleZ * zAxis.x;
		if(9 >= raw.length && !raw.fixed) raw.length = 10;
		raw.data[9] = this._scaleZ * zAxis.y;
		if(10 >= raw.length && !raw.fixed) raw.length = 11;
		raw.data[10] = this._scaleZ * zAxis.z;
		if(11 >= raw.length && !raw.fixed) raw.length = 12;
		raw.data[11] = 0;
		if(12 >= raw.length && !raw.fixed) raw.length = 13;
		raw.data[12] = this._x;
		if(13 >= raw.length && !raw.fixed) raw.length = 14;
		raw.data[13] = this._y;
		if(14 >= raw.length && !raw.fixed) raw.length = 15;
		raw.data[14] = this._z;
		if(15 >= raw.length && !raw.fixed) raw.length = 16;
		raw.data[15] = 1;
		this._transform.copyRawDataFrom(raw);
		this.set_transform(this.get_transform());
		if(zAxis.z < 0) {
			this.set_rotationY(180 - this.get_rotationY());
			var _g = this;
			_g.set_rotationX(_g.get_rotationX() - 180);
			var _g1 = this;
			_g1.set_rotationZ(_g1.get_rotationZ() - 180);
		}
	}
	,dispose: function() {
	}
	,disposeAsset: function() {
		this.dispose();
	}
	,invalidateTransform: function() {
		this._transformDirty = true;
	}
	,updateTransform: function() {
		this._pos.x = this._x;
		this._pos.y = this._y;
		this._pos.z = this._z;
		this._rot.x = this._rotationX;
		this._rot.y = this._rotationY;
		this._rot.z = this._rotationZ;
		this._sca.x = this._scaleX;
		this._sca.y = this._scaleY;
		this._sca.z = this._scaleZ;
		this._transform.recompose(this._transformComponents);
		if(!this._pivotZero) {
			this._transform.prependTranslation(-this._pivotPoint.x,-this._pivotPoint.y,-this._pivotPoint.z);
			this._transform.appendTranslation(this._pivotPoint.x,this._pivotPoint.y,this._pivotPoint.z);
		}
		this._transformDirty = false;
		this._positionDirty = false;
		this._rotationDirty = false;
		this._scaleDirty = false;
	}
	,get_zOffset: function() {
		return this._zOffset;
	}
	,set_zOffset: function(value) {
		this._zOffset = value;
		return value;
	}
	,__class__: away3d.core.base.Object3D
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{set_zOffset:"set_zOffset",get_zOffset:"get_zOffset",get_downVector:"get_downVector",get_leftVector:"get_leftVector",get_backVector:"get_backVector",get_upVector:"get_upVector",get_rightVector:"get_rightVector",get_forwardVector:"get_forwardVector",set_position:"set_position",get_position:"get_position",set_pivotPoint:"set_pivotPoint",get_pivotPoint:"get_pivotPoint",set_transform:"set_transform",get_transform:"get_transform",set_eulers:"set_eulers",get_eulers:"get_eulers",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
away3d.library.assets.IAsset = function() { };
$hxClasses["away3d.library.assets.IAsset"] = away3d.library.assets.IAsset;
away3d.library.assets.IAsset.__name__ = ["away3d","library","assets","IAsset"];
away3d.library.assets.IAsset.__interfaces__ = [openfl.events.IEventDispatcher];
away3d.library.assets.IAsset.prototype = {
	__class__: away3d.library.assets.IAsset
	,__properties__: {get_assetFullPath:"get_assetFullPath",get_assetType:"get_assetType",get_assetNamespace:"get_assetNamespace",set_id:"set_id",get_id:"get_id",set_name:"set_name",get_name:"get_name"}
};
away3d.containers = {};
away3d.containers.ObjectContainer3D = function() {
	this._sceneTransform = new openfl.geom.Matrix3D();
	this._sceneTransformDirty = true;
	this._children = new Array();
	this._mouseChildren = true;
	this._inverseSceneTransform = new openfl.geom.Matrix3D();
	this._inverseSceneTransformDirty = true;
	this._scenePosition = new openfl.geom.Vector3D();
	this._scenePositionDirty = true;
	this._explicitVisibility = true;
	this._implicitVisibility = true;
	this._ignoreTransform = false;
	away3d.core.base.Object3D.call(this);
};
$hxClasses["away3d.containers.ObjectContainer3D"] = away3d.containers.ObjectContainer3D;
away3d.containers.ObjectContainer3D.__name__ = ["away3d","containers","ObjectContainer3D"];
away3d.containers.ObjectContainer3D.__interfaces__ = [away3d.library.assets.IAsset];
away3d.containers.ObjectContainer3D.__super__ = away3d.core.base.Object3D;
away3d.containers.ObjectContainer3D.prototype = $extend(away3d.core.base.Object3D.prototype,{
	get_ignoreTransform: function() {
		return this._ignoreTransform;
	}
	,set_ignoreTransform: function(value) {
		this._ignoreTransform = value;
		this._sceneTransformDirty = !value;
		this._inverseSceneTransformDirty = !value;
		this._scenePositionDirty = !value;
		if(!value) {
			this._sceneTransform.identity();
			this._scenePosition.x = 0;
			this._scenePosition.y = 0;
			this._scenePosition.z = 0;
		}
		return value;
	}
	,get_implicitPartition: function() {
		return this._implicitPartition;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) return value;
		var i = 0;
		var len = this._children.length;
		var child;
		this._implicitPartition = value;
		while(i < len) {
			child = this._children[i++];
			if(child._explicitPartition == null) child.set_implicitPartition(value);
		}
		return value;
	}
	,get_isVisible: function() {
		return this._implicitVisibility && this._explicitVisibility;
	}
	,setParent: function(value) {
		this._parent = value;
		this.updateMouseChildren();
		if(value == null) {
			this.set_scene(null);
			return;
		}
		this.notifySceneTransformChange();
		this.notifySceneChange();
	}
	,notifySceneTransformChange: function() {
		if(this._sceneTransformDirty || this._ignoreTransform) return;
		this.invalidateSceneTransform();
		var i = 0;
		var len = this._children.length;
		while(i < len) this._children[i++].notifySceneTransformChange();
		if(this._listenToSceneTransformChanged) {
			if(this._sceneTransformChanged == null) this._sceneTransformChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED,this);
			this.dispatchEvent(this._sceneTransformChanged);
		}
	}
	,notifySceneChange: function() {
		this.notifySceneTransformChange();
		var i = 0;
		var len = this._children.length;
		while(i < len) this._children[i++].notifySceneChange();
		if(this._listenToSceneChanged) {
			if(this._scenechanged == null) this._scenechanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCENE_CHANGED,this);
			this.dispatchEvent(this._scenechanged);
		}
	}
	,updateMouseChildren: function() {
		if(this._parent != null && !this._parent._isRoot) this._ancestorsAllowMouseEnabled = this.get_parent()._ancestorsAllowMouseEnabled && this._parent.get_mouseChildren(); else this._ancestorsAllowMouseEnabled = this.get_mouseChildren();
		var len = this._children.length;
		var i = 0;
		while(i < len) {
			this._children[i].updateMouseChildren();
			++i;
		}
	}
	,get_mouseEnabled: function() {
		return this._mouseEnabled;
	}
	,set_mouseEnabled: function(value) {
		this._mouseEnabled = value;
		this.updateMouseChildren();
		return value;
	}
	,invalidateTransform: function() {
		away3d.core.base.Object3D.prototype.invalidateTransform.call(this);
		this.notifySceneTransformChange();
	}
	,invalidateSceneTransform: function() {
		this._sceneTransformDirty = !this._ignoreTransform;
		this._inverseSceneTransformDirty = !this._ignoreTransform;
		this._scenePositionDirty = !this._ignoreTransform;
	}
	,updateSceneTransform: function() {
		if(this._parent != null && !this._parent._isRoot) {
			this._sceneTransform.copyFrom(this._parent.get_sceneTransform());
			this._sceneTransform.prepend(this.get_transform());
		} else this._sceneTransform.copyFrom(this.get_transform());
		this._sceneTransformDirty = false;
	}
	,get_mouseChildren: function() {
		return this._mouseChildren;
	}
	,set_mouseChildren: function(value) {
		this._mouseChildren = value;
		this.updateMouseChildren();
		return value;
	}
	,get_visible: function() {
		return this._explicitVisibility;
	}
	,set_visible: function(value) {
		var len = this._children.length;
		this._explicitVisibility = value;
		var i = 0;
		while(i < len) {
			this._children[i].updateImplicitVisibility();
			++i;
		}
		return value;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.CONTAINER;
	}
	,get_scenePosition: function() {
		if(this._scenePositionDirty) {
			this.get_sceneTransform().copyColumnTo(3,this._scenePosition);
			this._scenePositionDirty = false;
		}
		return this._scenePosition;
	}
	,get_minX: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child = this._children[i++];
			m = child.get_minX() + child.get_x();
			if(m < min) min = m;
		}
		return min;
	}
	,get_minY: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child = this._children[i++];
			m = child.get_minY() + child.get_y();
			if(m < min) min = m;
		}
		return min;
	}
	,get_minZ: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child = this._children[i++];
			m = child.get_minZ() + child.get_z();
			if(m < min) min = m;
		}
		return min;
	}
	,get_maxX: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child = this._children[i++];
			m = child.get_maxX() + child.get_x();
			if(m > max) max = m;
		}
		return max;
	}
	,get_maxY: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child = this._children[i++];
			m = child.get_maxY() + child.get_y();
			if(m > max) max = m;
		}
		return max;
	}
	,get_maxZ: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child = this._children[i++];
			m = child.get_maxZ() + child.get_z();
			if(m > max) max = m;
		}
		return max;
	}
	,get_partition: function() {
		return this._explicitPartition;
	}
	,set_partition: function(value) {
		this._explicitPartition = value;
		this.set_implicitPartition(value != null?value:this._parent != null?this._parent.get_implicitPartition():null);
		return value;
	}
	,get_sceneTransform: function() {
		if(this._sceneTransformDirty) this.updateSceneTransform();
		return this._sceneTransform;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(value) {
		var i = 0;
		var len = this._children.length;
		while(i < len) this._children[i++].set_scene(value);
		if(this._scene == value) return value;
		if(value == null) this._oldScene = this._scene;
		if(this._explicitPartition != null && this._oldScene != null && this._oldScene != this._scene) this.set_partition(null);
		if(value != null) this._oldScene = null;
		this._scene = value;
		if(this._scene != null) this._scene.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.ADDED_TO_SCENE,this)); else if(this._oldScene != null) this._oldScene.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.REMOVED_FROM_SCENE,this));
		return value;
	}
	,get_inverseSceneTransform: function() {
		if(this._inverseSceneTransformDirty) {
			this._inverseSceneTransform.copyFrom(this.get_sceneTransform());
			this._inverseSceneTransform.invert();
			this._inverseSceneTransformDirty = false;
		}
		return this._inverseSceneTransform;
	}
	,get_parent: function() {
		return this._parent;
	}
	,contains: function(child) {
		return HxOverrides.indexOf(this._children,child,0) >= 0;
	}
	,addChild: function(child) {
		if(child == null) throw new openfl.errors.Error("Parameter child cannot be null.");
		if(child._parent != null) child._parent.removeChild(child);
		if(child._explicitPartition == null) child.set_implicitPartition(this._implicitPartition);
		child.setParent(this);
		child.set_scene(this._scene);
		child.notifySceneTransformChange();
		child.updateMouseChildren();
		child.updateImplicitVisibility();
		this._children.push(child);
		return child;
	}
	,addChildren: function(childarray) {
		var _g = 0;
		while(_g < childarray.length) {
			var child = childarray[_g];
			++_g;
			this.addChild(child);
		}
	}
	,removeChild: function(child) {
		if(child == null) throw new openfl.errors.Error("Parameter child cannot be null");
		var childIndex = HxOverrides.indexOf(this._children,child,0);
		if(childIndex == -1) throw new openfl.errors.Error("Parameter is not a child of the caller");
		this.removeChildInternal(childIndex,child);
	}
	,removeChildAt: function(index) {
		var child = this._children[index];
		this.removeChildInternal(index,child);
	}
	,removeChildInternal: function(childIndex,child) {
		this._children.splice(childIndex,1);
		child.setParent(null);
		if(child._explicitPartition == null) child.set_implicitPartition(null);
	}
	,getChildAt: function(index) {
		return this._children[index];
	}
	,get_numChildren: function() {
		return this._children.length;
	}
	,lookAt: function(target,upAxis) {
		away3d.core.base.Object3D.prototype.lookAt.call(this,target,upAxis);
		this.notifySceneTransformChange();
	}
	,translateLocal: function(axis,distance) {
		away3d.core.base.Object3D.prototype.translateLocal.call(this,axis,distance);
		this.notifySceneTransformChange();
	}
	,dispose: function() {
		if(this.get_parent() != null) this.get_parent().removeChild(this);
	}
	,disposeWithChildren: function() {
		this.dispose();
		while(this.get_numChildren() > 0) this.getChildAt(0).dispose();
	}
	,clone: function() {
		var clone = new away3d.containers.ObjectContainer3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_partition(this.get_partition());
		clone.set_name(this.get_name());
		var len = this._children.length;
		var i = 0;
		while(i < len) {
			clone.addChild(js.Boot.__cast(this._children[i].clone() , away3d.containers.ObjectContainer3D));
			++i;
		}
		return clone;
	}
	,rotate: function(axis,angle) {
		away3d.core.base.Object3D.prototype.rotate.call(this,axis,angle);
		this.notifySceneTransformChange();
	}
	,dispatchEvent: function(event) {
		var ret = away3d.core.base.Object3D.prototype.dispatchEvent.call(this,event);
		if(event.bubbles) {
			if(this._parent != null) this._parent.dispatchEvent(event); else if(this._scene != null) this._scene.dispatchEvent(event);
		}
		return ret;
	}
	,updateImplicitVisibility: function() {
		var len = this._children.length;
		this._implicitVisibility = this._parent._explicitVisibility && this._parent._implicitVisibility;
		var i = 0;
		while(i < len) {
			this._children[i].updateImplicitVisibility();
			++i;
		}
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		away3d.core.base.Object3D.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED:
			this._listenToSceneTransformChanged = true;
			break;
		case away3d.events.Object3DEvent.SCENE_CHANGED:
			this._listenToSceneChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		away3d.core.base.Object3D.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) return;
		switch(type) {
		case away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED:
			this._listenToSceneTransformChanged = false;
			break;
		case away3d.events.Object3DEvent.SCENE_CHANGED:
			this._listenToSceneChanged = false;
			break;
		}
	}
	,__class__: away3d.containers.ObjectContainer3D
	,__properties__: $extend(away3d.core.base.Object3D.prototype.__properties__,{get_numChildren:"get_numChildren",get_parent:"get_parent",get_inverseSceneTransform:"get_inverseSceneTransform",set_scene:"set_scene",get_scene:"get_scene",get_sceneTransform:"get_sceneTransform",set_partition:"set_partition",get_partition:"get_partition",get_maxZ:"get_maxZ",get_maxY:"get_maxY",get_maxX:"get_maxX",get_minZ:"get_minZ",get_minY:"get_minY",get_minX:"get_minX",get_scenePosition:"get_scenePosition",get_assetType:"get_assetType",set_visible:"set_visible",get_visible:"get_visible",set_mouseChildren:"set_mouseChildren",get_mouseChildren:"get_mouseChildren",set_mouseEnabled:"set_mouseEnabled",get_mouseEnabled:"get_mouseEnabled",get_isVisible:"get_isVisible",set_implicitPartition:"set_implicitPartition",get_implicitPartition:"get_implicitPartition",set_ignoreTransform:"set_ignoreTransform",get_ignoreTransform:"get_ignoreTransform"})
});
away3d.entities = {};
away3d.entities.Entity = function() {
	this._boundsIsShown = false;
	this._boundsInvalid = true;
	this._worldBoundsInvalid = true;
	away3d.containers.ObjectContainer3D.call(this);
	this._bounds = this.getDefaultBoundingVolume();
	this._worldBounds = this.getDefaultBoundingVolume();
};
$hxClasses["away3d.entities.Entity"] = away3d.entities.Entity;
away3d.entities.Entity.__name__ = ["away3d","entities","Entity"];
away3d.entities.Entity.__super__ = away3d.containers.ObjectContainer3D;
away3d.entities.Entity.prototype = $extend(away3d.containers.ObjectContainer3D.prototype,{
	set_ignoreTransform: function(value) {
		if(this._scene != null) this._scene.invalidateEntityBounds(this);
		away3d.containers.ObjectContainer3D.prototype.set_ignoreTransform.call(this,value);
		return value;
	}
	,get_shaderPickingDetails: function() {
		return this._shaderPickingDetails;
	}
	,set_shaderPickingDetails: function(value) {
		this._shaderPickingDetails = value;
		return value;
	}
	,get_staticNode: function() {
		return this._staticNode;
	}
	,set_staticNode: function(value) {
		this._staticNode = value;
		return value;
	}
	,get_pickingCollisionVO: function() {
		if(this._pickingCollisionVO == null) this._pickingCollisionVO = new away3d.core.pick.PickingCollisionVO(this);
		return this._pickingCollisionVO;
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		return true;
	}
	,get_showBounds: function() {
		return this._showBounds;
	}
	,set_showBounds: function(value) {
		if(value == this._showBounds) return value;
		this._showBounds = value;
		if(this._showBounds) this.addBounds(); else this.removeBounds();
		return value;
	}
	,get_minX: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().x;
	}
	,get_minY: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().y;
	}
	,get_minZ: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().z;
	}
	,get_maxX: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().x;
	}
	,get_maxY: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().y;
	}
	,get_maxZ: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().z;
	}
	,get_bounds: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds;
	}
	,set_bounds: function(value) {
		this.removeBounds();
		this._bounds = value;
		this._worldBounds = value.clone();
		this.invalidateBounds();
		if(this._showBounds) this.addBounds();
		return value;
	}
	,get_worldBounds: function() {
		if(this._worldBoundsInvalid) this.updateWorldBounds();
		return this._worldBounds;
	}
	,updateWorldBounds: function() {
		this._worldBounds.transformFrom(this.get_bounds(),this.get_sceneTransform());
		this._worldBoundsInvalid = false;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) return value;
		if(this._implicitPartition != null) this.notifyPartitionUnassigned();
		away3d.containers.ObjectContainer3D.prototype.set_implicitPartition.call(this,value);
		this.notifyPartitionAssigned();
		return value;
	}
	,set_scene: function(value) {
		if(value == this._scene) return value;
		if(this._scene != null) this._scene.unregisterEntity(this);
		if(value != null) value.registerEntity(this);
		away3d.containers.ObjectContainer3D.prototype.set_scene.call(this,value);
		return value;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ENTITY;
	}
	,get_pickingCollider: function() {
		return this._pickingCollider;
	}
	,set_pickingCollider: function(value) {
		this._pickingCollider = value;
		return value;
	}
	,getEntityPartitionNode: function() {
		if(this._partitionNode == null) this._partitionNode = this.createEntityPartitionNode();
		return this._partitionNode;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		var localRayPosition = this.get_inverseSceneTransform().transformVector(rayPosition);
		var localRayDirection = this.get_inverseSceneTransform().deltaTransformVector(rayDirection);
		if(this.get_pickingCollisionVO().localNormal == null) this.get_pickingCollisionVO().localNormal = new openfl.geom.Vector3D();
		var rayEntryDistance = this.get_bounds().rayIntersection(localRayPosition,localRayDirection,this.get_pickingCollisionVO().localNormal);
		if(rayEntryDistance < 0) return false;
		this.get_pickingCollisionVO().rayEntryDistance = rayEntryDistance;
		this.get_pickingCollisionVO().localRayPosition = localRayPosition;
		this.get_pickingCollisionVO().localRayDirection = localRayDirection;
		this.get_pickingCollisionVO().rayPosition = rayPosition;
		this.get_pickingCollisionVO().rayDirection = rayDirection;
		this.get_pickingCollisionVO().rayOriginIsInsideBounds = rayEntryDistance == 0;
		return true;
	}
	,createEntityPartitionNode: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.AxisAlignedBoundingBox();
	}
	,updateBounds: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,invalidateSceneTransform: function() {
		if(!this._ignoreTransform) {
			away3d.containers.ObjectContainer3D.prototype.invalidateSceneTransform.call(this);
			this._worldBoundsInvalid = true;
			this.notifySceneBoundsInvalid();
		}
	}
	,invalidateBounds: function() {
		this._boundsInvalid = true;
		this._worldBoundsInvalid = true;
		this.notifySceneBoundsInvalid();
	}
	,updateMouseChildren: function() {
		if(this._parent == null && this.get_pickingCollider() != null) {
			if(js.Boot.__instanceof(this._parent,away3d.entities.Entity)) {
				var collider = (js.Boot.__cast(this._parent , away3d.entities.Entity)).get_pickingCollider();
				if(collider != null) this.set_pickingCollider(collider);
			}
		}
		away3d.containers.ObjectContainer3D.prototype.updateMouseChildren.call(this);
	}
	,notifySceneBoundsInvalid: function() {
		if(this._scene != null) this._scene.invalidateEntityBounds(this);
	}
	,notifyPartitionAssigned: function() {
		if(this._scene != null) this._scene.registerPartition(this);
	}
	,notifyPartitionUnassigned: function() {
		if(this._scene != null) this._scene.unregisterPartition(this);
	}
	,addBounds: function() {
		if(!this._boundsIsShown) {
			this._boundsIsShown = true;
			this.addChild(this._bounds.get_boundingRenderable());
		}
	}
	,removeBounds: function() {
		if(this._boundsIsShown) {
			this._boundsIsShown = false;
			this.removeChild(this._bounds.get_boundingRenderable());
			this._bounds.disposeRenderable();
		}
	}
	,internalUpdate: function() {
		if(this._controller != null) this._controller.update();
	}
	,__class__: away3d.entities.Entity
	,__properties__: $extend(away3d.containers.ObjectContainer3D.prototype.__properties__,{set_pickingCollider:"set_pickingCollider",get_pickingCollider:"get_pickingCollider",get_worldBounds:"get_worldBounds",set_bounds:"set_bounds",get_bounds:"get_bounds",set_showBounds:"set_showBounds",get_showBounds:"get_showBounds",get_pickingCollisionVO:"get_pickingCollisionVO",set_staticNode:"set_staticNode",get_staticNode:"get_staticNode",set_shaderPickingDetails:"set_shaderPickingDetails",get_shaderPickingDetails:"get_shaderPickingDetails"})
});
away3d.core.base.IMaterialOwner = function() { };
$hxClasses["away3d.core.base.IMaterialOwner"] = away3d.core.base.IMaterialOwner;
away3d.core.base.IMaterialOwner.__name__ = ["away3d","core","base","IMaterialOwner"];
away3d.core.base.IMaterialOwner.prototype = {
	__class__: away3d.core.base.IMaterialOwner
	,__properties__: {get_animator:"get_animator",set_material:"set_material",get_material:"get_material"}
};
away3d.entities.Mesh = function(geometry,material) {
	this._castsShadows = true;
	this._shareAnimationGeometry = true;
	away3d.entities.Entity.call(this);
	this._subMeshes = new Array();
	this.set_geometry(geometry);
	if(this.get_geometry() == null) this.set_geometry(new away3d.core.base.Geometry());
	this.set_material(material);
	if(this.get_material() == null) this.set_material(away3d.materials.utils.DefaultMaterialManager.getDefaultMaterial(this));
};
$hxClasses["away3d.entities.Mesh"] = away3d.entities.Mesh;
away3d.entities.Mesh.__name__ = ["away3d","entities","Mesh"];
away3d.entities.Mesh.__interfaces__ = [away3d.library.assets.IAsset,away3d.core.base.IMaterialOwner];
away3d.entities.Mesh.__super__ = away3d.entities.Entity;
away3d.entities.Mesh.prototype = $extend(away3d.entities.Entity.prototype,{
	bakeTransformations: function() {
		this.get_geometry().applyTransformation(this.get_transform());
		this.get_transform().identity();
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.MESH;
	}
	,onGeometryBoundsInvalid: function(event) {
		this.invalidateBounds();
	}
	,get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		this._castsShadows = value;
		return value;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_animator: function(value) {
		if(this._animator != null) this._animator.removeOwner(this);
		this._animator = value;
		var oldMaterial = this.get_material();
		this.set_material(null);
		this.set_material(oldMaterial);
		var len = this._subMeshes.length;
		var subMesh;
		var i = 0;
		while(i < len) {
			subMesh = this._subMeshes[i];
			oldMaterial = subMesh._material;
			if(oldMaterial != null) {
				subMesh.set_material(null);
				subMesh.set_material(oldMaterial);
			}
			++i;
		}
		if(this._animator != null) this._animator.addOwner(this);
		return value;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,set_geometry: function(value) {
		var i;
		if(this._geometry != null) {
			this._geometry.removeEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID,$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.removeEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,$bind(this,this.onSubGeometryAdded));
			this._geometry.removeEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,$bind(this,this.onSubGeometryRemoved));
			i = 0;
			while(i < this._subMeshes.length) {
				this._subMeshes[i].dispose();
				++i;
			}
			this._subMeshes = [];
		}
		this._geometry = value;
		if(this._geometry != null) {
			this._geometry.addEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID,$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.addEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,$bind(this,this.onSubGeometryAdded));
			this._geometry.addEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,$bind(this,this.onSubGeometryRemoved));
			var subGeoms = this._geometry.get_subGeometries();
			i = 0;
			while(i < subGeoms.length) {
				this.addSubMesh(subGeoms[i]);
				++i;
			}
		}
		if(this._material != null) {
			this._material.removeOwner(this);
			this._material.addOwner(this);
		}
		return value;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		if(value == this._material) return value;
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_subMeshes: function() {
		this._geometry.validate();
		return this._subMeshes;
	}
	,get_shareAnimationGeometry: function() {
		return this._shareAnimationGeometry;
	}
	,set_shareAnimationGeometry: function(value) {
		this._shareAnimationGeometry = value;
		return value;
	}
	,clearAnimationGeometry: function() {
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			this._subMeshes[i].animationSubGeometry = null;
			++i;
		}
	}
	,dispose: function() {
		away3d.entities.Entity.prototype.dispose.call(this);
		this.set_material(null);
		this.set_geometry(null);
	}
	,disposeWithAnimatorAndChildren: function() {
		this.disposeWithChildren();
		if(this._animator != null) this._animator.dispose();
	}
	,clone: function() {
		var clone = new away3d.entities.Mesh(this._geometry,this._material);
		clone.set_transform(this.get_transform());
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_partition(this.get_partition());
		clone.set_bounds(this._bounds.clone());
		clone.set_name(this.get_name());
		clone.set_castsShadows(this.get_castsShadows());
		clone.set_shareAnimationGeometry(this.get_shareAnimationGeometry());
		clone.set_mouseEnabled(this.get_mouseEnabled());
		clone.set_mouseChildren(this.get_mouseChildren());
		clone.extra = this.extra;
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			clone._subMeshes[i]._material = this._subMeshes[i]._material;
			++i;
		}
		len = this.get_numChildren();
		i = 0;
		while(i < len) {
			clone.addChild(js.Boot.__cast(this.getChildAt(i).clone() , away3d.containers.ObjectContainer3D));
			++i;
		}
		if(this._animator != null) clone.set_animator(this._animator.clone());
		return clone;
	}
	,updateBounds: function() {
		this._bounds.fromGeometry(this._geometry);
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.MeshNode(this);
	}
	,onSubGeometryAdded: function(event) {
		this.addSubMesh(event.get_subGeometry());
	}
	,onSubGeometryRemoved: function(event) {
		var subMesh;
		var subGeom = event.get_subGeometry();
		var len = this._subMeshes.length;
		var i;
		i = 0;
		while(i < len) {
			subMesh = this._subMeshes[i];
			if(subMesh.get_subGeometry() == subGeom) {
				subMesh.dispose();
				this._subMeshes.splice(i,1);
				break;
			}
			++i;
		}
		--len;
		while(i < len) {
			this._subMeshes[i]._index = i;
			++i;
		}
	}
	,addSubMesh: function(subGeometry) {
		var subMesh = new away3d.core.base.SubMesh(subGeometry,this,null);
		var len = this._subMeshes.length;
		subMesh._index = len;
		this._subMeshes[len] = subMesh;
		this.invalidateBounds();
	}
	,getSubMeshForSubGeometry: function(subGeometry) {
		return this._subMeshes[(function($this) {
			var $r;
			var _this = $this._geometry.get_subGeometries();
			$r = HxOverrides.indexOf(_this,subGeometry,0);
			return $r;
		}(this))];
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		this._pickingCollider.setLocalRay(this._pickingCollisionVO.localRayPosition,this._pickingCollisionVO.localRayDirection);
		this._pickingCollisionVO.renderable = null;
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			var subMesh = this._subMeshes[i];
			if(this._pickingCollider.testSubMeshCollision(subMesh,this._pickingCollisionVO,shortestCollisionDistance)) {
				shortestCollisionDistance = this._pickingCollisionVO.rayEntryDistance;
				this._pickingCollisionVO.renderable = subMesh;
				if(!findClosest) return true;
			}
			++i;
		}
		return this._pickingCollisionVO.renderable != null;
	}
	,__class__: away3d.entities.Mesh
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{set_shareAnimationGeometry:"set_shareAnimationGeometry",get_shareAnimationGeometry:"get_shareAnimationGeometry",get_subMeshes:"get_subMeshes",set_material:"set_material",get_material:"get_material",set_geometry:"set_geometry",get_geometry:"get_geometry",set_animator:"set_animator",get_animator:"get_animator",set_castsShadows:"set_castsShadows",get_castsShadows:"get_castsShadows"})
});
var FireParticle = function(emitter,mMaterial,decayTime,xVel,yVel,zVel,xRVel,yRVel,zRVel) {
	this.speedOffset = 0;
	var cube = new away3d.primitives.CubeGeometry(40,40,40);
	this.decayCounter = decayTime;
	this.xVelocity = xVel;
	this.yVelocity = yVel;
	this.zVelocity = zVel;
	this.xRVelocity = xRVel;
	this.yRVelocity = yRVel;
	this.zRVelocity = zRVel;
	this.source = emitter;
	away3d.entities.Mesh.call(this,cube,mMaterial);
};
$hxClasses["FireParticle"] = FireParticle;
FireParticle.__name__ = ["FireParticle"];
FireParticle.__super__ = away3d.entities.Mesh;
FireParticle.prototype = $extend(away3d.entities.Mesh.prototype,{
	update: function(gravityX,gravityY,gravityZ) {
		var _g = this;
		_g.set_x(_g.get_x() + this.xVelocity);
		var _g1 = this;
		_g1.set_y(_g1.get_y() + this.yVelocity);
		var _g2 = this;
		_g2.set_z(_g2.get_z() + this.zVelocity);
		var _g3 = this;
		_g3.set_rotationX(_g3.get_rotationX() + this.xRVelocity);
		var _g4 = this;
		_g4.set_rotationY(_g4.get_rotationY() + this.yRVelocity);
		var _g5 = this;
		_g5.set_rotationZ(_g5.get_rotationZ() + this.zRVelocity);
		this.xVelocity += gravityX;
		this.yVelocity += gravityY + this.speedOffset;
		this.zVelocity += gravityZ;
		var scale = Math.sqrt(Math.pow(this.get_x() - this.source.x,2) + Math.pow(this.get_y() - this.source.y,2) + Math.pow(this.get_z() - this.source.z,2));
		this.set_scaleX(1 - scale / 60);
		this.set_scaleY(1 - scale / 60);
		this.set_scaleZ(1 - scale / 60);
		if(scale > 60) this.source.remove(this);
	}
	,__class__: FireParticle
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw "Invalid date format : " + s;
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.foreach = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!f(x)) return false;
	}
	return true;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
var Marshmallow = function(mMaterial) {
	var geometry = new away3d.core.base.Geometry();
	var subgeometry = new away3d.core.base.SubGeometry();
	var verts = new Array();
	var uvs = new Array();
	var indices = new Array();
	var cylinderHeight = 200;
	var cylinderRadius = 100;
	var verticalResolution = 10;
	var PI = 3.1415926535897932;
	var horizontalResolution = 7;
	var _g = 0;
	while(_g < verticalResolution) {
		var i = _g++;
		var _g1 = 0;
		while(_g1 < horizontalResolution) {
			var j = _g1++;
			var angleOffset = 0;
			verts.push(Math.cos(j / horizontalResolution * 2 * PI + angleOffset) * cylinderRadius);
			verts.push(Math.sin(j / horizontalResolution * 2 * PI + angleOffset) * cylinderRadius);
			verts.push(i / verticalResolution * cylinderHeight - cylinderHeight / 2);
			uvs.push(j / horizontalResolution);
			uvs.push(i / verticalResolution);
			if(j > 0 && i > 0) {
				indices.push(i * horizontalResolution + j);
				indices.push(i * horizontalResolution + j - 1);
				indices.push(i * horizontalResolution + j - horizontalResolution);
				indices.push(i * horizontalResolution + j - 1);
				indices.push(i * horizontalResolution + j - horizontalResolution - 1);
				indices.push(i * horizontalResolution + j - horizontalResolution);
			}
		}
		if(i > 0) {
			indices.push(i * horizontalResolution);
			indices.push(i * horizontalResolution - 1 + horizontalResolution);
			indices.push(i * horizontalResolution - 1);
			indices.push(i * horizontalResolution);
			indices.push(i * horizontalResolution - 1);
			indices.push(i * horizontalResolution - horizontalResolution);
		}
	}
	var _g2 = 0;
	while(_g2 < horizontalResolution) {
		var j1 = _g2++;
		verts.push(Math.cos(j1 / horizontalResolution * 2 * PI) * cylinderRadius);
		verts.push(Math.sin(j1 / horizontalResolution * 2 * PI) * cylinderRadius);
		verts.push(cylinderHeight / 2);
		uvs.push(0);
		uvs.push(0);
		if(j1 > 0) {
			indices.push(verticalResolution * horizontalResolution + j1);
			indices.push(verticalResolution * horizontalResolution + j1 - 1);
			indices.push(verticalResolution * horizontalResolution + j1 - horizontalResolution);
			indices.push(verticalResolution * horizontalResolution + j1 - 1);
			indices.push(verticalResolution * horizontalResolution + j1 - horizontalResolution - 1);
			indices.push(verticalResolution * horizontalResolution + j1 - horizontalResolution);
			indices.push(horizontalResolution * (verticalResolution + 1) + 1);
			indices.push(verticalResolution * horizontalResolution + j1 - 1);
			indices.push(verticalResolution * horizontalResolution + j1);
		}
	}
	indices.push(verticalResolution * horizontalResolution);
	indices.push(verticalResolution * horizontalResolution - 1 + horizontalResolution);
	indices.push(verticalResolution * horizontalResolution - 1);
	indices.push(verticalResolution * horizontalResolution);
	indices.push(verticalResolution * horizontalResolution - 1);
	indices.push(verticalResolution * horizontalResolution - horizontalResolution);
	verts.push(0);
	verts.push(0);
	verts.push(-cylinderHeight / 2);
	uvs.push(0);
	uvs.push(0);
	verts.push(0);
	verts.push(0);
	verts.push(cylinderHeight / 2);
	uvs.push(1);
	uvs.push(1);
	var _g3 = 0;
	while(_g3 < horizontalResolution) {
		var j2 = _g3++;
		if(j2 > 0) {
			indices.push(horizontalResolution * (verticalResolution + 1));
			indices.push(j2);
			indices.push(j2 - 1);
		}
	}
	indices.push(horizontalResolution * (verticalResolution + 1));
	indices.push(0);
	indices.push(horizontalResolution - 1);
	indices.push(horizontalResolution * (verticalResolution + 1) + 1);
	indices.push((verticalResolution + 1) * horizontalResolution - 1);
	indices.push(verticalResolution * horizontalResolution);
	subgeometry.updateVertexData(verts);
	subgeometry.updateUVData(uvs);
	subgeometry.updateIndexData(indices);
	geometry.addSubGeometry(subgeometry);
	away3d.entities.Mesh.call(this,geometry,mMaterial);
};
$hxClasses["Marshmallow"] = Marshmallow;
Marshmallow.__name__ = ["Marshmallow"];
Marshmallow.__super__ = away3d.entities.Mesh;
Marshmallow.prototype = $extend(away3d.entities.Mesh.prototype,{
	__class__: Marshmallow
});
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 9;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 3;
	this.outline = new openfl.display.Sprite();
	this.outline.get_graphics().lineStyle(1,color,0.15,true);
	this.outline.get_graphics().drawRoundRect(0,0,width,height,padding * 2,padding * 2);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl.display.Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl.display.Sprite;
NMEPreloader.prototype = $extend(openfl.display.Sprite.prototype,{
	getBackgroundColor: function() {
		return 16777215;
	}
	,getHeight: function() {
		var height = 0;
		if(height > 0) return height; else return openfl.Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 0;
		if(width > 0) return width; else return openfl.Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded == 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		return false;
	}
	return true;
};
var _UInt = {};
_UInt.UInt_Impl_ = function() { };
$hxClasses["_UInt.UInt_Impl_"] = _UInt.UInt_Impl_;
_UInt.UInt_Impl_.__name__ = ["_UInt","UInt_Impl_"];
var aglsl = {};
aglsl.AGALTokenizer = function() {
};
$hxClasses["aglsl.AGALTokenizer"] = aglsl.AGALTokenizer;
aglsl.AGALTokenizer.__name__ = ["aglsl","AGALTokenizer"];
aglsl.AGALTokenizer.prototype = {
	decribeAGALByteArray: function(bytes) {
		var header = new aglsl.Header();
		if(bytes.readUnsignedByte() != 160) throw "Bad AGAL : Missing 0xa0 magic byte.";
		header.version = bytes.readUnsignedInt();
		if(header.version >= 16) {
			bytes.readUnsignedByte();
			header.version >>= 1;
		}
		if(bytes.readUnsignedByte() != 161) throw "Bad AGAL : Missing 0xa1 magic byte.";
		header.progid = bytes.readUnsignedByte();
		var _sw0_ = header.progid;
		switch(_sw0_) {
		case 1:
			header.type = "fragment";
			break;
		case 0:
			header.type = "vertex";
			break;
		case 2:
			header.type = "cpu";
			break;
		default:
			header.type = "";
		}
		var desc = new aglsl.Description();
		var tokens = new Array();
		var agal2glsllut = aglsl.Mapping.get_agal2glsllut();
		while(bytes.position < bytes.length) {
			var token = new aglsl.Token();
			token.opcode = bytes.readUnsignedInt();
			var lutentry = aglsl.Mapping.get_agal2glsllut()[token.opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet :  " + token.opcode;
			if(lutentry.matrixheight == 0) desc.hasmatrix = true;
			if(lutentry.dest) {
				token.dest.regnum = bytes.readUnsignedShort();
				token.dest.mask = bytes.readUnsignedByte();
				token.dest.regtype = bytes.readUnsignedByte();
				if(desc.regwrite[token.dest.regtype][token.dest.regnum] == null) desc.regwrite[token.dest.regtype][token.dest.regnum] = token.dest.mask; else desc.regwrite[token.dest.regtype][token.dest.regnum] |= token.dest.mask;
			} else {
				token.dest = null;
				bytes.readUnsignedInt();
			}
			if(lutentry.a) this.readReg(token.a,1,desc,bytes); else {
				token.a = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			if(lutentry.b) this.readReg(token.b,lutentry.matrixheight | 0,desc,bytes); else {
				token.b = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			tokens.push(token);
		}
		desc.header = header;
		desc.tokens = tokens;
		return desc;
	}
	,readReg: function(s,mh,desc,bytes) {
		s.regnum = bytes.readUnsignedShort();
		s.indexoffset = bytes.readByte();
		s.swizzle = bytes.readUnsignedByte();
		s.regtype = bytes.readUnsignedByte();
		desc.regread[s.regtype][s.regnum] = 15;
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) {
			s.lodbiad = s.indexoffset;
			s.indexoffset = 0;
			s.swizzle = 0;
			s.readmode = bytes.readUnsignedByte();
			s.dim = s.readmode >> 4;
			s.readmode &= 15;
			s.special = bytes.readUnsignedByte();
			s.wrap = s.special >> 4;
			s.special &= 15;
			s.mipmap = bytes.readUnsignedByte();
			s.filter = s.mipmap >> 4;
			s.mipmap &= 15;
			desc.samplers[s.regnum] = s;
		} else {
			s.indexregtype = bytes.readUnsignedByte();
			s.indexselect = bytes.readUnsignedByte();
			s.indirectflag = bytes.readUnsignedByte();
		}
		if(s.indirectflag == 1) desc.hasindirect = true;
		if(s.indirectflag == 0 && mh > 0) {
			var mhi = 0;
			while(mhi < mh) {
				desc.regread[s.regtype][s.regnum + mhi] = desc.regread[s.regtype][s.regnum];
				mhi++;
			}
		}
	}
	,__class__: aglsl.AGALTokenizer
};
aglsl.AGLSLCompiler = function() {
};
$hxClasses["aglsl.AGLSLCompiler"] = aglsl.AGLSLCompiler;
aglsl.AGLSLCompiler.__name__ = ["aglsl","AGLSLCompiler"];
aglsl.AGLSLCompiler.prototype = {
	compile: function(programType,source) {
		var agalMiniAssembler = new aglsl.assembler.AGALMiniAssembler();
		var tokenizer = new aglsl.AGALTokenizer();
		var data;
		var concatSource;
		switch(programType) {
		case "vertex":
			concatSource = "part vertex 1 \n" + source + "endpart";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("vertex").data;
			break;
		case "fragment":
			concatSource = "part fragment 1 \n" + source + "endpart";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("fragment").data;
			break;
		default:
			throw "Unknown Context3DProgramType";
		}
		var description = tokenizer.decribeAGALByteArray(data);
		var parser = new aglsl.AGLSLParser();
		this.glsl = parser.parse(description);
		return this.glsl;
	}
	,__class__: aglsl.AGLSLCompiler
};
aglsl.AGLSLParser = function() {
};
$hxClasses["aglsl.AGLSLParser"] = aglsl.AGLSLParser;
aglsl.AGLSLParser.__name__ = ["aglsl","AGLSLParser"];
aglsl.AGLSLParser.prototype = {
	parse: function(desc) {
		var header = "";
		var body = "";
		var i = 0;
		header += "precision highp float;\n";
		var tag = desc.header.type.charAt(0);
		if(desc.header.type == "vertex") header += "uniform float yflip;\n";
		if(!desc.hasindirect) {
			i = 0;
			while(i < desc.regread[1].length) {
				if(desc.regread[1][i] > 0) header += "uniform vec4 " + tag + "c" + i + ";\n";
				i++;
			}
		} else header += "uniform vec4 " + tag + "carrr[" + aglsl.Context3D.maxvertexconstants + "];\n";
		i = 0;
		while(i < desc.regread[2].length || i < desc.regwrite[2].length) {
			if(desc.regread[2][i] > 0 || desc.regwrite[2][i] > 0) header += "vec4 " + tag + "t" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[0].length) {
			if(desc.regread[0][i] > 0) header += "attribute vec4 va" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[4].length || i < desc.regwrite[4].length) {
			if(desc.regread[4][i] > 0 || desc.regwrite[4][i] > 0) header += "varying vec4 vi" + i + ";\n";
			i++;
		}
		var samptype = ["2D","Cube","3D",""];
		i = 0;
		while(i < desc.samplers.length) {
			if(desc.samplers[i] != null) header += "uniform sampler" + samptype[desc.samplers[i].dim & 3] + " fs" + i + ";\n";
			i++;
		}
		if(desc.header.type == "vertex") header += "vec4 outpos;\n";
		if(desc.writedepth) header += "vec4 tmp_FragDepth;\n";
		body += "void main() {\n";
		i = 0;
		while(i < desc.tokens.length) {
			var lutentry = aglsl.Mapping.get_agal2glsllut()[desc.tokens[i].opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet: ";
			var sublines = Std["int"](Math.max(lutentry.matrixheight,1));
			var _g = 0;
			while(_g < sublines) {
				var sl = _g++;
				var line = "  " + lutentry.s;
				var destregstring;
				var destcaststring;
				var destmaskstring;
				if(desc.tokens[i].dest != null) {
					if(lutentry.matrixheight > 0) {
						if((desc.tokens[i].dest.mask >> sl & 1) != 1) continue;
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						destcaststring = "float";
						destmaskstring = ["x","y","z","w"][sl];
						destregstring += "." + destmaskstring;
					} else {
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						if(desc.tokens[i].dest.mask != 15) {
							var ndest = 0;
							destmaskstring = "";
							if((desc.tokens[i].dest.mask & 1) != 0) {
								ndest++;
								destmaskstring += "x";
							}
							if((desc.tokens[i].dest.mask & 2) != 0) {
								ndest++;
								destmaskstring += "y";
							}
							if((desc.tokens[i].dest.mask & 4) != 0) {
								ndest++;
								destmaskstring += "z";
							}
							if((desc.tokens[i].dest.mask & 8) != 0) {
								ndest++;
								destmaskstring += "w";
							}
							destregstring += "." + destmaskstring;
							switch(ndest) {
							case 1:
								destcaststring = "float";
								break;
							case 2:
								destcaststring = "vec2";
								break;
							case 3:
								destcaststring = "vec3";
								break;
							default:
								throw "Unexpected destination mask" + desc.tokens[i].dest.mask;
							}
						} else {
							destcaststring = "vec4";
							destmaskstring = "xyzw";
						}
					}
					line = StringTools.replace(line,"%dest",destregstring);
					line = StringTools.replace(line,"%cast",destcaststring);
					line = StringTools.replace(line,"%dm",destmaskstring);
				}
				var dwm = 15;
				if(!lutentry.ndwm && lutentry.dest && desc.tokens[i].dest != null) dwm = desc.tokens[i].dest.mask;
				if(desc.tokens[i].a != null) line = StringTools.replace(line,"%a",this.sourcetostring(desc.tokens[i].a,0,dwm,lutentry.scalar,desc,tag));
				if(desc.tokens[i].b != null) {
					line = StringTools.replace(line,"%b",this.sourcetostring(desc.tokens[i].b,sl,dwm,lutentry.scalar,desc,tag));
					if(desc.tokens[i].b.regtype == 5) {
						var texdim = ["2D","Cube","3D"][desc.tokens[i].b.dim];
						var texsize = ["vec2","vec3","vec3"][desc.tokens[i].b.dim];
						line = StringTools.replace(line,"%texdim",texdim);
						line = StringTools.replace(line,"%texsize",texsize);
						var texlod = "";
						line = StringTools.replace(line,"%lod",texlod);
					}
				}
				body += line;
			}
			i++;
		}
		if(desc.header.type == "vertex") body += "  gl_Position = vec4(outpos.x, yflip*outpos.y, outpos.z*2.0 - outpos.w, outpos.w);\n";
		if(desc.writedepth) body += "  gl_FragDepth = clamp(tmp_FragDepth,0.0,1.0);\n";
		body += "}\n";
		return header + body;
	}
	,regtostring: function(regtype,regnum,desc,tag) {
		switch(regtype) {
		case 0:case 1:case 2:case 3:case 4:case 5:case 6:
			switch(regtype) {
			case 0:
				return "va" + regnum;
			}
			switch(regtype) {
			case 1:
				if(desc.hasindirect && desc.header.type == "vertex") return "vcarrr[" + regnum + "]"; else return tag + "c" + regnum;
				break;
			}
			switch(regtype) {
			case 2:
				return tag + "t" + regnum;
			}
			switch(regtype) {
			case 3:
				if(desc.header.type == "vertex") return "outpos"; else return "gl_FragColor";
				break;
			}
			switch(regtype) {
			case 4:
				return "vi" + regnum;
			}
			switch(regtype) {
			case 5:
				return "fs" + regnum;
			}
			return "tmp_FragDepth";
			throw "Unknown register type";
			break;
		default:
			throw "Unknown register type";
		}
	}
	,sourcetostring: function(s,subline,dwm,isscalar,desc,tag) {
		var swiz = ["x","y","z","w"];
		var r;
		if(s.indirectflag == 1) {
			r = "vcarrr[int(" + this.regtostring(s.indexregtype,s.regnum,desc,tag) + "." + swiz[s.indexselect] + ")";
			var realofs = subline + s.indexoffset;
			if(realofs < 0) if(realofs == null) r += "null"; else r += "" + realofs;
			if(realofs > 0) r += "+" + (realofs == null?"null":"" + realofs);
			r += "]";
		} else r = this.regtostring(s.regtype,s.regnum + subline,desc,tag);
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) return r;
		if(isscalar) return r + "." + swiz[s.swizzle & 3];
		if(s.swizzle == 228 && dwm == 15) return r;
		r += ".";
		if((dwm & 1) != 0) r += swiz[s.swizzle & 3];
		if((dwm & 2) != 0) r += swiz[s.swizzle >> 2 & 3];
		if((dwm & 4) != 0) r += swiz[s.swizzle >> 4 & 3];
		if((dwm & 8) != 0) r += swiz[s.swizzle >> 6 & 3];
		return r;
	}
	,__class__: aglsl.AGLSLParser
};
aglsl.Sampler = function() {
	this.lodbias = 0;
	this.dim = 0;
	this.readmode = 0;
	this.special = 0;
	this.wrap = 0;
	this.mipmap = 0;
	this.filter = 0;
};
$hxClasses["aglsl.Sampler"] = aglsl.Sampler;
aglsl.Sampler.__name__ = ["aglsl","Sampler"];
aglsl.Sampler.prototype = {
	__class__: aglsl.Sampler
};
aglsl.Context3D = function() {
};
$hxClasses["aglsl.Context3D"] = aglsl.Context3D;
aglsl.Context3D.__name__ = ["aglsl","Context3D"];
aglsl.Context3D.prototype = {
	__class__: aglsl.Context3D
};
aglsl.Description = function() {
	this.regread = [[],[],[],[],[],[],[]];
	this.regwrite = [[],[],[],[],[],[],[]];
	this.hasindirect = false;
	this.writedepth = false;
	this.hasmatrix = false;
	this.samplers = [];
	this.tokens = [];
	this.header = new aglsl.Header();
};
$hxClasses["aglsl.Description"] = aglsl.Description;
aglsl.Description.__name__ = ["aglsl","Description"];
aglsl.Description.prototype = {
	__class__: aglsl.Description
};
aglsl.Destination = function() {
	this.mask = 0;
	this.regnum = 0;
	this.regtype = 0;
	this.dim = 0;
};
$hxClasses["aglsl.Destination"] = aglsl.Destination;
aglsl.Destination.__name__ = ["aglsl","Destination"];
aglsl.Destination.prototype = {
	__class__: aglsl.Destination
};
aglsl.Header = function() {
	this.progid = 0;
	this.version = 0;
	this.type = "";
};
$hxClasses["aglsl.Header"] = aglsl.Header;
aglsl.Header.__name__ = ["aglsl","Header"];
aglsl.Header.prototype = {
	__class__: aglsl.Header
};
aglsl.Mapping = function() { };
$hxClasses["aglsl.Mapping"] = aglsl.Mapping;
aglsl.Mapping.__name__ = ["aglsl","Mapping"];
aglsl.Mapping.__properties__ = {get_agal2glsllut:"get_agal2glsllut"}
aglsl.Mapping._agal2glsllut = null;
aglsl.Mapping.get_agal2glsllut = function() {
	if(aglsl.Mapping._agal2glsllut == null) aglsl.Mapping._agal2glsllut = [new aglsl.OpLUT("%dest = %cast(%a);\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(%a + %b);\n",0,true,true,true,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(%a - %b);\n",0,true,true,true,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(%a * %b);\n",0,true,true,true,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(%a / %b);\n",0,true,true,true,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(1.0) / %a;\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(min(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(max(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(fract(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(sqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(inversesqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(pow(abs(%a),%b));\n",0,true,true,true,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(log2(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(exp2(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(normalize(vec3( %a ) ));\n",0,true,true,false,null,null,true,null,null,null),new aglsl.OpLUT("%dest = %cast(sin(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(cos(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(cross(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",0,true,true,true,null,null,true,null,null,null),new aglsl.OpLUT("%dest = %cast(abs(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(%a * -1.0);\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(clamp(%a,0.0,1.0));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",null,true,true,true,3,3,true,null,null,null),new aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,4,true,null,null,null),new aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,3,true,null,null,null),new aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("if (float(%a)==float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new aglsl.OpLUT("if (float(%a)!=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new aglsl.OpLUT("if (float(%a)>=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new aglsl.OpLUT("if (float(%a)<float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new aglsl.OpLUT("} else {;\n",0,false,false,false,null,null,null,null,null,null),new aglsl.OpLUT("};\n",0,false,false,false,null,null,null,null,null,null),new aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(texture%texdimLod(%b,%texsize(%a)).%dm);\n",null,true,true,true,null,null,null,null,true,null),new aglsl.OpLUT("if ( float(%a)<0.0 ) discard;\n",null,false,true,false,null,null,null,true,null,null),new aglsl.OpLUT("%dest = %cast(texture%texdim(%b,%texsize(%a)%lod).%dm);\n",null,true,true,true,null,null,true,null,true,true),new aglsl.OpLUT("%dest = %cast(greaterThanEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new aglsl.OpLUT("%dest = %cast(lessThan(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new aglsl.OpLUT("%dest = %cast(sign(%a));\n",0,true,true,false,null,null,null,null,null,null),new aglsl.OpLUT("%dest = %cast(equal(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new aglsl.OpLUT("%dest = %cast(notEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null)];
	return aglsl.Mapping._agal2glsllut;
};
aglsl.OpLUT = function(s,flags,dest,a,b,matrixwidth,matrixheight,ndwm,scaler,dm,lod) {
	if(lod == null) lod = false;
	if(dm == null) dm = false;
	if(scaler == null) scaler = false;
	if(ndwm == null) ndwm = false;
	if(matrixheight == null) matrixheight = 0;
	if(matrixwidth == null) matrixwidth = 0;
	if(b == null) b = false;
	if(a == null) a = false;
	if(dest == null) dest = false;
	if(flags == null) flags = 0;
	this.s = s;
	this.flags = flags;
	this.dest = dest;
	this.a = a;
	this.b = b;
	this.matrixwidth = matrixwidth;
	this.matrixheight = matrixheight;
	this.ndwm = ndwm;
	this.scalar = scaler;
	this.dm = dm;
	this.lod = lod;
};
$hxClasses["aglsl.OpLUT"] = aglsl.OpLUT;
aglsl.OpLUT.__name__ = ["aglsl","OpLUT"];
aglsl.OpLUT.prototype = {
	__class__: aglsl.OpLUT
};
aglsl.Token = function() {
	this.dest = new aglsl.Destination();
	this.opcode = 0;
	this.a = new aglsl.Destination();
	this.b = new aglsl.Destination();
};
$hxClasses["aglsl.Token"] = aglsl.Token;
aglsl.Token.__name__ = ["aglsl","Token"];
aglsl.Token.prototype = {
	__class__: aglsl.Token
};
aglsl.assembler = {};
aglsl.assembler.AGALMiniAssembler = function() {
	this.r = new haxe.ds.StringMap();
	this.cur = new aglsl.assembler.Part();
};
$hxClasses["aglsl.assembler.AGALMiniAssembler"] = aglsl.assembler.AGALMiniAssembler;
aglsl.assembler.AGALMiniAssembler.__name__ = ["aglsl","assembler","AGALMiniAssembler"];
aglsl.assembler.AGALMiniAssembler.prototype = {
	assemble: function(source,ext_part,ext_version) {
		if(ext_version == 0) ext_version = 1;
		if(ext_part != null) this.addHeader(ext_part,ext_version);
		var reg = new EReg("[\n\r]+","g");
		var lines = reg.split(source);
		var i;
		var _g1 = 0;
		var _g = lines.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.processLine(lines[i1],i1);
		}
		return this.r;
	}
	,processLine: function(line,linenr) {
		var startcomment = line.indexOf("//");
		if(startcomment != -1) line = line.substring(0,startcomment);
		var r = new EReg("^\\s+|\\s+$","g");
		line = r.replace(line,"");
		if(!(line.length > 0)) return;
		r = new EReg("<.*>","g");
		var optsb = r.match(line);
		var opts = null;
		if(optsb) {
			var optsi = r.matchedPos().pos;
			opts = this.getMatches(new EReg("([\\w\\.\\-\\+]+)","gi"),line.substring(optsi));
			line = line.substring(0,optsi);
		}
		var tokens = this.getMatches(new EReg("([\\w\\.\\+\\[\\]]+)","gi"),line);
		if(tokens.length == 0) {
			if(line.length >= 3) haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
				var $r;
				var $int = linenr;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + ": " + line,{ fileName : "AGALMiniAssembler.hx", lineNumber : 75, className : "aglsl.assembler.AGALMiniAssembler", methodName : "processLine"});
			return;
		}
		var _g = tokens[0];
		switch(_g) {
		case "part":
			this.addHeader(tokens[1],Std.parseInt(tokens[2]));
			break;
		case "endpart":
			if(this.cur == null) throw "Unexpected endpart";
			this.cur.data.position = 0;
			this.cur = null;
			return;
		default:
			if(this.cur == null) {
				haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
					var $r;
					var int1 = linenr;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this))) + ": " + line + " (Outside of any part definition)",{ fileName : "AGALMiniAssembler.hx", lineNumber : 96, className : "aglsl.assembler.AGALMiniAssembler", methodName : "processLine"});
				return;
			}
			if(this.cur.name == "comment") return;
			var op = aglsl.assembler.OpcodeMap.get_map().get(tokens[0]);
			if(op == null) throw "Bad opcode " + tokens[0] + " " + Std.string((function($this) {
				var $r;
				var int2 = linenr;
				$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
				return $r;
			}(this))) + ": " + line;
			this.emitOpcode(this.cur,op.opcode);
			var ti = 1;
			if(op.dest != null && op.dest != "none") {
				if(!this.emitDest(this.cur,tokens[ti++],op.dest)) throw "Bad destination register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int3 = linenr;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroDword(this.cur);
			if(op.a != null && op.a.format != "none") {
				if(!this.emitSource(this.cur,tokens[ti++],op.a)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int4 = linenr;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
			if(op.b != null && op.b.format != "none") {
				if(op.b.format == "sampler") {
					if(!this.emitSampler(this.cur,tokens[ti++],op.b,opts)) throw "Bad sampler register " + tokens[ti - 1] + " " + Std.string((function($this) {
						var $r;
						var int5 = linenr;
						$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
						return $r;
					}(this))) + ": " + line;
				} else if(!this.emitSource(this.cur,tokens[ti++],op.b)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int6 = linenr;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
		}
	}
	,getMatches: function(ereg,text) {
		var matches = [];
		while(ereg.match(text)) {
			var t = ereg.matched(1);
			matches.push(t);
			text = ereg.matchedRight();
		}
		return matches;
	}
	,getGroupMatches: function(ereg,text,groupCount) {
		if(groupCount == null) groupCount = 0;
		var matches = [];
		if(!ereg.match(text)) return matches;
		var m = 0;
		var t;
		var completed = false;
		while(!completed && (t = ereg.matched(m++)) != null) {
			matches.push(t);
			if((function($this) {
				var $r;
				var $int = groupCount;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) != 0 && (function($this) {
				var $r;
				var aNeg = m < 0;
				var bNeg = groupCount < 0;
				$r = aNeg != bNeg?aNeg:m > groupCount;
				return $r;
			}(this))) completed = true;
		}
		return matches;
	}
	,emitHeader: function(pr) {
		pr.data.writeByte(160);
		pr.data.writeUnsignedInt(pr.version);
		if(pr.version >= 16) pr.data.writeByte(0);
		pr.data.writeByte(161);
		var _g = pr.name;
		switch(_g) {
		case "fragment":
			pr.data.writeByte(1);
			break;
		case "vertex":
			pr.data.writeByte(0);
			break;
		case "cpu":
			pr.data.writeByte(2);
			break;
		default:
			pr.data.writeByte(255);
		}
	}
	,emitOpcode: function(pr,opcode) {
		pr.data.writeUnsignedInt(opcode);
	}
	,emitZeroDword: function(pr) {
		pr.data.writeUnsignedInt(0);
	}
	,emitZeroQword: function(pr) {
		pr.data.writeUnsignedInt(0);
		pr.data.writeUnsignedInt(0);
	}
	,emitDest: function(pr,token,opdest) {
		var reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
		if(aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
		if(Std.parseInt(reg[2]) == null) reg[2] = "0";
		var em_num;
		if(reg[2] != null) em_num = reg[2]; else em_num = "0";
		var em_code = aglsl.assembler.RegMap.get_map().get(reg[1]).code;
		var em_mask = this.stringToMask(reg[3]);
		pr.data.writeShort(Std.parseInt(em_num));
		pr.data.writeByte(em_mask);
		pr.data.writeByte(em_code);
		return true;
	}
	,stringToMask: function(s) {
		if(s == null) return 15;
		var r = 0;
		if(s.indexOf("x") != -1) r |= 1;
		if(s.indexOf("y") != -1) r |= 2;
		if(s.indexOf("z") != -1) r |= 4;
		if(s.indexOf("w") != -1) r |= 8;
		return r;
	}
	,stringToSwizzle: function(s) {
		if(s == "") return 228;
		var chartoindex = { x : 0, y : 1, z : 2, w : 3};
		var sw = 0;
		if(s.charAt(0) != ".") throw "Missing . for swizzle";
		if(s.length > 1) sw |= Reflect.field(chartoindex,s.charAt(1));
		if(s.length > 2) sw |= Reflect.field(chartoindex,s.charAt(2)) << 2; else sw |= (sw & 3) << 2;
		if(s.length > 3) sw |= Reflect.field(chartoindex,s.charAt(3)) << 4; else sw |= (sw & 12) << 2;
		if(s.length > 4) sw |= Reflect.field(chartoindex,s.charAt(4)) << 6; else sw |= (sw & 48) << 2;
		return sw;
	}
	,emitSampler: function(pr,token,opsrc,opts) {
		var reg = this.getGroupMatches(new EReg("fs(\\d*)","i"),token,1);
		if(reg.length < 1) return false;
		pr.data.writeShort(Std.parseInt(reg[1]));
		pr.data.writeByte(0);
		pr.data.writeByte(0);
		var samplerbits = 5;
		var sampleroptset = 0;
		var _g1 = 0;
		var _g = opts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var o = aglsl.assembler.SamplerMap.get_map().get(opts[i].toLowerCase());
			if(o != null) {
				if((function($this) {
					var $r;
					var $int = sampleroptset >> o.shift & o.mask;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) != 0) haxe.Log.trace("Warning, duplicate sampler option",{ fileName : "AGALMiniAssembler.hx", lineNumber : 315, className : "aglsl.assembler.AGALMiniAssembler", methodName : "emitSampler"});
				sampleroptset = sampleroptset | o.mask << o.shift;
				samplerbits = samplerbits & ~(o.mask << o.shift);
				samplerbits = samplerbits | o.value << o.shift;
			} else {
			}
		}
		pr.data.writeUnsignedInt(samplerbits);
		return true;
	}
	,emitSource: function(pr,token,opsrc) {
		var indexed = this.getGroupMatches(new EReg("vc\\[(v[tcai])(\\d+)\\.([xyzw])([\\+\\-]\\d+)?\\](\\.[xyzw]{1,4})?","i"),token,5);
		var reg;
		if(indexed.length > 0) {
			if(aglsl.assembler.RegMap.get_map().get(indexed[1]) == null) return false;
			var selindex = { x : 0, y : 1, z : 2, w : 3};
			var em = { num : Std.parseInt(indexed[2]) | 0, code : aglsl.assembler.RegMap.get_map().get(indexed[1]).code, swizzle : this.stringToSwizzle(indexed[5]), select : Reflect.getProperty(selindex,indexed[3]), offset : Std.parseInt(indexed[4]) | 0};
			pr.data.writeShort(em.num);
			pr.data.writeByte(em.offset);
			pr.data.writeByte(em.swizzle);
			pr.data.writeByte(1);
			pr.data.writeByte(em.code);
			pr.data.writeByte(em.select);
			pr.data.writeByte(128);
		} else {
			reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
			if(aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
			if(reg.length < 4) reg.push("");
			var em1 = { num : Std.parseInt(reg[2]) | 0, code : aglsl.assembler.RegMap.get_map().get(reg[1]).code, swizzle : this.stringToSwizzle(reg[3])};
			pr.data.writeShort(em1.num);
			pr.data.writeByte(0);
			pr.data.writeByte(em1.swizzle);
			pr.data.writeByte(em1.code);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
		}
		return true;
	}
	,addHeader: function(partname,version) {
		if(version == 0) version = 1;
		if(!this.r.exists(partname)) {
			this.r.set(partname,new aglsl.assembler.Part(partname,version));
			this.emitHeader(this.r.get(partname));
		} else if(this.r.get(partname).version != (version | 0)) throw "Multiple versions for part " + partname;
		this.cur = this.r.get(partname);
	}
	,__class__: aglsl.assembler.AGALMiniAssembler
};
aglsl.assembler.FS = function() {
};
$hxClasses["aglsl.assembler.FS"] = aglsl.assembler.FS;
aglsl.assembler.FS.__name__ = ["aglsl","assembler","FS"];
aglsl.assembler.FS.prototype = {
	__class__: aglsl.assembler.FS
};
aglsl.assembler.Flags = function() {
};
$hxClasses["aglsl.assembler.Flags"] = aglsl.assembler.Flags;
aglsl.assembler.Flags.__name__ = ["aglsl","assembler","Flags"];
aglsl.assembler.Flags.prototype = {
	__class__: aglsl.assembler.Flags
};
aglsl.assembler.Opcode = function(dest,aformat,asize,bformat,bsize,opcode,simple,horizontal,fragonly,matrix) {
	if(matrix == null) matrix = false;
	if(fragonly == null) fragonly = false;
	if(horizontal == null) horizontal = false;
	this.a = new aglsl.assembler.FS();
	this.b = new aglsl.assembler.FS();
	this.flags = new aglsl.assembler.Flags();
	this.dest = dest;
	this.a.format = aformat;
	this.a.size = asize;
	this.b.format = bformat;
	this.b.size = bsize;
	this.opcode = opcode;
	this.flags.simple = simple;
	this.flags.horizontal = horizontal;
	this.flags.fragonly = fragonly;
	this.flags.matrix = matrix;
};
$hxClasses["aglsl.assembler.Opcode"] = aglsl.assembler.Opcode;
aglsl.assembler.Opcode.__name__ = ["aglsl","assembler","Opcode"];
aglsl.assembler.Opcode.prototype = {
	__class__: aglsl.assembler.Opcode
};
aglsl.assembler.OpcodeMap = function() {
};
$hxClasses["aglsl.assembler.OpcodeMap"] = aglsl.assembler.OpcodeMap;
aglsl.assembler.OpcodeMap.__name__ = ["aglsl","assembler","OpcodeMap"];
aglsl.assembler.OpcodeMap.__properties__ = {get_map:"get_map"}
aglsl.assembler.OpcodeMap._map = null;
aglsl.assembler.OpcodeMap.get_map = function() {
	if(aglsl.assembler.OpcodeMap._map == null) {
		aglsl.assembler.OpcodeMap._map = new haxe.ds.StringMap();
		aglsl.assembler.OpcodeMap._map.set("mov",new aglsl.assembler.Opcode("vector","vector",4,"none",0,0,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("add",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,1,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("sub",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,2,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("mul",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,3,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("div",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,4,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("rcp",new aglsl.assembler.Opcode("vector","vector",4,"none",0,5,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("min",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,6,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("max",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,7,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("frc",new aglsl.assembler.Opcode("vector","vector",4,"none",0,8,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("sqt",new aglsl.assembler.Opcode("vector","vector",4,"none",0,9,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("rsq",new aglsl.assembler.Opcode("vector","vector",4,"none",0,10,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("pow",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,11,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("log",new aglsl.assembler.Opcode("vector","vector",4,"none",0,12,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("exp",new aglsl.assembler.Opcode("vector","vector",4,"none",0,13,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("nrm",new aglsl.assembler.Opcode("vector","vector",4,"none",0,14,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("sin",new aglsl.assembler.Opcode("vector","vector",4,"none",0,15,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("cos",new aglsl.assembler.Opcode("vector","vector",4,"none",0,16,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("crs",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,17,true,true,null,null));
		aglsl.assembler.OpcodeMap._map.set("dp3",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,18,true,true,null,null));
		aglsl.assembler.OpcodeMap._map.set("dp4",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,19,true,true,null,null));
		aglsl.assembler.OpcodeMap._map.set("abs",new aglsl.assembler.Opcode("vector","vector",4,"none",0,20,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("neg",new aglsl.assembler.Opcode("vector","vector",4,"none",0,21,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("sat",new aglsl.assembler.Opcode("vector","vector",4,"none",0,22,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("ted",new aglsl.assembler.Opcode("vector","vector",4,"sampler",1,38,true,null,true,null));
		aglsl.assembler.OpcodeMap._map.set("kil",new aglsl.assembler.Opcode("none","scalar",1,"none",0,39,true,null,true,null));
		aglsl.assembler.OpcodeMap._map.set("tex",new aglsl.assembler.Opcode("vector","vector",4,"sampler",1,40,true,null,true,null));
		aglsl.assembler.OpcodeMap._map.set("m33",new aglsl.assembler.Opcode("vector","matrix",3,"vector",3,23,true,null,null,true));
		aglsl.assembler.OpcodeMap._map.set("m44",new aglsl.assembler.Opcode("vector","matrix",4,"vector",4,24,true,null,null,true));
		aglsl.assembler.OpcodeMap._map.set("m43",new aglsl.assembler.Opcode("vector","matrix",3,"vector",4,25,true,null,null,true));
		aglsl.assembler.OpcodeMap._map.set("sge",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,41,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("slt",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,42,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("sgn",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,43,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("seq",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,44,true,null,null,null));
		aglsl.assembler.OpcodeMap._map.set("sne",new aglsl.assembler.Opcode("vector","vector",4,"vector",4,45,true,null,null,null));
	}
	return aglsl.assembler.OpcodeMap._map;
};
aglsl.assembler.OpcodeMap.prototype = {
	__class__: aglsl.assembler.OpcodeMap
};
aglsl.assembler.Part = function(name,version) {
	if(version == null) version = 0;
	if(name == null) name = "";
	this.name = name;
	this.version = version;
	this.data = new openfl.utils.ByteArray();
	this.data.littleEndian = true;
	"littleEndian";
};
$hxClasses["aglsl.assembler.Part"] = aglsl.assembler.Part;
aglsl.assembler.Part.__name__ = ["aglsl","assembler","Part"];
aglsl.assembler.Part.prototype = {
	__class__: aglsl.assembler.Part
};
aglsl.assembler.Reg = function(code,desc) {
	this.code = code;
	this.desc = desc;
};
$hxClasses["aglsl.assembler.Reg"] = aglsl.assembler.Reg;
aglsl.assembler.Reg.__name__ = ["aglsl","assembler","Reg"];
aglsl.assembler.Reg.prototype = {
	__class__: aglsl.assembler.Reg
};
aglsl.assembler.RegMap = function() {
};
$hxClasses["aglsl.assembler.RegMap"] = aglsl.assembler.RegMap;
aglsl.assembler.RegMap.__name__ = ["aglsl","assembler","RegMap"];
aglsl.assembler.RegMap.__properties__ = {get_map:"get_map"}
aglsl.assembler.RegMap._map = null;
aglsl.assembler.RegMap.get_map = function() {
	if(aglsl.assembler.RegMap._map == null) {
		aglsl.assembler.RegMap._map = new haxe.ds.StringMap();
		aglsl.assembler.RegMap._map.set("va",new aglsl.assembler.Reg(0,"vertex attribute"));
		aglsl.assembler.RegMap._map.set("fc",new aglsl.assembler.Reg(1,"fragment constant"));
		aglsl.assembler.RegMap._map.set("vc",new aglsl.assembler.Reg(1,"vertex constant"));
		aglsl.assembler.RegMap._map.set("ft",new aglsl.assembler.Reg(2,"fragment temporary"));
		aglsl.assembler.RegMap._map.set("vt",new aglsl.assembler.Reg(2,"vertex temporary"));
		aglsl.assembler.RegMap._map.set("vo",new aglsl.assembler.Reg(3,"vertex output"));
		aglsl.assembler.RegMap._map.set("op",new aglsl.assembler.Reg(3,"vertex output"));
		aglsl.assembler.RegMap._map.set("fd",new aglsl.assembler.Reg(3,"fragment depth output"));
		aglsl.assembler.RegMap._map.set("fo",new aglsl.assembler.Reg(3,"fragment output"));
		aglsl.assembler.RegMap._map.set("oc",new aglsl.assembler.Reg(3,"fragment output"));
		aglsl.assembler.RegMap._map.set("v",new aglsl.assembler.Reg(4,"varying"));
		aglsl.assembler.RegMap._map.set("vi",new aglsl.assembler.Reg(4,"varying output"));
		aglsl.assembler.RegMap._map.set("fi",new aglsl.assembler.Reg(4,"varying input"));
		aglsl.assembler.RegMap._map.set("fs",new aglsl.assembler.Reg(5,"sampler"));
	}
	return aglsl.assembler.RegMap._map;
};
aglsl.assembler.RegMap.prototype = {
	__class__: aglsl.assembler.RegMap
};
aglsl.assembler.Sampler = function(shift,mask,value) {
	this.shift = shift;
	this.mask = mask;
	this.value = value;
};
$hxClasses["aglsl.assembler.Sampler"] = aglsl.assembler.Sampler;
aglsl.assembler.Sampler.__name__ = ["aglsl","assembler","Sampler"];
aglsl.assembler.Sampler.prototype = {
	__class__: aglsl.assembler.Sampler
};
aglsl.assembler.SamplerMap = function() {
};
$hxClasses["aglsl.assembler.SamplerMap"] = aglsl.assembler.SamplerMap;
aglsl.assembler.SamplerMap.__name__ = ["aglsl","assembler","SamplerMap"];
aglsl.assembler.SamplerMap.__properties__ = {get_map:"get_map"}
aglsl.assembler.SamplerMap._map = null;
aglsl.assembler.SamplerMap.get_map = function() {
	if(aglsl.assembler.SamplerMap._map == null) {
		aglsl.assembler.SamplerMap._map = new haxe.ds.StringMap();
		aglsl.assembler.SamplerMap._map.set("rgba",new aglsl.assembler.Sampler(8,15,0));
		aglsl.assembler.SamplerMap._map.set("rg",new aglsl.assembler.Sampler(8,15,5));
		aglsl.assembler.SamplerMap._map.set("r",new aglsl.assembler.Sampler(8,15,4));
		aglsl.assembler.SamplerMap._map.set("compressed",new aglsl.assembler.Sampler(8,15,1));
		aglsl.assembler.SamplerMap._map.set("compressed_alpha",new aglsl.assembler.Sampler(8,15,2));
		aglsl.assembler.SamplerMap._map.set("dxt1",new aglsl.assembler.Sampler(8,15,1));
		aglsl.assembler.SamplerMap._map.set("dxt5",new aglsl.assembler.Sampler(8,15,2));
		aglsl.assembler.SamplerMap._map.set("2d",new aglsl.assembler.Sampler(12,15,0));
		aglsl.assembler.SamplerMap._map.set("cube",new aglsl.assembler.Sampler(12,15,1));
		aglsl.assembler.SamplerMap._map.set("3d",new aglsl.assembler.Sampler(12,15,2));
		aglsl.assembler.SamplerMap._map.set("centroid",new aglsl.assembler.Sampler(16,1,1));
		aglsl.assembler.SamplerMap._map.set("ignoresampler",new aglsl.assembler.Sampler(16,4,4));
		aglsl.assembler.SamplerMap._map.set("clamp",new aglsl.assembler.Sampler(20,15,0));
		aglsl.assembler.SamplerMap._map.set("repeat",new aglsl.assembler.Sampler(20,15,1));
		aglsl.assembler.SamplerMap._map.set("wrap",new aglsl.assembler.Sampler(20,15,1));
		aglsl.assembler.SamplerMap._map.set("nomip",new aglsl.assembler.Sampler(24,15,0));
		aglsl.assembler.SamplerMap._map.set("mipnone",new aglsl.assembler.Sampler(24,15,0));
		aglsl.assembler.SamplerMap._map.set("mipnearest",new aglsl.assembler.Sampler(24,15,1));
		aglsl.assembler.SamplerMap._map.set("miplinear",new aglsl.assembler.Sampler(24,15,2));
		aglsl.assembler.SamplerMap._map.set("nearest",new aglsl.assembler.Sampler(28,15,0));
		aglsl.assembler.SamplerMap._map.set("linear",new aglsl.assembler.Sampler(28,15,1));
	}
	return aglsl.assembler.SamplerMap._map;
};
aglsl.assembler.SamplerMap.prototype = {
	__class__: aglsl.assembler.SamplerMap
};
away3d.Away3D = function() { };
$hxClasses["away3d.Away3D"] = away3d.Away3D;
away3d.Away3D.__name__ = ["away3d","Away3D"];
away3d.animators = {};
away3d.animators.AnimationSetBase = function() {
	this._animations = new Array();
	this._animationNames = new Array();
	this._animationDictionary = new haxe.ds.StringMap();
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.AnimationSetBase"] = away3d.animators.AnimationSetBase;
away3d.animators.AnimationSetBase.__name__ = ["away3d","animators","AnimationSetBase"];
away3d.animators.AnimationSetBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.animators.AnimationSetBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.animators.AnimationSetBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	findTempReg: function(exclude,excludeAnother) {
		var i = 0;
		var reg;
		while(true) {
			reg = "vt" + i;
			if(HxOverrides.indexOf(exclude,reg,0) == -1 && excludeAnother != reg) return reg;
			++i;
		}
		return null;
	}
	,get_usesCPU: function() {
		return this._usesCPU;
	}
	,resetGPUCompatibility: function() {
		this._usesCPU = false;
	}
	,cancelGPUCompatibility: function() {
		this._usesCPU = true;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ANIMATION_SET;
	}
	,get_animations: function() {
		return this._animations;
	}
	,get_animationNames: function() {
		return this._animationNames;
	}
	,hasAnimation: function(name) {
		return this._animationDictionary.exists(name);
	}
	,getAnimation: function(name) {
		return this._animationDictionary.get(name);
	}
	,addAnimation: function(node) {
		if(this._animationDictionary.exists(node.get_name())) throw new away3d.errors.AnimationSetError("root node name '" + node.get_name() + "' already exists in the set");
		this._animationDictionary.set(node.get_name(),node);
		this._animations.push(node);
		this._animationNames.push(node.get_name());
	}
	,dispose: function() {
	}
	,__class__: away3d.animators.AnimationSetBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_animationNames:"get_animationNames",get_animations:"get_animations",get_assetType:"get_assetType",get_usesCPU:"get_usesCPU"})
});
away3d.animators.AnimatorBase = function(animationSet) {
	this._broadcaster = new openfl.display.Sprite();
	openfl.Lib.current.stage.addChild(this._broadcaster);
	this._autoUpdate = true;
	this._playbackSpeed = 1;
	this._owners = new Array();
	this._absoluteTime = this._time = 0;
	this._animationStates = new haxe.ds.ObjectMap();
	this.updatePosition = true;
	this._animationSet = animationSet;
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.AnimatorBase"] = away3d.animators.AnimatorBase;
away3d.animators.AnimatorBase.__name__ = ["away3d","animators","AnimatorBase"];
away3d.animators.AnimatorBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.animators.AnimatorBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.animators.AnimatorBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	getAnimationState: function(node) {
		var className = node.get_stateClass();
		if(!(this._animationStates.h.__keys__[node.__id__] != null)) {
			var value;
			value = js.Boot.__cast(Type.createInstance(className,[this,node]) , away3d.animators.states.AnimationStateBase);
			this._animationStates.set(node,value);
		}
		return this._animationStates.h[node.__id__];
	}
	,getAnimationStateByName: function(name) {
		return this.getAnimationState(this._animationSet.getAnimation(name));
	}
	,get_absoluteTime: function() {
		return this._absoluteTime;
	}
	,get_animationSet: function() {
		return this._animationSet;
	}
	,get_activeState: function() {
		return this._activeState;
	}
	,get_activeAnimation: function() {
		return this._animationSet.getAnimation(this._activeAnimationName);
	}
	,get_activeAnimationName: function() {
		return this._activeAnimationName;
	}
	,get_autoUpdate: function() {
		return this._autoUpdate;
	}
	,set_autoUpdate: function(value) {
		if(this._autoUpdate == value) return value;
		this._autoUpdate = value;
		if(this._autoUpdate) this.start(); else this.stop();
		return value;
	}
	,get_time: function() {
		return this._time;
	}
	,set_time: function(value) {
		if(this._time == value) return value;
		this.update(value);
		return value;
	}
	,phase: function(value) {
		this._activeState.phase(value);
	}
	,get_playbackSpeed: function() {
		return this._playbackSpeed;
	}
	,set_playbackSpeed: function(value) {
		this._playbackSpeed = value;
		return value;
	}
	,start: function() {
		if(this._isPlaying || !this._autoUpdate) return;
		this._time = this._absoluteTime = openfl.Lib.getTimer();
		this._isPlaying = true;
		if(!this._broadcaster.hasEventListener(openfl.events.Event.ENTER_FRAME)) this._broadcaster.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		if(!this.hasEventListener(away3d.events.AnimatorEvent.START)) return;
		if(this._startEvent == null) this._startEvent = new away3d.events.AnimatorEvent(away3d.events.AnimatorEvent.START,this);
		this.dispatchEvent(this._startEvent);
	}
	,stop: function() {
		if(!this._isPlaying) return;
		this._isPlaying = false;
		if(this._broadcaster.hasEventListener(openfl.events.Event.ENTER_FRAME)) this._broadcaster.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		if(!this.hasEventListener(away3d.events.AnimatorEvent.STOP)) return;
		if(this._stopEvent == null) this._startEvent = this._stopEvent = new away3d.events.AnimatorEvent(away3d.events.AnimatorEvent.STOP,this);
		this.dispatchEvent(this._stopEvent);
	}
	,update: function(time) {
		var dt = Std["int"]((time - this._time) * this.get_playbackSpeed());
		this.updateDeltaTime(dt);
		this._time = time;
	}
	,reset: function(name,offset) {
		if(offset == null) offset = 0;
		this.getAnimationState(this._animationSet.getAnimation(name)).offset(offset + this._absoluteTime);
	}
	,addOwner: function(mesh) {
		this._owners.push(mesh);
	}
	,removeOwner: function(mesh) {
		this._owners.splice(HxOverrides.indexOf(this._owners,mesh,0),1);
	}
	,updateDeltaTime: function(dt) {
		this._absoluteTime += dt;
		this._activeState.update(this._absoluteTime);
		if(this.updatePosition) this.applyPositionDelta();
	}
	,onEnterFrame: function(event) {
		this.update(openfl.Lib.getTimer());
	}
	,applyPositionDelta: function() {
		var delta = this._activeState.get_positionDelta();
		var dist = Math.sqrt(delta.x * delta.x + delta.y * delta.y + delta.z * delta.z);
		var len;
		if(dist > 0) {
			len = this._owners.length;
			var i = 0;
			while(i < len) {
				this._owners[i].translateLocal(delta,dist);
				++i;
			}
		}
	}
	,dispatchCycleEvent: function() {
		if(this.hasEventListener(away3d.events.AnimatorEvent.CYCLE_COMPLETE)) {
			if(this._cycleEvent == null) this._cycleEvent = new away3d.events.AnimatorEvent(away3d.events.AnimatorEvent.CYCLE_COMPLETE,this);
			this.dispatchEvent(this._cycleEvent);
		}
	}
	,dispose: function() {
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ANIMATOR;
	}
	,__class__: away3d.animators.AnimatorBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_assetType:"get_assetType",set_playbackSpeed:"set_playbackSpeed",get_playbackSpeed:"get_playbackSpeed",set_time:"set_time",get_time:"get_time",set_autoUpdate:"set_autoUpdate",get_autoUpdate:"get_autoUpdate",get_activeAnimationName:"get_activeAnimationName",get_activeAnimation:"get_activeAnimation",get_activeState:"get_activeState",get_animationSet:"get_animationSet",get_absoluteTime:"get_absoluteTime"})
});
away3d.animators.IAnimationSet = function() { };
$hxClasses["away3d.animators.IAnimationSet"] = away3d.animators.IAnimationSet;
away3d.animators.IAnimationSet.__name__ = ["away3d","animators","IAnimationSet"];
away3d.animators.IAnimationSet.prototype = {
	__class__: away3d.animators.IAnimationSet
	,__properties__: {get_usesCPU:"get_usesCPU"}
};
away3d.animators.IAnimator = function() { };
$hxClasses["away3d.animators.IAnimator"] = away3d.animators.IAnimator;
away3d.animators.IAnimator.__name__ = ["away3d","animators","IAnimator"];
away3d.animators.IAnimator.prototype = {
	__class__: away3d.animators.IAnimator
	,__properties__: {get_animationSet:"get_animationSet"}
};
away3d.animators.ParticleAnimationSet = function(usesDuration,usesLooping,usesDelay) {
	if(usesDelay == null) usesDelay = false;
	if(usesLooping == null) usesLooping = false;
	if(usesDuration == null) usesDuration = false;
	this._animationSubGeometries = new haxe.ds.ObjectMap();
	this._particleNodes = new Array();
	this._localDynamicNodes = new Array();
	this._localStaticNodes = new Array();
	this._totalLenOfOneVertex = 0;
	away3d.animators.AnimationSetBase.call(this);
	this.addAnimation(this._timeNode = new away3d.animators.nodes.ParticleTimeNode(usesDuration,usesLooping,usesDelay));
};
$hxClasses["away3d.animators.ParticleAnimationSet"] = away3d.animators.ParticleAnimationSet;
away3d.animators.ParticleAnimationSet.__name__ = ["away3d","animators","ParticleAnimationSet"];
away3d.animators.ParticleAnimationSet.__interfaces__ = [away3d.animators.IAnimationSet];
away3d.animators.ParticleAnimationSet.__super__ = away3d.animators.AnimationSetBase;
away3d.animators.ParticleAnimationSet.prototype = $extend(away3d.animators.AnimationSetBase.prototype,{
	get_particleNodes: function() {
		return this._particleNodes;
	}
	,addAnimation: function(node) {
		var i;
		var n;
		n = js.Boot.__cast(node , away3d.animators.nodes.ParticleNodeBase);
		n.processAnimationSetting(this);
		if(n.get_mode() == away3d.animators.data.ParticlePropertiesMode.LOCAL_STATIC) {
			n.dataOffset = this._totalLenOfOneVertex;
			this._totalLenOfOneVertex += n.get_dataLength();
			this._localStaticNodes.push(n);
		} else if(n.get_mode() == away3d.animators.data.ParticlePropertiesMode.LOCAL_DYNAMIC) this._localDynamicNodes.push(n);
		i = this._particleNodes.length - 1;
		while(i >= 0) {
			if(this._particleNodes[i].get_priority() <= n.get_priority()) break;
			i--;
		}
		this._particleNodes.splice(i + 1,0,n);
		away3d.animators.AnimationSetBase.prototype.addAnimation.call(this,node);
	}
	,activate: function(stage3DProxy,pass) {
		this.animationRegisterCache = pass.animationRegisterCache;
	}
	,deactivate: function(stage3DProxy,pass) {
		var context = stage3DProxy.get_context3D();
		var offset = this.animationRegisterCache.get_vertexAttributesOffset();
		var used = this.animationRegisterCache.get_numUsedStreams();
		var i = offset;
		while(i < used) {
			context.setVertexBufferAt(i,null);
			i++;
		}
	}
	,getAGALVertexCode: function(pass,sourceRegisters,targetRegisters,profile) {
		if(pass.animationRegisterCache != null) this.animationRegisterCache = pass.animationRegisterCache; else this.animationRegisterCache = pass.animationRegisterCache = new away3d.animators.data.AnimationRegisterCache(profile);
		this.animationRegisterCache.set_vertexConstantOffset(pass.get_numUsedVertexConstants());
		this.animationRegisterCache.set_vertexAttributesOffset(pass.get_numUsedStreams());
		this.animationRegisterCache.set_varyingsOffset(pass.get_numUsedVaryings());
		this.animationRegisterCache.set_fragmentConstantOffset(pass.get_numUsedFragmentConstants());
		this.animationRegisterCache.hasUVNode = this.hasUVNode;
		this.animationRegisterCache.needVelocity = this.needVelocity;
		this.animationRegisterCache.hasBillboard = this.hasBillboard;
		this.animationRegisterCache.sourceRegisters = sourceRegisters;
		this.animationRegisterCache.targetRegisters = targetRegisters;
		this.animationRegisterCache.needFragmentAnimation = pass.get_needFragmentAnimation();
		this.animationRegisterCache.needUVAnimation = pass.get_needUVAnimation();
		this.animationRegisterCache.hasColorAddNode = this.hasColorAddNode;
		this.animationRegisterCache.hasColorMulNode = this.hasColorMulNode;
		this.animationRegisterCache.reset();
		var code = "";
		code += this.animationRegisterCache.getInitCode();
		var node;
		var _g = 0;
		var _g1 = this._particleNodes;
		while(_g < _g1.length) {
			var node1 = _g1[_g];
			++_g;
			if(node1.get_priority() < away3d.animators.ParticleAnimationSet.POST_PRIORITY) code += node1.getAGALVertexCode(pass,this.animationRegisterCache);
		}
		code += this.animationRegisterCache.getCombinationCode();
		var _g2 = 0;
		var _g11 = this._particleNodes;
		while(_g2 < _g11.length) {
			var node2 = _g11[_g2];
			++_g2;
			if(node2.get_priority() >= away3d.animators.ParticleAnimationSet.POST_PRIORITY && node2.get_priority() < away3d.animators.ParticleAnimationSet.COLOR_PRIORITY) code += node2.getAGALVertexCode(pass,this.animationRegisterCache);
		}
		code += this.animationRegisterCache.initColorRegisters();
		var _g3 = 0;
		var _g12 = this._particleNodes;
		while(_g3 < _g12.length) {
			var node3 = _g12[_g3];
			++_g3;
			if(node3.get_priority() >= away3d.animators.ParticleAnimationSet.COLOR_PRIORITY) code += node3.getAGALVertexCode(pass,this.animationRegisterCache);
		}
		code += this.animationRegisterCache.getColorPassCode();
		return code;
	}
	,getAGALUVCode: function(pass,UVSource,UVTarget) {
		var code = "";
		if(this.hasUVNode) {
			this.animationRegisterCache.setUVSourceAndTarget(UVSource,UVTarget);
			code += "mov " + Std.string(this.animationRegisterCache.uvTarget) + ".xy," + this.animationRegisterCache.uvAttribute.toString() + "\n";
			var node;
			var _g = 0;
			var _g1 = this._particleNodes;
			while(_g < _g1.length) {
				var node1 = _g1[_g];
				++_g;
				code += node1.getAGALUVCode(pass,this.animationRegisterCache);
			}
			code += "mov " + this.animationRegisterCache.uvVar.toString() + "," + Std.string(this.animationRegisterCache.uvTarget) + ".xy\n";
		} else code += "mov " + UVTarget + "," + UVSource + "\n";
		return code;
	}
	,getAGALFragmentCode: function(pass,shadedTarget,profile) {
		return this.animationRegisterCache.getColorCombinationCode(shadedTarget);
	}
	,doneAGALCode: function(pass) {
		this.animationRegisterCache.setDataLength();
		this.animationRegisterCache.setVertexConst(this.animationRegisterCache.vertexZeroConst.get_index(),0,1,2,0);
	}
	,get_usesCPU: function() {
		return false;
	}
	,cancelGPUCompatibility: function() {
	}
	,dispose: function() {
		var subGeometry;
		var $it0 = this._animationSubGeometries.iterator();
		while( $it0.hasNext() ) {
			var subGeometry1 = $it0.next();
			subGeometry1.dispose();
		}
		away3d.animators.AnimationSetBase.prototype.dispose.call(this);
	}
	,generateAnimationSubGeometries: function(mesh) {
		if(this.initParticleFunc == null) throw new openfl.errors.Error("no initParticleFunc set");
		var geometry;
		geometry = js.Boot.__cast(mesh.get_geometry() , away3d.core.base.ParticleGeometry);
		if(geometry == null) throw new openfl.errors.Error("Particle animation can only be performed on a ParticleGeometry object");
		var i;
		var j;
		var animationSubGeometry = null;
		var newAnimationSubGeometry = false;
		var subGeometry;
		var subMesh;
		var localNode;
		i = 0;
		while(i < mesh.get_subMeshes().length) {
			subMesh = mesh.get_subMeshes()[i];
			subGeometry = subMesh.get_subGeometry();
			if(mesh.get_shareAnimationGeometry()) {
				animationSubGeometry = this._animationSubGeometries.h[subGeometry.__id__];
				if(animationSubGeometry != null) {
					subMesh.animationSubGeometry = animationSubGeometry;
					i++;
					continue;
				}
			}
			animationSubGeometry = subMesh.animationSubGeometry = new away3d.animators.data.AnimationSubGeometry();
			if(mesh.get_shareAnimationGeometry()) this._animationSubGeometries.set(subGeometry,animationSubGeometry);
			newAnimationSubGeometry = true;
			animationSubGeometry.createVertexData(subGeometry.get_numVertices(),this._totalLenOfOneVertex);
			i++;
		}
		if(newAnimationSubGeometry == false) return;
		var particles = geometry.particles;
		var particlesLength = particles.length;
		var numParticles = geometry.numParticles;
		var particleProperties = new away3d.animators.data.ParticleProperties();
		var particle;
		var oneDataLen;
		var oneDataOffset;
		var counterForVertex;
		var counterForOneData;
		var oneData;
		var numVertices;
		var vertexData;
		var vertexLength;
		var startingOffset;
		var vertexOffset;
		particleProperties.total = numParticles;
		particleProperties.startTime = 0;
		particleProperties.duration = 1000;
		particleProperties.delay = 0.1;
		i = 0;
		j = 0;
		while(i < numParticles) {
			particleProperties.index = i;
			this.initParticleFunc(particleProperties);
			var _g1 = 0;
			var _g = this._localStaticNodes.length;
			while(_g1 < _g) {
				var k = _g1++;
				var localNode1 = this._localStaticNodes[k];
				localNode1.generatePropertyOfOneParticle(particleProperties);
				while(j < particlesLength && (particle = particles[j]).particleIndex == i) {
					var _g2 = 0;
					var _g3 = mesh.get_subMeshes();
					while(_g2 < _g3.length) {
						var subMesh1 = _g3[_g2];
						++_g2;
						if(subMesh1.get_subGeometry() == particle.subGeometry) {
							animationSubGeometry = subMesh1.animationSubGeometry;
							break;
						}
					}
					numVertices = particle.numVertices;
					vertexData = animationSubGeometry.get_vertexData();
					vertexLength = numVertices * this._totalLenOfOneVertex;
					startingOffset = animationSubGeometry.numProcessedVertices * this._totalLenOfOneVertex;
					var _g21 = 0;
					var _g31 = this._localStaticNodes;
					while(_g21 < _g31.length) {
						var localNode2 = _g31[_g21];
						++_g21;
						oneData = localNode2.get_oneData();
						oneDataLen = localNode2.get_dataLength();
						oneDataOffset = startingOffset + localNode2.dataOffset;
						counterForVertex = 0;
						while(counterForVertex < vertexLength) {
							vertexOffset = oneDataOffset + counterForVertex;
							counterForOneData = 0;
							while(counterForOneData < oneDataLen) {
								vertexData[vertexOffset + counterForOneData] = oneData[counterForOneData];
								counterForOneData++;
							}
							counterForVertex += this._totalLenOfOneVertex;
						}
					}
					if(this._localDynamicNodes.length > 0) animationSubGeometry.animationParticles.push(new away3d.animators.data.ParticleAnimationData(i,particleProperties.startTime,particleProperties.duration,particleProperties.delay,particle));
					animationSubGeometry.numProcessedVertices += numVertices;
					j++;
				}
			}
			i++;
		}
	}
	,__class__: away3d.animators.ParticleAnimationSet
	,__properties__: $extend(away3d.animators.AnimationSetBase.prototype.__properties__,{get_particleNodes:"get_particleNodes"})
});
away3d.animators.ParticleAnimator = function(particleAnimationSet) {
	this._animationParticleStates = new Array();
	this._animatorParticleStates = new Array();
	this._timeParticleStates = new Array();
	this._totalLenOfOneVertex = 0;
	this._animatorSubGeometries = new haxe.ds.ObjectMap();
	away3d.animators.AnimatorBase.call(this,particleAnimationSet);
	this._particleAnimationSet = particleAnimationSet;
	var state;
	var node;
	var _g1 = 0;
	var _g = this._particleAnimationSet.get_particleNodes().length;
	while(_g1 < _g) {
		var i = _g1++;
		node = this._particleAnimationSet.get_particleNodes()[i];
		state = js.Boot.__cast(this.getAnimationState(node) , away3d.animators.states.ParticleStateBase);
		if(node.get_mode() == away3d.animators.data.ParticlePropertiesMode.LOCAL_DYNAMIC) {
			this._animatorParticleStates.push(state);
			node.dataOffset = this._totalLenOfOneVertex;
			this._totalLenOfOneVertex += node.get_dataLength();
		} else this._animationParticleStates.push(state);
		if(state.get_needUpdateTime()) this._timeParticleStates.push(state);
	}
};
$hxClasses["away3d.animators.ParticleAnimator"] = away3d.animators.ParticleAnimator;
away3d.animators.ParticleAnimator.__name__ = ["away3d","animators","ParticleAnimator"];
away3d.animators.ParticleAnimator.__interfaces__ = [away3d.animators.IAnimator];
away3d.animators.ParticleAnimator.__super__ = away3d.animators.AnimatorBase;
away3d.animators.ParticleAnimator.prototype = $extend(away3d.animators.AnimatorBase.prototype,{
	clone: function() {
		return new away3d.animators.ParticleAnimator(this._particleAnimationSet);
	}
	,setRenderState: function(stage3DProxy,renderable,vertexConstantOffset,vertexStreamOffset,camera) {
		var animationRegisterCache = this._particleAnimationSet.animationRegisterCache;
		var subMesh;
		subMesh = js.Boot.__cast(renderable , away3d.core.base.SubMesh);
		var state;
		if(subMesh == null) throw new openfl.errors.Error("Must be subMesh");
		if(subMesh.animationSubGeometry == null) this._particleAnimationSet.generateAnimationSubGeometries(subMesh.get_parentMesh());
		var animationSubGeometry = subMesh.animationSubGeometry;
		var _g = 0;
		var _g1 = this._animationParticleStates;
		while(_g < _g1.length) {
			var state1 = _g1[_g];
			++_g;
			state1.setRenderState(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera);
		}
		if(subMesh.animatorSubGeometry == null && this._animatorParticleStates.length > 0) this.generateAnimatorSubGeometry(subMesh);
		var animatorSubGeometry = subMesh.animatorSubGeometry;
		var _g2 = 0;
		var _g11 = this._animatorParticleStates;
		while(_g2 < _g11.length) {
			var state2 = _g11[_g2];
			++_g2;
			state2.setRenderState(stage3DProxy,renderable,animatorSubGeometry,animationRegisterCache,camera);
		}
		stage3DProxy.get_context3D().setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,animationRegisterCache.get_vertexConstantOffset(),(function($this) {
			var $r;
			var this1 = animationRegisterCache.vertexConstantData;
			var value = new Array();
			{
				var _g12 = 0;
				var _g3 = this1.data.length;
				while(_g12 < _g3) {
					var i = _g12++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)),animationRegisterCache.get_numVertexConstant());
		if(animationRegisterCache.get_numFragmentConstant() > 0) stage3DProxy.get_context3D().setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,animationRegisterCache.get_fragmentConstantOffset(),(function($this) {
			var $r;
			var this2 = animationRegisterCache.fragmentConstantData;
			var value1 = new Array();
			{
				var _g13 = 0;
				var _g4 = this2.data.length;
				while(_g13 < _g4) {
					var i1 = _g13++;
					value1.push(this2.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)),animationRegisterCache.get_numFragmentConstant());
	}
	,testGPUCompatibility: function(pass) {
	}
	,start: function() {
		away3d.animators.AnimatorBase.prototype.start.call(this);
		var _g = 0;
		var _g1 = this._timeParticleStates;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.offset(this._absoluteTime);
		}
	}
	,updateDeltaTime: function(dt) {
		this._absoluteTime += dt;
		var _g = 0;
		var _g1 = this._timeParticleStates;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.update(this._absoluteTime);
		}
	}
	,resetTime: function(offset) {
		if(offset == null) offset = 0;
		var _g = 0;
		var _g1 = this._timeParticleStates;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.offset(this._absoluteTime + offset);
		}
		this.update(this.get_time());
	}
	,dispose: function() {
		var subGeometry;
		var $it0 = this._animatorSubGeometries.iterator();
		while( $it0.hasNext() ) {
			var subGeometry1 = $it0.next();
			subGeometry1.dispose();
		}
	}
	,generateAnimatorSubGeometry: function(subMesh) {
		var subGeometry = subMesh.get_subGeometry();
		this._animatorSubGeometries.set(subGeometry,new away3d.animators.data.AnimationSubGeometry());
		var animatorSubGeometry = subMesh.animatorSubGeometry = this._animatorSubGeometries.h[subGeometry.__id__];
		animatorSubGeometry.createVertexData(subGeometry.get_numVertices(),this._totalLenOfOneVertex);
		animatorSubGeometry.animationParticles = subMesh.animationSubGeometry.animationParticles;
	}
	,__class__: away3d.animators.ParticleAnimator
});
away3d.materials = {};
away3d.materials.compilation = {};
away3d.materials.compilation.ShaderRegisterCache = function(profile) {
	this._profile = profile;
};
$hxClasses["away3d.materials.compilation.ShaderRegisterCache"] = away3d.materials.compilation.ShaderRegisterCache;
away3d.materials.compilation.ShaderRegisterCache.__name__ = ["away3d","materials","compilation","ShaderRegisterCache"];
away3d.materials.compilation.ShaderRegisterCache.prototype = {
	reset: function() {
		this._fragmentTempCache = new away3d.materials.compilation.RegisterPool("ft",8,false);
		this._vertexTempCache = new away3d.materials.compilation.RegisterPool("vt",8,false);
		this._varyingCache = new away3d.materials.compilation.RegisterPool("v",8);
		this._textureCache = new away3d.materials.compilation.RegisterPool("fs",8);
		this._vertexAttributesCache = new away3d.materials.compilation.RegisterPool("va",8);
		this._fragmentConstantsCache = new away3d.materials.compilation.RegisterPool("fc",28);
		this._vertexConstantsCache = new away3d.materials.compilation.RegisterPool("vc",128);
		this._fragmentOutputRegister = new away3d.materials.compilation.ShaderRegisterElement("oc",-1);
		this._vertexOutputRegister = new away3d.materials.compilation.ShaderRegisterElement("op",-1);
		this._numUsedVertexConstants = 0;
		this._numUsedStreams = 0;
		this._numUsedTextures = 0;
		this._numUsedVaryings = 0;
		this._numUsedFragmentConstants = 0;
		var i;
		i = 0;
		while(i < this._vertexAttributesOffset) {
			this.getFreeVertexAttribute();
			++i;
		}
		i = 0;
		while(i < this._vertexConstantOffset) {
			this.getFreeVertexConstant();
			++i;
		}
		i = 0;
		while(i < this._varyingsOffset) {
			this.getFreeVarying();
			++i;
		}
		i = 0;
		while(i < this._fragmentConstantOffset) {
			this.getFreeFragmentConstant();
			++i;
		}
	}
	,dispose: function() {
		this._fragmentTempCache.dispose();
		this._vertexTempCache.dispose();
		this._varyingCache.dispose();
		this._fragmentConstantsCache.dispose();
		this._vertexAttributesCache.dispose();
		this._fragmentTempCache = null;
		this._vertexTempCache = null;
		this._varyingCache = null;
		this._fragmentConstantsCache = null;
		this._vertexAttributesCache = null;
		this._fragmentOutputRegister = null;
		this._vertexOutputRegister = null;
	}
	,addFragmentTempUsages: function(register,usageCount) {
		this._fragmentTempCache.addUsage(register,usageCount);
	}
	,removeFragmentTempUsage: function(register) {
		this._fragmentTempCache.removeUsage(register);
	}
	,addVertexTempUsages: function(register,usageCount) {
		this._vertexTempCache.addUsage(register,usageCount);
	}
	,removeVertexTempUsage: function(register) {
		this._vertexTempCache.removeUsage(register);
	}
	,getFreeFragmentVectorTemp: function() {
		return this._fragmentTempCache.requestFreeVectorReg();
	}
	,getFreeFragmentSingleTemp: function() {
		return this._fragmentTempCache.requestFreeRegComponent();
	}
	,getFreeVarying: function() {
		++this._numUsedVaryings;
		return this._varyingCache.requestFreeVectorReg();
	}
	,getFreeFragmentConstant: function() {
		++this._numUsedFragmentConstants;
		return this._fragmentConstantsCache.requestFreeVectorReg();
	}
	,getFreeVertexConstant: function() {
		++this._numUsedVertexConstants;
		return this._vertexConstantsCache.requestFreeVectorReg();
	}
	,getFreeVertexVectorTemp: function() {
		return this._vertexTempCache.requestFreeVectorReg();
	}
	,getFreeVertexSingleTemp: function() {
		return this._vertexTempCache.requestFreeRegComponent();
	}
	,getFreeVertexAttribute: function() {
		++this._numUsedStreams;
		return this._vertexAttributesCache.requestFreeVectorReg();
	}
	,getFreeTextureReg: function() {
		++this._numUsedTextures;
		return this._textureCache.requestFreeVectorReg();
	}
	,get_vertexConstantOffset: function() {
		return this._vertexConstantOffset;
	}
	,set_vertexConstantOffset: function(vertexConstantOffset) {
		this._vertexConstantOffset = vertexConstantOffset;
		return vertexConstantOffset;
	}
	,get_vertexAttributesOffset: function() {
		return this._vertexAttributesOffset;
	}
	,set_vertexAttributesOffset: function(value) {
		this._vertexAttributesOffset = value;
		return value;
	}
	,get_varyingsOffset: function() {
		return this._varyingsOffset;
	}
	,set_varyingsOffset: function(value) {
		this._varyingsOffset = value;
		return value;
	}
	,get_fragmentConstantOffset: function() {
		return this._fragmentConstantOffset;
	}
	,set_fragmentConstantOffset: function(value) {
		this._fragmentConstantOffset = value;
		return value;
	}
	,get_fragmentOutputRegister: function() {
		return this._fragmentOutputRegister;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedTextures: function() {
		return this._numUsedTextures;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,__class__: away3d.materials.compilation.ShaderRegisterCache
	,__properties__: {get_numUsedVaryings:"get_numUsedVaryings",get_numUsedTextures:"get_numUsedTextures",get_numUsedStreams:"get_numUsedStreams",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_fragmentOutputRegister:"get_fragmentOutputRegister",set_fragmentConstantOffset:"set_fragmentConstantOffset",get_fragmentConstantOffset:"get_fragmentConstantOffset",set_varyingsOffset:"set_varyingsOffset",get_varyingsOffset:"get_varyingsOffset",set_vertexAttributesOffset:"set_vertexAttributesOffset",get_vertexAttributesOffset:"get_vertexAttributesOffset",set_vertexConstantOffset:"set_vertexConstantOffset",get_vertexConstantOffset:"get_vertexConstantOffset"}
};
away3d.animators.data = {};
away3d.animators.data.AnimationRegisterCache = function(profile) {
	away3d.materials.compilation.ShaderRegisterCache.call(this,profile);
	this.indexDictionary = new haxe.ds.ObjectMap();
	this.vertexConstantData = openfl._Vector.Vector_Impl_._new();
	this.fragmentConstantData = openfl._Vector.Vector_Impl_._new();
};
$hxClasses["away3d.animators.data.AnimationRegisterCache"] = away3d.animators.data.AnimationRegisterCache;
away3d.animators.data.AnimationRegisterCache.__name__ = ["away3d","animators","data","AnimationRegisterCache"];
away3d.animators.data.AnimationRegisterCache.__super__ = away3d.materials.compilation.ShaderRegisterCache;
away3d.animators.data.AnimationRegisterCache.prototype = $extend(away3d.materials.compilation.ShaderRegisterCache.prototype,{
	reset: function() {
		away3d.materials.compilation.ShaderRegisterCache.prototype.reset.call(this);
		this.rotationRegisters = new Array();
		this.positionAttribute = this.getRegisterFromString(this.sourceRegisters[0]);
		this.scaleAndRotateTarget = this.getRegisterFromString(this.targetRegisters[0]);
		this.addVertexTempUsages(this.scaleAndRotateTarget,1);
		var i = 1;
		while(i < this.targetRegisters.length) {
			this.rotationRegisters.push(this.getRegisterFromString(this.targetRegisters[i]));
			this.addVertexTempUsages(this.rotationRegisters[i - 1],1);
			i++;
		}
		this.scaleAndRotateTarget = new away3d.materials.compilation.ShaderRegisterElement(this.scaleAndRotateTarget.get_regName(),this.scaleAndRotateTarget.get_index());
		this.vertexZeroConst = this.getFreeVertexConstant();
		this.vertexZeroConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),0);
		this.vertexOneConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),1);
		this.vertexTwoConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),2);
		this.positionTarget = this.getFreeVertexVectorTemp();
		this.addVertexTempUsages(this.positionTarget,1);
		this.positionTarget = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
		if(this.needVelocity) {
			this.velocityTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.velocityTarget,1);
			this.velocityTarget = new away3d.materials.compilation.ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index());
			this.vertexTime = new away3d.materials.compilation.ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index(),3);
			this.vertexLife = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index(),3);
		} else {
			var tempTime = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(tempTime,1);
			this.vertexTime = new away3d.materials.compilation.ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),0);
			this.vertexLife = new away3d.materials.compilation.ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),1);
		}
	}
	,setUVSourceAndTarget: function(UVAttribute,UVVaring) {
		this.uvVar = this.getRegisterFromString(UVVaring);
		this.uvAttribute = this.getRegisterFromString(UVAttribute);
		this.uvTarget = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
	}
	,setRegisterIndex: function(node,parameterIndex,registerIndex) {
		var aNode;
		if(this.indexDictionary.h.__keys__[node.__id__] != null) aNode = this.indexDictionary.h[node.__id__]; else aNode = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8,0);
		aNode[parameterIndex] = registerIndex;
		this.indexDictionary.set(node,aNode);
	}
	,getRegisterIndex: function(node,parameterIndex) {
		return this.indexDictionary.h[node.__id__][parameterIndex];
	}
	,getInitCode: function() {
		var len = this.sourceRegisters.length;
		var code = "";
		var i = 0;
		while(i < len) {
			code += "mov " + this.targetRegisters[i] + "," + this.sourceRegisters[i] + "\n";
			i++;
		}
		code += "mov " + Std.string(this.positionTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		if(this.needVelocity) code += "mov " + Std.string(this.velocityTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		return code;
	}
	,getCombinationCode: function() {
		return "add " + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.positionTarget) + ".xyz\n";
	}
	,initColorRegisters: function() {
		var code = "";
		if(this.hasColorMulNode) {
			this.colorMulTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorMulTarget,1);
			this.colorMulVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorMulTarget) + "," + Std.string(this.vertexOneConst) + "\n";
		}
		if(this.hasColorAddNode) {
			this.colorAddTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorAddTarget,1);
			this.colorAddVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorAddTarget) + "," + Std.string(this.vertexZeroConst) + "\n";
		}
		return code;
	}
	,getColorPassCode: function() {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			if(this.hasColorMulNode) code += "mov " + Std.string(this.colorMulVary) + "," + Std.string(this.colorMulTarget) + "\n";
			if(this.hasColorAddNode) code += "mov " + Std.string(this.colorAddVary) + "," + Std.string(this.colorAddTarget) + "\n";
		}
		return code;
	}
	,getColorCombinationCode: function(shadedTarget) {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			var colorTarget = this.getRegisterFromString(shadedTarget);
			this.addFragmentTempUsages(colorTarget,1);
			if(this.hasColorMulNode) code += "mul " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorMulVary) + "\n";
			if(this.hasColorAddNode) code += "add " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorAddVary) + "\n";
		}
		return code;
	}
	,getRegisterFromString: function(code) {
		var er = new EReg("([a-z]+)([\\d]+)","");
		er.match(code);
		return new away3d.materials.compilation.ShaderRegisterElement(er.matched(1),Std.parseInt(er.matched(2)));
	}
	,get_numVertexConstant: function() {
		return this._numVertexConstant;
	}
	,get_numFragmentConstant: function() {
		return this._numFragmentConstant;
	}
	,setDataLength: function() {
		this._numVertexConstant = this._numUsedVertexConstants - this._vertexConstantOffset;
		this._numFragmentConstant = this._numUsedFragmentConstants - this._fragmentConstantOffset;
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this.vertexConstantData),this._numVertexConstant * 4);
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this.fragmentConstantData),this._numFragmentConstant * 4);
	}
	,setVertexConst: function(index,x,y,z,w) {
		if(w == null) w = 0;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var _index = (index - this._vertexConstantOffset) * 4;
		var this1 = this.vertexConstantData;
		var key = _index++;
		if(key >= this1.length && !this1.fixed) this1.length = key + 1;
		this1.data[key] = x;
		var this2 = this.vertexConstantData;
		var key1 = _index++;
		if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
		this2.data[key1] = y;
		var this3 = this.vertexConstantData;
		var key2 = _index++;
		if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
		this3.data[key2] = z;
		var this4 = this.vertexConstantData;
		if(_index >= this4.length && !this4.fixed) this4.length = _index + 1;
		this4.data[_index] = w;
	}
	,setVertexConstFromVector: function(index,data) {
		var _index = (index - this._vertexConstantOffset) * 4;
		var i = 0;
		while(i < data.length) {
			var this1 = this.vertexConstantData;
			var key = _index++;
			if(key >= this1.length && !this1.fixed) this1.length = key + 1;
			this1.data[key] = data[i];
			i++;
		}
	}
	,setVertexConstFromMatrix: function(index,matrix) {
		var rawData = matrix.rawData;
		var _index = (index - this._vertexConstantOffset) * 4;
		var this1 = this.vertexConstantData;
		var key = _index++;
		if(key >= this1.length && !this1.fixed) this1.length = key + 1;
		this1.data[key] = rawData.data[0];
		var this2 = this.vertexConstantData;
		var key1 = _index++;
		if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
		this2.data[key1] = rawData.data[4];
		var this3 = this.vertexConstantData;
		var key2 = _index++;
		if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
		this3.data[key2] = rawData.data[8];
		var this4 = this.vertexConstantData;
		var key3 = _index++;
		if(key3 >= this4.length && !this4.fixed) this4.length = key3 + 1;
		this4.data[key3] = rawData.data[12];
		var this5 = this.vertexConstantData;
		var key4 = _index++;
		if(key4 >= this5.length && !this5.fixed) this5.length = key4 + 1;
		this5.data[key4] = rawData.data[1];
		var this6 = this.vertexConstantData;
		var key5 = _index++;
		if(key5 >= this6.length && !this6.fixed) this6.length = key5 + 1;
		this6.data[key5] = rawData.data[5];
		var this7 = this.vertexConstantData;
		var key6 = _index++;
		if(key6 >= this7.length && !this7.fixed) this7.length = key6 + 1;
		this7.data[key6] = rawData.data[9];
		var this8 = this.vertexConstantData;
		var key7 = _index++;
		if(key7 >= this8.length && !this8.fixed) this8.length = key7 + 1;
		this8.data[key7] = rawData.data[13];
		var this9 = this.vertexConstantData;
		var key8 = _index++;
		if(key8 >= this9.length && !this9.fixed) this9.length = key8 + 1;
		this9.data[key8] = rawData.data[2];
		var this10 = this.vertexConstantData;
		var key9 = _index++;
		if(key9 >= this10.length && !this10.fixed) this10.length = key9 + 1;
		this10.data[key9] = rawData.data[6];
		var this11 = this.vertexConstantData;
		var key10 = _index++;
		if(key10 >= this11.length && !this11.fixed) this11.length = key10 + 1;
		this11.data[key10] = rawData.data[10];
		var this12 = this.vertexConstantData;
		var key11 = _index++;
		if(key11 >= this12.length && !this12.fixed) this12.length = key11 + 1;
		this12.data[key11] = rawData.data[14];
		var this13 = this.vertexConstantData;
		var key12 = _index++;
		if(key12 >= this13.length && !this13.fixed) this13.length = key12 + 1;
		this13.data[key12] = rawData.data[3];
		var this14 = this.vertexConstantData;
		var key13 = _index++;
		if(key13 >= this14.length && !this14.fixed) this14.length = key13 + 1;
		this14.data[key13] = rawData.data[7];
		var this15 = this.vertexConstantData;
		var key14 = _index++;
		if(key14 >= this15.length && !this15.fixed) this15.length = key14 + 1;
		this15.data[key14] = rawData.data[11];
		var this16 = this.vertexConstantData;
		if(_index >= this16.length && !this16.fixed) this16.length = _index + 1;
		this16.data[_index] = rawData.data[15];
	}
	,setFragmentConst: function(index,x,y,z,w) {
		if(w == null) w = 0;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var _index = (index - this._fragmentConstantOffset) * 4;
		var this1 = this.fragmentConstantData;
		var key = _index++;
		if(key >= this1.length && !this1.fixed) this1.length = key + 1;
		this1.data[key] = x;
		var this2 = this.fragmentConstantData;
		var key1 = _index++;
		if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
		this2.data[key1] = y;
		var this3 = this.fragmentConstantData;
		var key2 = _index++;
		if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
		this3.data[key2] = z;
		var this4 = this.fragmentConstantData;
		if(_index >= this4.length && !this4.fixed) this4.length = _index + 1;
		this4.data[_index] = w;
	}
	,__class__: away3d.animators.data.AnimationRegisterCache
	,__properties__: $extend(away3d.materials.compilation.ShaderRegisterCache.prototype.__properties__,{get_numFragmentConstant:"get_numFragmentConstant",get_numVertexConstant:"get_numVertexConstant"})
});
away3d.animators.data.AnimationSubGeometry = function() {
	this._vertexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._bufferContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._bufferDirty = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this.numProcessedVertices = 0;
	this.previousTime = Math.NEGATIVE_INFINITY;
	this.animationParticles = new Array();
	var i = 0;
	while(i < 8) {
		this._bufferDirty[i] = true;
		i++;
	}
};
$hxClasses["away3d.animators.data.AnimationSubGeometry"] = away3d.animators.data.AnimationSubGeometry;
away3d.animators.data.AnimationSubGeometry.__name__ = ["away3d","animators","data","AnimationSubGeometry"];
away3d.animators.data.AnimationSubGeometry.prototype = {
	createVertexData: function(numVertices,totalLenOfOneVertex) {
		this._numVertices = numVertices;
		this._totalLenOfOneVertex = totalLenOfOneVertex;
		this._vertexData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),numVertices * totalLenOfOneVertex,0);
	}
	,activateVertexBuffer: function(index,bufferOffset,stage3DProxy,format) {
		var contextIndex = stage3DProxy.get_stage3DIndex();
		var context = stage3DProxy.get_context3D();
		var buffer = this._vertexBuffer[contextIndex];
		if(buffer == null || this._bufferContext[contextIndex] != context) {
			buffer = this._vertexBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,this._totalLenOfOneVertex);
			this._bufferContext[contextIndex] = context;
			this._bufferDirty[contextIndex] = true;
		}
		if(this._bufferDirty[contextIndex]) {
			buffer.uploadFromVector(this._vertexData,0,this._numVertices);
			this._bufferDirty[contextIndex] = false;
		}
		context.setVertexBufferAt(index,buffer,bufferOffset,format);
	}
	,dispose: function() {
		while(this._vertexBuffer.length > 0) {
			var vertexBuffer = this._vertexBuffer.pop();
			if(vertexBuffer != null) vertexBuffer.dispose();
		}
	}
	,invalidateBuffer: function() {
		var i = 0;
		while(i < 8) {
			this._bufferDirty[i] = true;
			i++;
		}
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_numVertices: function() {
		return this._numVertices;
	}
	,get_totalLenOfOneVertex: function() {
		return this._totalLenOfOneVertex;
	}
	,__class__: away3d.animators.data.AnimationSubGeometry
	,__properties__: {get_totalLenOfOneVertex:"get_totalLenOfOneVertex",get_numVertices:"get_numVertices",get_vertexData:"get_vertexData"}
};
away3d.animators.data.ParticleAnimationData = function(index,startTime,duration,delay,particle) {
	this.index = index;
	this.startTime = startTime;
	this.totalTime = duration + delay;
	this.duration = duration;
	this.delay = delay;
	this.startVertexIndex = particle.startVertexIndex;
	this.numVertices = particle.numVertices;
};
$hxClasses["away3d.animators.data.ParticleAnimationData"] = away3d.animators.data.ParticleAnimationData;
away3d.animators.data.ParticleAnimationData.__name__ = ["away3d","animators","data","ParticleAnimationData"];
away3d.animators.data.ParticleAnimationData.prototype = {
	__class__: away3d.animators.data.ParticleAnimationData
};
away3d.animators.data.ParticleProperties = function() {
	this.nodes = new haxe.ds.StringMap();
};
$hxClasses["away3d.animators.data.ParticleProperties"] = away3d.animators.data.ParticleProperties;
away3d.animators.data.ParticleProperties.__name__ = ["away3d","animators","data","ParticleProperties"];
away3d.animators.data.ParticleProperties.prototype = {
	__class__: away3d.animators.data.ParticleProperties
};
away3d.animators.data.ParticlePropertiesMode = function() { };
$hxClasses["away3d.animators.data.ParticlePropertiesMode"] = away3d.animators.data.ParticlePropertiesMode;
away3d.animators.data.ParticlePropertiesMode.__name__ = ["away3d","animators","data","ParticlePropertiesMode"];
away3d.animators.nodes = {};
away3d.animators.nodes.AnimationNodeBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.nodes.AnimationNodeBase"] = away3d.animators.nodes.AnimationNodeBase;
away3d.animators.nodes.AnimationNodeBase.__name__ = ["away3d","animators","nodes","AnimationNodeBase"];
away3d.animators.nodes.AnimationNodeBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.animators.nodes.AnimationNodeBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.animators.nodes.AnimationNodeBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_stateClass: function() {
		return this._stateClass;
	}
	,dispose: function() {
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ANIMATION_NODE;
	}
	,__class__: away3d.animators.nodes.AnimationNodeBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_assetType:"get_assetType",get_stateClass:"get_stateClass"})
});
away3d.animators.nodes.ParticleNodeBase = function(name,mode,dataLength,priority) {
	if(priority == null) priority = 1;
	away3d.animators.nodes.AnimationNodeBase.call(this);
	this._dataLength = 3;
	name = name + away3d.animators.nodes.ParticleNodeBase.MODES[mode];
	this.set_name(name);
	this._mode = mode;
	this._priority = priority;
	this._dataLength = dataLength;
	this._oneData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._dataLength,0);
};
$hxClasses["away3d.animators.nodes.ParticleNodeBase"] = away3d.animators.nodes.ParticleNodeBase;
away3d.animators.nodes.ParticleNodeBase.__name__ = ["away3d","animators","nodes","ParticleNodeBase"];
away3d.animators.nodes.ParticleNodeBase.getParticleNodeName = function(particleNodeClass,particleNodeMode) {
	var nodeName = particleNodeClass.node.get("ANIMATION_NODE_NAME");
	if(nodeName == null) nodeName = away3d.animators.nodes.ParticleNodeBase.getNodeNameFromClass(particleNodeClass);
	return nodeName + away3d.animators.nodes.ParticleNodeBase.MODES[particleNodeMode];
};
away3d.animators.nodes.ParticleNodeBase.getNodeNameFromClass = function(particleNodeClass) {
	return StringTools.replace(Type.getClassName(particleNodeClass),"Node","").split("::")[1];
};
away3d.animators.nodes.ParticleNodeBase.__super__ = away3d.animators.nodes.AnimationNodeBase;
away3d.animators.nodes.ParticleNodeBase.prototype = $extend(away3d.animators.nodes.AnimationNodeBase.prototype,{
	get_mode: function() {
		return this._mode;
	}
	,get_priority: function() {
		return this._priority;
	}
	,get_dataLength: function() {
		return this._dataLength;
	}
	,get_oneData: function() {
		return this._oneData;
	}
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		return "";
	}
	,getAGALFragmentCode: function(pass,animationRegisterCache) {
		return "";
	}
	,getAGALUVCode: function(pass,animationRegisterCache) {
		return "";
	}
	,generatePropertyOfOneParticle: function(param) {
	}
	,processAnimationSetting: function(particleAnimationSet) {
	}
	,__class__: away3d.animators.nodes.ParticleNodeBase
	,__properties__: $extend(away3d.animators.nodes.AnimationNodeBase.prototype.__properties__,{get_oneData:"get_oneData",get_dataLength:"get_dataLength",get_priority:"get_priority",get_mode:"get_mode"})
});
away3d.animators.nodes.ParticlePositionNode = function(mode,position) {
	away3d.animators.nodes.ParticleNodeBase.call(this,"ParticlePosition",mode,3);
	this._stateClass = away3d.animators.states.ParticlePositionState;
	this._position = position;
	if(this._position == null) this._position = new openfl.geom.Vector3D();
};
$hxClasses["away3d.animators.nodes.ParticlePositionNode"] = away3d.animators.nodes.ParticlePositionNode;
away3d.animators.nodes.ParticlePositionNode.__name__ = ["away3d","animators","nodes","ParticlePositionNode"];
away3d.animators.nodes.ParticlePositionNode.__super__ = away3d.animators.nodes.ParticleNodeBase;
away3d.animators.nodes.ParticlePositionNode.prototype = $extend(away3d.animators.nodes.ParticleNodeBase.prototype,{
	getAGALVertexCode: function(pass,animationRegisterCache) {
		var positionAttribute;
		if(this._mode == away3d.animators.data.ParticlePropertiesMode.GLOBAL) positionAttribute = animationRegisterCache.getFreeVertexConstant(); else positionAttribute = animationRegisterCache.getFreeVertexAttribute();
		animationRegisterCache.setRegisterIndex(this,away3d.animators.nodes.ParticlePositionNode.POSITION_INDEX,positionAttribute.get_index());
		return "add " + Std.string(animationRegisterCache.positionTarget) + ".xyz," + Std.string(positionAttribute) + ".xyz," + Std.string(animationRegisterCache.positionTarget) + ".xyz\n";
	}
	,getAnimationState: function(animator) {
		return js.Boot.__cast(animator.getAnimationState(this) , away3d.animators.states.ParticlePositionState);
	}
	,generatePropertyOfOneParticle: function(param) {
		var offset = param.nodes.get(away3d.animators.nodes.ParticlePositionNode.POSITION_VECTOR3D);
		if(offset == null) throw new openfl.errors.Error("there is no " + away3d.animators.nodes.ParticlePositionNode.POSITION_VECTOR3D + " in param!");
		this._oneData[0] = offset.x;
		this._oneData[1] = offset.y;
		this._oneData[2] = offset.z;
	}
	,__class__: away3d.animators.nodes.ParticlePositionNode
});
away3d.animators.nodes.ParticleTimeNode = function(usesDuration,usesLooping,usesDelay) {
	if(usesDelay == null) usesDelay = false;
	if(usesLooping == null) usesLooping = false;
	if(usesDuration == null) usesDuration = false;
	this._stateClass = away3d.animators.states.ParticleTimeState;
	this._usesDuration = usesDuration;
	this._usesLooping = usesLooping;
	this._usesDelay = usesDelay;
	away3d.animators.nodes.ParticleNodeBase.call(this,"ParticleTime",away3d.animators.data.ParticlePropertiesMode.LOCAL_STATIC,4,0);
};
$hxClasses["away3d.animators.nodes.ParticleTimeNode"] = away3d.animators.nodes.ParticleTimeNode;
away3d.animators.nodes.ParticleTimeNode.__name__ = ["away3d","animators","nodes","ParticleTimeNode"];
away3d.animators.nodes.ParticleTimeNode.__super__ = away3d.animators.nodes.ParticleNodeBase;
away3d.animators.nodes.ParticleTimeNode.prototype = $extend(away3d.animators.nodes.ParticleNodeBase.prototype,{
	getAGALVertexCode: function(pass,animationRegisterCache) {
		var timeStreamRegister = animationRegisterCache.getFreeVertexAttribute();
		animationRegisterCache.setRegisterIndex(this,away3d.animators.nodes.ParticleTimeNode.TIME_STREAM_INDEX,timeStreamRegister.get_index());
		var timeConst = animationRegisterCache.getFreeVertexConstant();
		animationRegisterCache.setRegisterIndex(this,away3d.animators.nodes.ParticleTimeNode.TIME_CONSTANT_INDEX,timeConst.get_index());
		var code = "";
		code += "sub " + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeConst) + "," + Std.string(timeStreamRegister) + ".x\n";
		var temp = animationRegisterCache.getFreeVertexSingleTemp();
		code += "sge " + Std.string(temp) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(animationRegisterCache.vertexZeroConst) + "\n";
		code += "mul " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyzz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyzz," + Std.string(temp) + "\n";
		if(this._usesDuration) {
			if(this._usesLooping) {
				var div = animationRegisterCache.getFreeVertexSingleTemp();
				if(this._usesDelay) {
					code += "div " + Std.string(div) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".z\n";
					code += "frc " + Std.string(div) + "," + Std.string(div) + "\n";
					code += "mul " + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(div) + "," + Std.string(timeStreamRegister) + ".z\n";
					code += "slt " + Std.string(div) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".y\n";
					code += "mul " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyzz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyzz," + Std.string(div) + "\n";
				} else {
					code += "mul " + Std.string(div) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".w\n";
					code += "frc " + Std.string(div) + "," + Std.string(div) + "\n";
					code += "mul " + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(div) + "," + Std.string(timeStreamRegister) + ".y\n";
				}
			} else {
				var sge = animationRegisterCache.getFreeVertexSingleTemp();
				code += "sge " + Std.string(sge) + "," + Std.string(timeStreamRegister) + ".y," + Std.string(animationRegisterCache.vertexTime) + "\n";
				code += "mul " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyzz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyzz," + Std.string(sge) + "\n";
			}
		}
		code += "mul " + Std.string(animationRegisterCache.vertexLife) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".w\n";
		return code;
	}
	,getAnimationState: function(animator) {
		return js.Boot.__cast(animator.getAnimationState(this) , away3d.animators.states.ParticleTimeState);
	}
	,generatePropertyOfOneParticle: function(param) {
		this._oneData[0] = param.startTime;
		this._oneData[1] = param.duration;
		this._oneData[2] = param.delay + param.duration;
		this._oneData[3] = 1 / param.duration;
	}
	,__class__: away3d.animators.nodes.ParticleTimeNode
});
away3d.animators.nodes.ParticleVelocityNode = function(mode,velocity) {
	away3d.animators.nodes.ParticleNodeBase.call(this,"ParticleVelocity",mode,3);
	this._stateClass = away3d.animators.states.ParticleVelocityState;
	this._velocity = velocity;
	if(this._velocity == null) this._velocity = new openfl.geom.Vector3D();
};
$hxClasses["away3d.animators.nodes.ParticleVelocityNode"] = away3d.animators.nodes.ParticleVelocityNode;
away3d.animators.nodes.ParticleVelocityNode.__name__ = ["away3d","animators","nodes","ParticleVelocityNode"];
away3d.animators.nodes.ParticleVelocityNode.__super__ = away3d.animators.nodes.ParticleNodeBase;
away3d.animators.nodes.ParticleVelocityNode.prototype = $extend(away3d.animators.nodes.ParticleNodeBase.prototype,{
	getAGALVertexCode: function(pass,animationRegisterCache) {
		var velocityValue;
		if(this._mode == away3d.animators.data.ParticlePropertiesMode.GLOBAL) velocityValue = animationRegisterCache.getFreeVertexConstant(); else velocityValue = animationRegisterCache.getFreeVertexAttribute();
		animationRegisterCache.setRegisterIndex(this,away3d.animators.nodes.ParticleVelocityNode.VELOCITY_INDEX,velocityValue.get_index());
		var distance = animationRegisterCache.getFreeVertexVectorTemp();
		var code = "";
		code += "mul " + Std.string(distance) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(velocityValue) + "\n";
		code += "add " + Std.string(animationRegisterCache.positionTarget) + ".xyz," + Std.string(distance) + "," + Std.string(animationRegisterCache.positionTarget) + ".xyz\n";
		if(animationRegisterCache.needVelocity) code += "add " + Std.string(animationRegisterCache.velocityTarget) + ".xyz," + Std.string(velocityValue) + ".xyz," + Std.string(animationRegisterCache.velocityTarget) + ".xyz\n";
		return code;
	}
	,getAnimationState: function(animator) {
		return js.Boot.__cast(animator.getAnimationState(this) , away3d.animators.states.ParticleVelocityState);
	}
	,generatePropertyOfOneParticle: function(param) {
		var _tempVelocity = param.nodes.get(away3d.animators.nodes.ParticleVelocityNode.VELOCITY_VECTOR3D);
		if(_tempVelocity == null) throw new openfl.errors.Error("there is no " + away3d.animators.nodes.ParticleVelocityNode.VELOCITY_VECTOR3D + " in param!");
		this._oneData[0] = _tempVelocity.x;
		this._oneData[1] = _tempVelocity.y;
		this._oneData[2] = _tempVelocity.z;
	}
	,__class__: away3d.animators.nodes.ParticleVelocityNode
});
away3d.animators.states = {};
away3d.animators.states.IAnimationState = function() { };
$hxClasses["away3d.animators.states.IAnimationState"] = away3d.animators.states.IAnimationState;
away3d.animators.states.IAnimationState.__name__ = ["away3d","animators","states","IAnimationState"];
away3d.animators.states.IAnimationState.prototype = {
	__class__: away3d.animators.states.IAnimationState
	,__properties__: {get_positionDelta:"get_positionDelta"}
};
away3d.animators.states.AnimationStateBase = function(animator,animationNode) {
	this._time = this._startTime = 0;
	this._rootDelta = new openfl.geom.Vector3D();
	this._positionDeltaDirty = true;
	this._animator = animator;
	this._animationNode = animationNode;
};
$hxClasses["away3d.animators.states.AnimationStateBase"] = away3d.animators.states.AnimationStateBase;
away3d.animators.states.AnimationStateBase.__name__ = ["away3d","animators","states","AnimationStateBase"];
away3d.animators.states.AnimationStateBase.__interfaces__ = [away3d.animators.states.IAnimationState];
away3d.animators.states.AnimationStateBase.prototype = {
	get_positionDelta: function() {
		if(this._positionDeltaDirty) this.updatePositionDelta();
		return this._rootDelta;
	}
	,offset: function(startTime) {
		this._startTime = startTime;
		this._positionDeltaDirty = true;
	}
	,update: function(time) {
		if(this._time == time - this._startTime) return;
		this.updateTime(time);
	}
	,phase: function(value) {
	}
	,updateTime: function(time) {
		this._time = time - this._startTime;
		this._positionDeltaDirty = true;
	}
	,updatePositionDelta: function() {
	}
	,__class__: away3d.animators.states.AnimationStateBase
	,__properties__: {get_positionDelta:"get_positionDelta"}
};
away3d.animators.states.ParticleStateBase = function(animator,particleNode,needUpdateTime) {
	if(needUpdateTime == null) needUpdateTime = false;
	this._dynamicProperties = new Array();
	this._dynamicPropertiesDirty = new haxe.ds.ObjectMap();
	away3d.animators.states.AnimationStateBase.call(this,animator,particleNode);
	this._particleNode = particleNode;
	this._needUpdateTime = needUpdateTime;
};
$hxClasses["away3d.animators.states.ParticleStateBase"] = away3d.animators.states.ParticleStateBase;
away3d.animators.states.ParticleStateBase.__name__ = ["away3d","animators","states","ParticleStateBase"];
away3d.animators.states.ParticleStateBase.__super__ = away3d.animators.states.AnimationStateBase;
away3d.animators.states.ParticleStateBase.prototype = $extend(away3d.animators.states.AnimationStateBase.prototype,{
	get_needUpdateTime: function() {
		return this._needUpdateTime;
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
	}
	,updateDynamicProperties: function(animationSubGeometry) {
		this._dynamicPropertiesDirty.set(animationSubGeometry,true);
		var animationParticles = animationSubGeometry.animationParticles;
		var vertexData = animationSubGeometry.get_vertexData();
		var totalLenOfOneVertex = animationSubGeometry.get_totalLenOfOneVertex();
		var dataLength = this._particleNode.get_dataLength();
		var dataOffset = this._particleNode.dataOffset;
		var vertexLength;
		var startingOffset;
		var vertexOffset;
		var data;
		var animationParticle;
		var numParticles = this._dynamicProperties.length;
		var i = 0;
		var j = 0;
		var k = 0;
		while(i < numParticles) {
			while(j < numParticles && (animationParticle = animationParticles[j]).index == i) {
				data = this._dynamicProperties[i];
				vertexLength = animationParticle.numVertices * totalLenOfOneVertex;
				startingOffset = animationParticle.startVertexIndex * totalLenOfOneVertex + dataOffset;
				k = 0;
				while(k < vertexLength) {
					vertexOffset = startingOffset + k;
					k = 0;
					while(k < vertexLength) {
						vertexOffset = startingOffset + k;
						vertexData[vertexOffset++] = data.x;
						vertexData[vertexOffset++] = data.y;
						vertexData[vertexOffset++] = data.z;
						if(dataLength == 4) vertexData[vertexOffset++] = data.w;
						k += totalLenOfOneVertex;
					}
					k += totalLenOfOneVertex;
				}
				j++;
			}
			i++;
		}
		animationSubGeometry.invalidateBuffer();
	}
	,__class__: away3d.animators.states.ParticleStateBase
	,__properties__: $extend(away3d.animators.states.AnimationStateBase.prototype.__properties__,{get_needUpdateTime:"get_needUpdateTime"})
});
away3d.animators.states.ParticlePositionState = function(animator,particlePositionNode) {
	away3d.animators.states.ParticleStateBase.call(this,animator,particlePositionNode);
	this._particlePositionNode = particlePositionNode;
	this._position = this._particlePositionNode._position;
};
$hxClasses["away3d.animators.states.ParticlePositionState"] = away3d.animators.states.ParticlePositionState;
away3d.animators.states.ParticlePositionState.__name__ = ["away3d","animators","states","ParticlePositionState"];
away3d.animators.states.ParticlePositionState.__super__ = away3d.animators.states.ParticleStateBase;
away3d.animators.states.ParticlePositionState.prototype = $extend(away3d.animators.states.ParticleStateBase.prototype,{
	get_position: function() {
		return this._position;
	}
	,set_position: function(value) {
		this._position = value;
		return value;
	}
	,getPositions: function() {
		return this._dynamicProperties;
	}
	,setPositions: function(value) {
		this._dynamicProperties = value;
		this._dynamicPropertiesDirty = new haxe.ds.ObjectMap();
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		if(this._particlePositionNode.get_mode() == away3d.animators.data.ParticlePropertiesMode.LOCAL_DYNAMIC && !this._dynamicPropertiesDirty.h[animationSubGeometry.__id__]) this.updateDynamicProperties(animationSubGeometry);
		var index = animationRegisterCache.getRegisterIndex(this._animationNode,away3d.animators.nodes.ParticlePositionNode.POSITION_INDEX);
		if(this._particlePositionNode.get_mode() == away3d.animators.data.ParticlePropertiesMode.GLOBAL) animationRegisterCache.setVertexConst(index,this._position.x,this._position.y,this._position.z); else animationSubGeometry.activateVertexBuffer(index,this._particlePositionNode.dataOffset,stage3DProxy,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,__class__: away3d.animators.states.ParticlePositionState
	,__properties__: $extend(away3d.animators.states.ParticleStateBase.prototype.__properties__,{set_position:"set_position",get_position:"get_position"})
});
away3d.animators.states.ParticleTimeState = function(animator,particleTimeNode) {
	away3d.animators.states.ParticleStateBase.call(this,animator,particleTimeNode,true);
	this._particleTimeNode = particleTimeNode;
};
$hxClasses["away3d.animators.states.ParticleTimeState"] = away3d.animators.states.ParticleTimeState;
away3d.animators.states.ParticleTimeState.__name__ = ["away3d","animators","states","ParticleTimeState"];
away3d.animators.states.ParticleTimeState.__super__ = away3d.animators.states.ParticleStateBase;
away3d.animators.states.ParticleTimeState.prototype = $extend(away3d.animators.states.ParticleStateBase.prototype,{
	setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,away3d.animators.nodes.ParticleTimeNode.TIME_STREAM_INDEX),this._particleTimeNode.dataOffset,stage3DProxy,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4);
		var particleTime = this._time / 1000;
		animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,away3d.animators.nodes.ParticleTimeNode.TIME_CONSTANT_INDEX),particleTime,particleTime,particleTime,particleTime);
	}
	,__class__: away3d.animators.states.ParticleTimeState
});
away3d.animators.states.ParticleVelocityState = function(animator,particleVelocityNode) {
	away3d.animators.states.ParticleStateBase.call(this,animator,particleVelocityNode);
	this._particleVelocityNode = particleVelocityNode;
	this._velocity = this._particleVelocityNode._velocity;
};
$hxClasses["away3d.animators.states.ParticleVelocityState"] = away3d.animators.states.ParticleVelocityState;
away3d.animators.states.ParticleVelocityState.__name__ = ["away3d","animators","states","ParticleVelocityState"];
away3d.animators.states.ParticleVelocityState.__super__ = away3d.animators.states.ParticleStateBase;
away3d.animators.states.ParticleVelocityState.prototype = $extend(away3d.animators.states.ParticleStateBase.prototype,{
	get_velocity: function() {
		return this._velocity;
	}
	,set_velocity: function(value) {
		this._velocity = value;
		return value;
	}
	,getVelocities: function() {
		return this._dynamicProperties;
	}
	,setVelocities: function(value) {
		this._dynamicProperties = value;
		this._dynamicPropertiesDirty = new haxe.ds.ObjectMap();
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		if(this._particleVelocityNode.get_mode() == away3d.animators.data.ParticlePropertiesMode.LOCAL_DYNAMIC && this._dynamicPropertiesDirty.h[animationSubGeometry.__id__] == null) this.updateDynamicProperties(animationSubGeometry);
		var index = animationRegisterCache.getRegisterIndex(this._animationNode,away3d.animators.nodes.ParticleVelocityNode.VELOCITY_INDEX);
		if(this._particleVelocityNode.get_mode() == away3d.animators.data.ParticlePropertiesMode.GLOBAL) animationRegisterCache.setVertexConst(index,this._velocity.x,this._velocity.y,this._velocity.z); else animationSubGeometry.activateVertexBuffer(index,this._particleVelocityNode.dataOffset,stage3DProxy,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,__class__: away3d.animators.states.ParticleVelocityState
	,__properties__: $extend(away3d.animators.states.ParticleStateBase.prototype.__properties__,{set_velocity:"set_velocity",get_velocity:"get_velocity"})
});
away3d.bounds = {};
away3d.bounds.BoundingVolumeBase = function() {
	var value = new Array();
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this._aabbPoints = vectorData;
	this._aabbPointsDirty = true;
	this._min = new openfl.geom.Vector3D();
	this._max = new openfl.geom.Vector3D();
};
$hxClasses["away3d.bounds.BoundingVolumeBase"] = away3d.bounds.BoundingVolumeBase;
away3d.bounds.BoundingVolumeBase.__name__ = ["away3d","bounds","BoundingVolumeBase"];
away3d.bounds.BoundingVolumeBase.prototype = {
	get_max: function() {
		return this._max;
	}
	,get_min: function() {
		return this._min;
	}
	,get_aabbPoints: function() {
		if(this._aabbPointsDirty) this.updateAABBPoints();
		var this1 = this._aabbPoints;
		var value = new Array();
		var _g1 = 0;
		var _g = this1.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			value.push(this1.data[i]);
		}
		return value;
	}
	,get_boundingRenderable: function() {
		if(this._boundingRenderable == null) {
			this._boundingRenderable = this.createBoundingRenderable();
			this.updateBoundingRenderable();
		}
		return this._boundingRenderable;
	}
	,nullify: function() {
		this._min.x = this._min.y = this._min.z = 0;
		this._max.x = this._max.y = this._max.z = 0;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,disposeRenderable: function() {
		if(this._boundingRenderable != null) this._boundingRenderable.dispose();
		this._boundingRenderable = null;
	}
	,fromVertices: function(vertices) {
		var i = 0;
		var len = vertices.length;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(len == 0) {
			this.nullify();
			return;
		}
		var v;
		minX = maxX = vertices[i++];
		minY = maxY = vertices[i++];
		minZ = maxZ = vertices[i++];
		while(i < len) {
			v = vertices[i++];
			if(v < minX) minX = v; else if(v > maxX) maxX = v;
			v = vertices[i++];
			if(v < minY) minY = v; else if(v > maxY) maxY = v;
			v = vertices[i++];
			if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
		}
		this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
	}
	,fromGeometry: function(geometry) {
		var subGeoms = geometry.get_subGeometries();
		var numSubGeoms = subGeoms.length;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(numSubGeoms > 0) {
			var j = 0;
			minX = minY = minZ = Math.POSITIVE_INFINITY;
			maxX = maxY = maxZ = Math.NEGATIVE_INFINITY;
			while(j < numSubGeoms) {
				var subGeom = subGeoms[j++];
				var vertices = subGeom.get_vertexData();
				var vertexDataLen = vertices.length;
				var i = subGeom.get_vertexOffset();
				var stride = subGeom.get_vertexStride();
				while(i < vertexDataLen) {
					var v = vertices[i];
					if(v < minX) minX = v; else if(v > maxX) maxX = v;
					v = vertices[i + 1];
					if(v < minY) minY = v; else if(v > maxY) maxY = v;
					v = vertices[i + 2];
					if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
					i += stride;
				}
			}
			this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
		} else this.fromExtremes(0,0,0,0,0,0);
	}
	,fromSphere: function(center,radius) {
		this.fromExtremes(center.x - radius,center.y - radius,center.z - radius,center.x + radius,center.y + radius,center.z + radius);
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._min.x = minX;
		this._min.y = minY;
		this._min.z = minZ;
		this._max.x = maxX;
		this._max.y = maxY;
		this._max.z = maxZ;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,isInFrustum: function(planes,numPlanes) {
		throw new away3d.errors.AbstractMethodError();
		return false;
	}
	,overlaps: function(bounds) {
		var min = bounds._min;
		var max = bounds._max;
		return this._max.x > min.x && this._min.x < max.x && this._max.y > min.y && this._min.y < max.y && this._max.z > min.z && this._min.z < max.z;
	}
	,clone: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		return -1;
	}
	,containsPoint: function(position) {
		return false;
	}
	,updateAABBPoints: function() {
		var maxX = this._max.x;
		var maxY = this._max.y;
		var maxZ = this._max.z;
		var minX = this._min.x;
		var minY = this._min.y;
		var minZ = this._min.z;
		var this1 = this._aabbPoints;
		if(0 >= this1.length && !this1.fixed) this1.length = 1;
		this1.data[0] = minX;
		var this2 = this._aabbPoints;
		if(1 >= this2.length && !this2.fixed) this2.length = 2;
		this2.data[1] = minY;
		var this3 = this._aabbPoints;
		if(2 >= this3.length && !this3.fixed) this3.length = 3;
		this3.data[2] = minZ;
		var this4 = this._aabbPoints;
		if(3 >= this4.length && !this4.fixed) this4.length = 4;
		this4.data[3] = maxX;
		var this5 = this._aabbPoints;
		if(4 >= this5.length && !this5.fixed) this5.length = 5;
		this5.data[4] = minY;
		var this6 = this._aabbPoints;
		if(5 >= this6.length && !this6.fixed) this6.length = 6;
		this6.data[5] = minZ;
		var this7 = this._aabbPoints;
		if(6 >= this7.length && !this7.fixed) this7.length = 7;
		this7.data[6] = minX;
		var this8 = this._aabbPoints;
		if(7 >= this8.length && !this8.fixed) this8.length = 8;
		this8.data[7] = maxY;
		var this9 = this._aabbPoints;
		if(8 >= this9.length && !this9.fixed) this9.length = 9;
		this9.data[8] = minZ;
		var this10 = this._aabbPoints;
		if(9 >= this10.length && !this10.fixed) this10.length = 10;
		this10.data[9] = maxX;
		var this11 = this._aabbPoints;
		if(10 >= this11.length && !this11.fixed) this11.length = 11;
		this11.data[10] = maxY;
		var this12 = this._aabbPoints;
		if(11 >= this12.length && !this12.fixed) this12.length = 12;
		this12.data[11] = minZ;
		var this13 = this._aabbPoints;
		if(12 >= this13.length && !this13.fixed) this13.length = 13;
		this13.data[12] = minX;
		var this14 = this._aabbPoints;
		if(13 >= this14.length && !this14.fixed) this14.length = 14;
		this14.data[13] = minY;
		var this15 = this._aabbPoints;
		if(14 >= this15.length && !this15.fixed) this15.length = 15;
		this15.data[14] = maxZ;
		var this16 = this._aabbPoints;
		if(15 >= this16.length && !this16.fixed) this16.length = 16;
		this16.data[15] = maxX;
		var this17 = this._aabbPoints;
		if(16 >= this17.length && !this17.fixed) this17.length = 17;
		this17.data[16] = minY;
		var this18 = this._aabbPoints;
		if(17 >= this18.length && !this18.fixed) this18.length = 18;
		this18.data[17] = maxZ;
		var this19 = this._aabbPoints;
		if(18 >= this19.length && !this19.fixed) this19.length = 19;
		this19.data[18] = minX;
		var this20 = this._aabbPoints;
		if(19 >= this20.length && !this20.fixed) this20.length = 20;
		this20.data[19] = maxY;
		var this21 = this._aabbPoints;
		if(20 >= this21.length && !this21.fixed) this21.length = 21;
		this21.data[20] = maxZ;
		var this22 = this._aabbPoints;
		if(21 >= this22.length && !this22.fixed) this22.length = 22;
		this22.data[21] = maxX;
		var this23 = this._aabbPoints;
		if(22 >= this23.length && !this23.fixed) this23.length = 23;
		this23.data[22] = maxY;
		var this24 = this._aabbPoints;
		if(23 >= this24.length && !this24.fixed) this24.length = 24;
		this24.data[23] = maxZ;
		this._aabbPointsDirty = false;
	}
	,updateBoundingRenderable: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,createBoundingRenderable: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,classifyToPlane: function(plane) {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,transformFrom: function(bounds,matrix) {
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.bounds.BoundingVolumeBase
	,__properties__: {get_boundingRenderable:"get_boundingRenderable",get_aabbPoints:"get_aabbPoints",get_min:"get_min",get_max:"get_max"}
};
away3d.bounds.AxisAlignedBoundingBox = function() {
	this._centerX = 0;
	this._centerY = 0;
	this._centerZ = 0;
	this._halfExtentsX = 0;
	this._halfExtentsY = 0;
	this._halfExtentsZ = 0;
	away3d.bounds.BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.AxisAlignedBoundingBox"] = away3d.bounds.AxisAlignedBoundingBox;
away3d.bounds.AxisAlignedBoundingBox.__name__ = ["away3d","bounds","AxisAlignedBoundingBox"];
away3d.bounds.AxisAlignedBoundingBox.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.AxisAlignedBoundingBox.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	nullify: function() {
		away3d.bounds.BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._halfExtentsX = this._halfExtentsY = this._halfExtentsZ = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var i = 0;
		while(i < numPlanes) {
			var plane = planes[i];
			var a = plane.a;
			var b = plane.b;
			var c = plane.c;
			var flippedExtentX;
			if(a < 0) flippedExtentX = -this._halfExtentsX; else flippedExtentX = this._halfExtentsX;
			var flippedExtentY;
			if(b < 0) flippedExtentY = -this._halfExtentsY; else flippedExtentY = this._halfExtentsY;
			var flippedExtentZ;
			if(c < 0) flippedExtentZ = -this._halfExtentsZ; else flippedExtentZ = this._halfExtentsZ;
			var projDist = a * (this._centerX + flippedExtentX) + b * (this._centerY + flippedExtentY) + c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) return false;
			++i;
		}
		return true;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) return 0;
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var ix;
		var iy;
		var iz;
		var rayEntryDistance = 0;
		var intersects = false;
		if(vx < 0) {
			rayEntryDistance = (this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vx > 0) {
			rayEntryDistance = (-this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = -1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy < 0) {
			rayEntryDistance = (this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = 1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy > 0) {
			rayEntryDistance = (-this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = -1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vz < 0) {
			rayEntryDistance = (this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = 1;
					intersects = true;
				}
			}
		}
		if(!intersects && vz > 0) {
			rayEntryDistance = (-this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = -1;
					intersects = true;
				}
			}
		}
		if(intersects) return rayEntryDistance; else return -1;
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		return px <= this._halfExtentsX && px >= -this._halfExtentsX && py <= this._halfExtentsY && py >= -this._halfExtentsY && pz <= this._halfExtentsZ && pz >= -this._halfExtentsZ;
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		this._halfExtentsX = (maxX - minX) * .5;
		this._halfExtentsY = (maxY - minY) * .5;
		this._halfExtentsZ = (maxZ - minZ) * .5;
		away3d.bounds.BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d.bounds.AxisAlignedBoundingBox();
		clone.fromExtremes(this._min.x,this._min.y,this._min.z,this._max.x,this._max.y,this._max.z);
		return clone;
	}
	,get_halfExtentsX: function() {
		return this._halfExtentsX;
	}
	,get_halfExtentsY: function() {
		return this._halfExtentsY;
	}
	,get_halfExtentsZ: function() {
		return this._halfExtentsZ;
	}
	,closestPointToPoint: function(point,target) {
		var p;
		if(target == null) target = new openfl.geom.Vector3D();
		p = point.x;
		if(p < this._min.x) p = this._min.x;
		if(p > this._max.x) p = this._max.x;
		target.x = p;
		p = point.y;
		if(p < this._min.y) p = this._min.y;
		if(p > this._max.y) p = this._max.y;
		target.y = p;
		p = point.z;
		if(p < this._min.z) p = this._min.z;
		if(p > this._max.z) p = this._max.z;
		target.z = p;
		return target;
	}
	,updateBoundingRenderable: function() {
		this._boundingRenderable.set_scaleX(Math.max(this._halfExtentsX * 2,0.001));
		this._boundingRenderable.set_scaleY(Math.max(this._halfExtentsY * 2,0.001));
		this._boundingRenderable.set_scaleZ(Math.max(this._halfExtentsZ * 2,0.001));
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d.primitives.WireframeCube(1,1,1,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var centerDistance = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) a = -a;
		if(b < 0) b = -b;
		if(c < 0) c = -c;
		var boundOffset = a * this._halfExtentsX + b * this._halfExtentsY + c * this._halfExtentsZ;
		if(centerDistance > boundOffset) return away3d.core.math.PlaneClassification.FRONT; else if(centerDistance < -boundOffset) return away3d.core.math.PlaneClassification.BACK; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		var aabb;
		aabb = js.Boot.__cast(bounds , away3d.bounds.AxisAlignedBoundingBox);
		var cx = aabb._centerX;
		var cy = aabb._centerY;
		var cz = aabb._centerZ;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		matrix.copyRawDataTo(raw);
		var m11 = raw.data[0];
		var m12 = raw.data[4];
		var m13 = raw.data[8];
		var m14 = raw.data[12];
		var m21 = raw.data[1];
		var m22 = raw.data[5];
		var m23 = raw.data[9];
		var m24 = raw.data[13];
		var m31 = raw.data[2];
		var m32 = raw.data[6];
		var m33 = raw.data[10];
		var m34 = raw.data[14];
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) m11 = -m11;
		if(m12 < 0) m12 = -m12;
		if(m13 < 0) m13 = -m13;
		if(m21 < 0) m21 = -m21;
		if(m22 < 0) m22 = -m22;
		if(m23 < 0) m23 = -m23;
		if(m31 < 0) m31 = -m31;
		if(m32 < 0) m32 = -m32;
		if(m33 < 0) m33 = -m33;
		var hx = aabb._halfExtentsX;
		var hy = aabb._halfExtentsY;
		var hz = aabb._halfExtentsZ;
		this._halfExtentsX = hx * m11 + hy * m12 + hz * m13;
		this._halfExtentsY = hx * m21 + hy * m22 + hz * m23;
		this._halfExtentsZ = hx * m31 + hy * m32 + hz * m33;
		this._min.x = this._centerX - this._halfExtentsX;
		this._min.y = this._centerY - this._halfExtentsY;
		this._min.z = this._centerZ - this._halfExtentsZ;
		this._max.x = this._centerX + this._halfExtentsX;
		this._max.y = this._centerY + this._halfExtentsY;
		this._max.z = this._centerZ + this._halfExtentsZ;
	}
	,__class__: away3d.bounds.AxisAlignedBoundingBox
	,__properties__: $extend(away3d.bounds.BoundingVolumeBase.prototype.__properties__,{get_halfExtentsZ:"get_halfExtentsZ",get_halfExtentsY:"get_halfExtentsY",get_halfExtentsX:"get_halfExtentsX"})
});
away3d.bounds.BoundingSphere = function() {
	this._radius = 0;
	this._centerX = 0;
	this._centerY = 0;
	this._centerZ = 0;
	away3d.bounds.BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.BoundingSphere"] = away3d.bounds.BoundingSphere;
away3d.bounds.BoundingSphere.__name__ = ["away3d","bounds","BoundingSphere"];
away3d.bounds.BoundingSphere.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.BoundingSphere.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	get_radius: function() {
		return this._radius;
	}
	,nullify: function() {
		away3d.bounds.BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._radius = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var i = 0;
		while(i < numPlanes) {
			var plane = planes[i];
			var flippedExtentX;
			if(plane.a < 0) flippedExtentX = -this._radius; else flippedExtentX = this._radius;
			var flippedExtentY;
			if(plane.b < 0) flippedExtentY = -this._radius; else flippedExtentY = this._radius;
			var flippedExtentZ;
			if(plane.c < 0) flippedExtentZ = -this._radius; else flippedExtentZ = this._radius;
			var projDist = plane.a * (this._centerX + flippedExtentX) + plane.b * (this._centerY + flippedExtentY) + plane.c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) return false;
			++i;
		}
		return true;
	}
	,fromSphere: function(center,radius) {
		this._centerX = center.x;
		this._centerY = center.y;
		this._centerZ = center.z;
		this._radius = radius;
		this._max.x = this._centerX + radius;
		this._max.y = this._centerY + radius;
		this._max.z = this._centerZ + radius;
		this._min.x = this._centerX - radius;
		this._min.y = this._centerY - radius;
		this._min.z = this._centerZ - radius;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		var d = maxX - minX;
		var y = maxY - minY;
		var z = maxZ - minZ;
		if(y > d) d = y;
		if(z > d) d = z;
		this._radius = d * Math.sqrt(.5);
		away3d.bounds.BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d.bounds.BoundingSphere();
		clone.fromSphere(new openfl.geom.Vector3D(this._centerX,this._centerY,this._centerZ),this._radius);
		return clone;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) return 0;
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var rayEntryDistance;
		var a = vx * vx + vy * vy + vz * vz;
		var b = 2 * (px * vx + py * vy + pz * vz);
		var c = px * px + py * py + pz * pz - this._radius * this._radius;
		var det = b * b - 4 * a * c;
		if(det >= 0) {
			var sqrtDet = Math.sqrt(det);
			rayEntryDistance = (-b - sqrtDet) / (2 * a);
			if(rayEntryDistance >= 0) {
				targetNormal.x = px + rayEntryDistance * vx;
				targetNormal.y = py + rayEntryDistance * vy;
				targetNormal.z = pz + rayEntryDistance * vz;
				targetNormal.normalize();
				return rayEntryDistance;
			}
		}
		return -1;
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var distance = Math.sqrt(px * px + py * py + pz * pz);
		return distance <= this._radius;
	}
	,updateBoundingRenderable: function() {
		var sc = this._radius;
		if(sc == 0) sc = 0.001;
		this._boundingRenderable.set_scaleX(sc);
		this._boundingRenderable.set_scaleY(sc);
		this._boundingRenderable.set_scaleZ(sc);
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d.primitives.WireframeSphere(1,16,12,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var dd = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) a = -a;
		if(b < 0) b = -b;
		if(c < 0) c = -c;
		var rr = (a + b + c) * this._radius;
		if(dd > rr) return away3d.core.math.PlaneClassification.FRONT; else if(dd < -rr) return away3d.core.math.PlaneClassification.BACK; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		var sphere;
		sphere = js.Boot.__cast(bounds , away3d.bounds.BoundingSphere);
		var cx = sphere._centerX;
		var cy = sphere._centerY;
		var cz = sphere._centerZ;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		matrix.copyRawDataTo(raw);
		var m11 = raw.data[0];
		var m12 = raw.data[4];
		var m13 = raw.data[8];
		var m14 = raw.data[12];
		var m21 = raw.data[1];
		var m22 = raw.data[5];
		var m23 = raw.data[9];
		var m24 = raw.data[13];
		var m31 = raw.data[2];
		var m32 = raw.data[6];
		var m33 = raw.data[10];
		var m34 = raw.data[14];
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) m11 = -m11;
		if(m12 < 0) m12 = -m12;
		if(m13 < 0) m13 = -m13;
		if(m21 < 0) m21 = -m21;
		if(m22 < 0) m22 = -m22;
		if(m23 < 0) m23 = -m23;
		if(m31 < 0) m31 = -m31;
		if(m32 < 0) m32 = -m32;
		if(m33 < 0) m33 = -m33;
		var r = sphere._radius;
		var rx = m11 + m12 + m13;
		var ry = m21 + m22 + m23;
		var rz = m31 + m32 + m33;
		this._radius = r * Math.sqrt(rx * rx + ry * ry + rz * rz);
		this._min.x = this._centerX - this._radius;
		this._min.y = this._centerY - this._radius;
		this._min.z = this._centerZ - this._radius;
		this._max.x = this._centerX + this._radius;
		this._max.y = this._centerY + this._radius;
		this._max.z = this._centerZ + this._radius;
	}
	,__class__: away3d.bounds.BoundingSphere
	,__properties__: $extend(away3d.bounds.BoundingVolumeBase.prototype.__properties__,{get_radius:"get_radius"})
});
away3d.bounds.NullBounds = function(alwaysIn,renderable) {
	if(alwaysIn == null) alwaysIn = true;
	away3d.bounds.BoundingVolumeBase.call(this);
	this._alwaysIn = alwaysIn;
	this._renderable = renderable;
	this._max.x = this._max.y = this._max.z = Math.POSITIVE_INFINITY;
	this._min.x = this._min.y = this._alwaysIn?this._min.z = Math.NEGATIVE_INFINITY:this._min.z = Math.POSITIVE_INFINITY;
};
$hxClasses["away3d.bounds.NullBounds"] = away3d.bounds.NullBounds;
away3d.bounds.NullBounds.__name__ = ["away3d","bounds","NullBounds"];
away3d.bounds.NullBounds.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.NullBounds.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	clone: function() {
		return new away3d.bounds.NullBounds(this._alwaysIn);
	}
	,createBoundingRenderable: function() {
		if(this._renderable != null) return this._renderable; else return new away3d.primitives.WireframeSphere(100,16,12,16777215,0.5);
	}
	,isInFrustum: function(planes,numPlanes) {
		return this._alwaysIn;
	}
	,fromGeometry: function(geometry) {
	}
	,fromSphere: function(center,radius) {
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
	}
	,classifyToPlane: function(plane) {
		return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		this._alwaysIn = (js.Boot.__cast(bounds , away3d.bounds.NullBounds))._alwaysIn;
	}
	,__class__: away3d.bounds.NullBounds
});
away3d.cameras = {};
away3d.cameras.Camera3D = function(lens) {
	this._viewProjection = new openfl.geom.Matrix3D();
	this._viewProjectionDirty = true;
	this._frustumPlanesDirty = true;
	away3d.entities.Entity.call(this);
	this._lens = lens;
	if(this._lens == null) this._lens = new away3d.cameras.lenses.PerspectiveLens();
	this._lens.addEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
	this._frustumPlanes = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),6);
	var i = 0;
	while(i < 6) {
		this._frustumPlanes[i] = new away3d.core.math.Plane3D();
		++i;
	}
	this.set_z(-1000);
};
$hxClasses["away3d.cameras.Camera3D"] = away3d.cameras.Camera3D;
away3d.cameras.Camera3D.__name__ = ["away3d","cameras","Camera3D"];
away3d.cameras.Camera3D.__super__ = away3d.entities.Entity;
away3d.cameras.Camera3D.prototype = $extend(away3d.entities.Entity.prototype,{
	getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.CAMERA;
	}
	,onLensMatrixChanged: function(event) {
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
		this.dispatchEvent(event);
	}
	,get_frustumPlanes: function() {
		if(this._frustumPlanesDirty) this.updateFrustum();
		return this._frustumPlanes;
	}
	,updateFrustum: function() {
		var a;
		var b;
		var c;
		var c11;
		var c12;
		var c13;
		var c14;
		var c21;
		var c22;
		var c23;
		var c24;
		var c31;
		var c32;
		var c33;
		var c34;
		var c41;
		var c42;
		var c43;
		var c44;
		var p;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var invLen;
		this.get_viewProjection().copyRawDataTo(raw);
		c11 = raw.data[0];
		c12 = raw.data[4];
		c13 = raw.data[8];
		c14 = raw.data[12];
		c21 = raw.data[1];
		c22 = raw.data[5];
		c23 = raw.data[9];
		c24 = raw.data[13];
		c31 = raw.data[2];
		c32 = raw.data[6];
		c33 = raw.data[10];
		c34 = raw.data[14];
		c41 = raw.data[3];
		c42 = raw.data[7];
		c43 = raw.data[11];
		c44 = raw.data[15];
		p = this._frustumPlanes[0];
		a = c41 + c11;
		b = c42 + c12;
		c = c43 + c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c14) * invLen;
		p = this._frustumPlanes[1];
		a = c41 - c11;
		b = c42 - c12;
		c = c43 - c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c14 - c44) * invLen;
		p = this._frustumPlanes[2];
		a = c41 + c21;
		b = c42 + c22;
		c = c43 + c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c24) * invLen;
		p = this._frustumPlanes[3];
		a = c41 - c21;
		b = c42 - c22;
		c = c43 - c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c24 - c44) * invLen;
		p = this._frustumPlanes[4];
		a = c31;
		b = c32;
		c = c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -c34 * invLen;
		p = this._frustumPlanes[5];
		a = c41 - c31;
		b = c42 - c32;
		c = c43 - c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c34 - c44) * invLen;
		this._frustumPlanesDirty = false;
	}
	,invalidateSceneTransform: function() {
		away3d.entities.Entity.prototype.invalidateSceneTransform.call(this);
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
	}
	,updateBounds: function() {
		this._bounds.nullify();
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.CameraNode(this);
	}
	,get_lens: function() {
		return this._lens;
	}
	,set_lens: function(value) {
		if(this._lens == value) return value;
		if(value == null) throw new openfl.errors.Error("Lens cannot be null!");
		this._lens.removeEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
		this._lens = value;
		this._lens.addEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
		this.dispatchEvent(new away3d.events.CameraEvent(away3d.events.CameraEvent.LENS_CHANGED,this));
		return value;
	}
	,get_viewProjection: function() {
		if(this._viewProjectionDirty) {
			this._viewProjection.copyFrom(this.get_inverseSceneTransform());
			this._viewProjection.append(this._lens.get_matrix());
			this._viewProjectionDirty = false;
		}
		return this._viewProjection;
	}
	,unproject: function(nX,nY,sZ) {
		return this.get_sceneTransform().transformVector(this.get_lens().unproject(nX,nY,sZ));
	}
	,getRay: function(nX,nY,sZ) {
		return this.get_sceneTransform().deltaTransformVector(this.get_lens().unproject(nX,nY,sZ));
	}
	,project: function(point3d) {
		return this.get_lens().project(this.get_inverseSceneTransform().transformVector(point3d));
	}
	,__class__: away3d.cameras.Camera3D
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{get_viewProjection:"get_viewProjection",set_lens:"set_lens",get_lens:"get_lens",get_frustumPlanes:"get_frustumPlanes"})
});
away3d.cameras.lenses = {};
away3d.cameras.lenses.LensBase = function() {
	openfl.events.EventDispatcher.call(this);
	this._scissorRect = new openfl.geom.Rectangle();
	this._viewPort = new openfl.geom.Rectangle();
	this._near = 20;
	this._far = 3000;
	this._aspectRatio = 1;
	this._matrixInvalid = true;
	this._frustumCorners = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),24,0);
	this._unprojectionInvalid = true;
	this._matrix = new openfl.geom.Matrix3D();
};
$hxClasses["away3d.cameras.lenses.LensBase"] = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.LensBase.__name__ = ["away3d","cameras","lenses","LensBase"];
away3d.cameras.lenses.LensBase.__super__ = openfl.events.EventDispatcher;
away3d.cameras.lenses.LensBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_frustumCorners: function() {
		return this._frustumCorners;
	}
	,set_frustumCorners: function(frustumCorners) {
		this._frustumCorners = frustumCorners;
		return frustumCorners;
	}
	,get_matrix: function() {
		if(this._matrixInvalid) {
			this.updateMatrix();
			this._matrixInvalid = false;
		}
		return this._matrix;
	}
	,set_matrix: function(value) {
		this._matrix = value;
		this.invalidateMatrix();
		return value;
	}
	,get_near: function() {
		return this._near;
	}
	,set_near: function(value) {
		if(value == this._near) return value;
		this._near = value;
		this.invalidateMatrix();
		return value;
	}
	,get_far: function() {
		return this._far;
	}
	,set_far: function(value) {
		if(value == this._far) return value;
		this._far = value;
		this.invalidateMatrix();
		return value;
	}
	,project: function(point3d) {
		var v = this.get_matrix().transformVector(point3d);
		v.x = v.x / v.w;
		v.y = -v.y / v.w;
		v.z = point3d.z;
		return v;
	}
	,get_unprojectionMatrix: function() {
		if(this._unprojectionInvalid) {
			if(this._unprojection == null) this._unprojection = new openfl.geom.Matrix3D();
			this._unprojection.copyFrom(this.get_matrix());
			this._unprojection.invert();
			this._unprojectionInvalid = false;
		}
		return this._unprojection;
	}
	,unproject: function(nX,nY,sZ) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,clone: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_aspectRatio: function() {
		return this._aspectRatio;
	}
	,set_aspectRatio: function(value) {
		if(this._aspectRatio == value || value * 0 != 0) return value;
		this._aspectRatio = value;
		this.invalidateMatrix();
		return value;
	}
	,invalidateMatrix: function() {
		this._matrixInvalid = true;
		this._unprojectionInvalid = true;
		this.dispatchEvent(new away3d.events.LensEvent(away3d.events.LensEvent.MATRIX_CHANGED,this));
	}
	,updateMatrix: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,updateScissorRect: function(x,y,width,height) {
		this._scissorRect.x = x;
		this._scissorRect.y = y;
		this._scissorRect.width = width;
		this._scissorRect.height = height;
		this.invalidateMatrix();
	}
	,updateViewport: function(x,y,width,height) {
		this._viewPort.x = x;
		this._viewPort.y = y;
		this._viewPort.width = width;
		this._viewPort.height = height;
		this.invalidateMatrix();
	}
	,__class__: away3d.cameras.lenses.LensBase
	,__properties__: {set_aspectRatio:"set_aspectRatio",get_aspectRatio:"get_aspectRatio",get_unprojectionMatrix:"get_unprojectionMatrix",set_far:"set_far",get_far:"get_far",set_near:"set_near",get_near:"get_near",set_matrix:"set_matrix",get_matrix:"get_matrix",set_frustumCorners:"set_frustumCorners",get_frustumCorners:"get_frustumCorners"}
});
away3d.cameras.lenses.FreeMatrixLens = function() {
	away3d.cameras.lenses.LensBase.call(this);
	this._matrix.copyFrom(new away3d.cameras.lenses.PerspectiveLens().get_matrix());
};
$hxClasses["away3d.cameras.lenses.FreeMatrixLens"] = away3d.cameras.lenses.FreeMatrixLens;
away3d.cameras.lenses.FreeMatrixLens.__name__ = ["away3d","cameras","lenses","FreeMatrixLens"];
away3d.cameras.lenses.FreeMatrixLens.__super__ = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.FreeMatrixLens.prototype = $extend(away3d.cameras.lenses.LensBase.prototype,{
	set_near: function(value) {
		this._near = value;
		return value;
	}
	,set_far: function(value) {
		this._far = value;
		return value;
	}
	,set_aspectRatio: function(value) {
		this._aspectRatio = value;
		return value;
	}
	,clone: function() {
		var clone = new away3d.cameras.lenses.FreeMatrixLens();
		clone._matrix.copyFrom(this._matrix);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		clone.invalidateMatrix();
		return clone;
	}
	,updateMatrix: function() {
		this._matrixInvalid = false;
	}
	,__class__: away3d.cameras.lenses.FreeMatrixLens
});
away3d.cameras.lenses.PerspectiveLens = function(fieldOfView) {
	if(fieldOfView == null) fieldOfView = 60;
	away3d.cameras.lenses.LensBase.call(this);
	this.set_fieldOfView(fieldOfView);
};
$hxClasses["away3d.cameras.lenses.PerspectiveLens"] = away3d.cameras.lenses.PerspectiveLens;
away3d.cameras.lenses.PerspectiveLens.__name__ = ["away3d","cameras","lenses","PerspectiveLens"];
away3d.cameras.lenses.PerspectiveLens.__super__ = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.PerspectiveLens.prototype = $extend(away3d.cameras.lenses.LensBase.prototype,{
	get_fieldOfView: function() {
		return this._fieldOfView;
	}
	,set_fieldOfView: function(value) {
		if(value == this._fieldOfView) return value;
		this._fieldOfView = value;
		this._focalLengthInv = Math.tan(this._fieldOfView * Math.PI / 360);
		this._focalLength = 1 / this._focalLengthInv;
		this.invalidateMatrix();
		return value;
	}
	,get_focalLength: function() {
		return this._focalLength;
	}
	,set_focalLength: function(value) {
		if(value == this._focalLength) return value;
		this._focalLength = value;
		this._focalLengthInv = 1 / this._focalLength;
		this._fieldOfView = Math.atan(this._focalLengthInv) * 360 / Math.PI;
		this.invalidateMatrix();
		return value;
	}
	,unproject: function(nX,nY,sZ) {
		var v = new openfl.geom.Vector3D(nX,-nY,sZ,1.0);
		v.x *= sZ;
		v.y *= sZ;
		v = this.get_unprojectionMatrix().transformVector(v);
		v.z = sZ;
		return v;
	}
	,clone: function() {
		var clone = new away3d.cameras.lenses.PerspectiveLens(this._fieldOfView);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		return clone;
	}
	,updateMatrix: function() {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		this._yMax = this._near * this._focalLengthInv;
		this._xMax = this._yMax * this._aspectRatio;
		var left;
		var right;
		var top;
		var bottom;
		if(this._scissorRect.x == 0 && this._scissorRect.y == 0 && this._scissorRect.width == this._viewPort.width && this._scissorRect.height == this._viewPort.height) {
			left = -this._xMax;
			right = this._xMax;
			top = -this._yMax;
			bottom = this._yMax;
			if(0 >= raw.length && !raw.fixed) raw.length = 1;
			raw.data[0] = this._near / this._xMax;
			if(5 >= raw.length && !raw.fixed) raw.length = 6;
			raw.data[5] = this._near / this._yMax;
			if(10 >= raw.length && !raw.fixed) raw.length = 11;
			raw.data[10] = this._far / (this._far - this._near);
			if(11 >= raw.length && !raw.fixed) raw.length = 12;
			raw.data[11] = 1;
			var value;
			var value1;
			var value2;
			var value3;
			var value4;
			var value5;
			var value6;
			var value7;
			var value8;
			var value9;
			if(15 >= raw.length && !raw.fixed) raw.length = 16;
			value9 = raw.data[15] = 0;
			if(13 >= raw.length && !raw.fixed) raw.length = 14;
			value8 = raw.data[13] = value9;
			if(12 >= raw.length && !raw.fixed) raw.length = 13;
			value7 = raw.data[12] = value8;
			if(9 >= raw.length && !raw.fixed) raw.length = 10;
			value6 = raw.data[9] = value7;
			if(8 >= raw.length && !raw.fixed) raw.length = 9;
			value5 = raw.data[8] = value6;
			if(7 >= raw.length && !raw.fixed) raw.length = 8;
			value4 = raw.data[7] = value5;
			if(6 >= raw.length && !raw.fixed) raw.length = 7;
			value3 = raw.data[6] = value4;
			if(4 >= raw.length && !raw.fixed) raw.length = 5;
			value2 = raw.data[4] = value3;
			if(3 >= raw.length && !raw.fixed) raw.length = 4;
			value1 = raw.data[3] = value2;
			if(2 >= raw.length && !raw.fixed) raw.length = 3;
			value = raw.data[2] = value1;
			if(1 >= raw.length && !raw.fixed) raw.length = 2;
			raw.data[1] = value;
			if(14 >= raw.length && !raw.fixed) raw.length = 15;
			raw.data[14] = -this._near * raw.data[10];
		} else {
			var xWidth = this._xMax * (this._viewPort.width / this._scissorRect.width);
			var yHgt = this._yMax * (this._viewPort.height / this._scissorRect.height);
			var center = this._xMax * (this._scissorRect.x * 2 - this._viewPort.width) / this._scissorRect.width + this._xMax;
			var middle = -this._yMax * (this._scissorRect.y * 2 - this._viewPort.height) / this._scissorRect.height - this._yMax;
			left = center - xWidth;
			right = center + xWidth;
			top = middle - yHgt;
			bottom = middle + yHgt;
			if(0 >= raw.length && !raw.fixed) raw.length = 1;
			raw.data[0] = 2 * this._near / (right - left);
			if(5 >= raw.length && !raw.fixed) raw.length = 6;
			raw.data[5] = 2 * this._near / (bottom - top);
			if(8 >= raw.length && !raw.fixed) raw.length = 9;
			raw.data[8] = (right + left) / (right - left);
			if(9 >= raw.length && !raw.fixed) raw.length = 10;
			raw.data[9] = (bottom + top) / (bottom - top);
			if(10 >= raw.length && !raw.fixed) raw.length = 11;
			raw.data[10] = (this._far + this._near) / (this._far - this._near);
			if(11 >= raw.length && !raw.fixed) raw.length = 12;
			raw.data[11] = 1;
			var value10;
			var value11;
			var value12;
			var value13;
			var value14;
			var value15;
			var value16;
			var value17;
			if(15 >= raw.length && !raw.fixed) raw.length = 16;
			value17 = raw.data[15] = 0;
			if(13 >= raw.length && !raw.fixed) raw.length = 14;
			value16 = raw.data[13] = value17;
			if(12 >= raw.length && !raw.fixed) raw.length = 13;
			value15 = raw.data[12] = value16;
			if(7 >= raw.length && !raw.fixed) raw.length = 8;
			value14 = raw.data[7] = value15;
			if(6 >= raw.length && !raw.fixed) raw.length = 7;
			value13 = raw.data[6] = value14;
			if(4 >= raw.length && !raw.fixed) raw.length = 5;
			value12 = raw.data[4] = value13;
			if(3 >= raw.length && !raw.fixed) raw.length = 4;
			value11 = raw.data[3] = value12;
			if(2 >= raw.length && !raw.fixed) raw.length = 3;
			value10 = raw.data[2] = value11;
			if(1 >= raw.length && !raw.fixed) raw.length = 2;
			raw.data[1] = value10;
			if(14 >= raw.length && !raw.fixed) raw.length = 15;
			raw.data[14] = -2 * this._far * this._near / (this._far - this._near);
		}
		this._matrix.copyRawDataFrom(raw);
		var yMaxFar = this._far * this._focalLengthInv;
		var xMaxFar = yMaxFar * this._aspectRatio;
		this._frustumCorners[0] = this._frustumCorners[9] = left;
		this._frustumCorners[3] = this._frustumCorners[6] = right;
		this._frustumCorners[1] = this._frustumCorners[4] = top;
		this._frustumCorners[7] = this._frustumCorners[10] = bottom;
		this._frustumCorners[12] = this._frustumCorners[21] = -xMaxFar;
		this._frustumCorners[15] = this._frustumCorners[18] = xMaxFar;
		this._frustumCorners[13] = this._frustumCorners[16] = -yMaxFar;
		this._frustumCorners[19] = this._frustumCorners[22] = yMaxFar;
		this._frustumCorners[2] = this._frustumCorners[5] = this._frustumCorners[8] = this._frustumCorners[11] = this._near;
		this._frustumCorners[14] = this._frustumCorners[17] = this._frustumCorners[20] = this._frustumCorners[23] = this._far;
		this._matrixInvalid = false;
	}
	,__class__: away3d.cameras.lenses.PerspectiveLens
	,__properties__: $extend(away3d.cameras.lenses.LensBase.prototype.__properties__,{set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView"})
});
away3d.containers.Scene3D = function() {
	this._partitions = new Array();
	this._sceneGraphRoot = new away3d.containers.ObjectContainer3D();
	this._sceneGraphRoot.set_scene(this);
	this._sceneGraphRoot._isRoot = true;
	this._sceneGraphRoot.set_partition(new away3d.core.partition.Partition3D(new away3d.core.partition.NodeBase()));
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.containers.Scene3D"] = away3d.containers.Scene3D;
away3d.containers.Scene3D.__name__ = ["away3d","containers","Scene3D"];
away3d.containers.Scene3D.__super__ = openfl.events.EventDispatcher;
away3d.containers.Scene3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	traversePartitions: function(traverser) {
		var i = 0;
		var len = this._partitions.length;
		traverser.scene = this;
		while(i < len) this._partitions[i++].traverse(traverser);
	}
	,get_partition: function() {
		return this._sceneGraphRoot.get_partition();
	}
	,set_partition: function(value) {
		this._sceneGraphRoot.set_partition(value);
		this.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.PARTITION_CHANGED,this._sceneGraphRoot));
		return value;
	}
	,contains: function(child) {
		return this._sceneGraphRoot.contains(child);
	}
	,addChild: function(child) {
		return this._sceneGraphRoot.addChild(child);
	}
	,removeChild: function(child) {
		this._sceneGraphRoot.removeChild(child);
	}
	,removeChildAt: function(index) {
		this._sceneGraphRoot.removeChildAt(index);
	}
	,getChildAt: function(index) {
		return this._sceneGraphRoot.getChildAt(index);
	}
	,get_numChildren: function() {
		return this._sceneGraphRoot.get_numChildren();
	}
	,registerEntity: function(entity) {
		var partition = entity.get_implicitPartition();
		this.addPartitionUnique(partition);
		partition.markForUpdate(entity);
	}
	,unregisterEntity: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,invalidateEntityBounds: function(entity) {
		entity.get_implicitPartition().markForUpdate(entity);
	}
	,registerPartition: function(entity) {
		this.addPartitionUnique(entity.get_implicitPartition());
	}
	,unregisterPartition: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,addPartitionUnique: function(partition) {
		if(HxOverrides.indexOf(this._partitions,partition,0) == -1) this._partitions.push(partition);
	}
	,__class__: away3d.containers.Scene3D
	,__properties__: {get_numChildren:"get_numChildren",set_partition:"set_partition",get_partition:"get_partition"}
});
away3d.containers.View3D = function(scene,camera,renderer,forceSoftware,profile) {
	if(profile == null) profile = "baseline";
	if(forceSoftware == null) forceSoftware = false;
	this._layeredView = false;
	this._width = 0;
	this._height = 0;
	this._localPos = new openfl.geom.Point();
	this._globalPos = new openfl.geom.Point();
	openfl.display.Sprite.call(this);
	this._time = 0;
	this._backgroundColor = 0;
	this._backgroundAlpha = 1;
	this._depthTextureInvalid = true;
	this._backBufferInvalid = true;
	this._rightClickMenuEnabled = true;
	this._shareContext = false;
	this._scissorRectDirty = true;
	this._viewportDirty = true;
	this._layeredView = false;
	this._profile = profile;
	if(scene != null) this._scene = scene; else this._scene = new away3d.containers.Scene3D();
	this._scene.addEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
	if(camera != null) this._camera = camera; else this._camera = new away3d.cameras.Camera3D();
	if(renderer != null) this._renderer = renderer; else this._renderer = new away3d.core.render.DefaultRenderer();
	this._depthRenderer = new away3d.core.render.DepthRenderer();
	this._forceSoftware = forceSoftware;
	this._entityCollector = this._renderer.createEntityCollector();
	this._entityCollector.set_camera(this._camera);
	this._scissorRect = new openfl.geom.Rectangle();
	this.initHitField();
	this._mouse3DManager = new away3d.core.managers.Mouse3DManager();
	this._mouse3DManager.enableMouseListeners(this);
	this._touch3DManager = new away3d.core.managers.Touch3DManager();
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage),false,0,true);
	this.addEventListener(openfl.events.Event.ADDED,$bind(this,this.onAdded),false,0,true);
	this._camera.addEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
	this._camera.set_partition(this._scene.get_partition());
};
$hxClasses["away3d.containers.View3D"] = away3d.containers.View3D;
away3d.containers.View3D.__name__ = ["away3d","containers","View3D"];
away3d.containers.View3D.__super__ = openfl.display.Sprite;
away3d.containers.View3D.prototype = $extend(openfl.display.Sprite.prototype,{
	get_depthPrepass: function() {
		return this._depthPrepass;
	}
	,set_depthPrepass: function(value) {
		this._depthPrepass = value;
		return value;
	}
	,onScenePartitionChanged: function(event) {
		if(this._camera != null) this._camera.set_partition(this.get_scene().get_partition());
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(stage3DProxy) {
		if(this._stage3DProxy != null) this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		this._stage3DProxy = stage3DProxy;
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		this._globalPosDirty = true;
		this._backBufferInvalid = true;
		return this._stage3DProxy;
	}
	,get_forceMouseMove: function() {
		return this._mouse3DManager.get_forceMouseMove();
	}
	,set_forceMouseMove: function(value) {
		this._mouse3DManager.set_forceMouseMove(value);
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		this._background = value;
		this._renderer.set_background(this._background);
		return this._background;
	}
	,get_layeredView: function() {
		return this._layeredView;
	}
	,set_layeredView: function(value) {
		this._layeredView = value;
		return this._layeredView;
	}
	,initHitField: function() {
		this._hitField = new openfl.display.Sprite();
		this._hitField.set_alpha(0);
		this._hitField.doubleClickEnabled = true;
		this._hitField.get_graphics().beginFill(0);
		this._hitField.get_graphics().drawRect(0,0,100,100);
		this.addChild(this._hitField);
	}
	,get_filters3d: function() {
		if(this._filter3DRenderer != null) return this._filter3DRenderer.get_filters(); else return null;
	}
	,set_filters3d: function(value) {
		if(value != null && value.length == 0) value = null;
		if(this._filter3DRenderer != null && value == null) {
			this._filter3DRenderer.dispose();
			this._filter3DRenderer = null;
		} else if(this._filter3DRenderer == null && value != null) {
			this._filter3DRenderer = new away3d.core.render.Filter3DRenderer(this.get_stage3DProxy());
			this._filter3DRenderer.set_filters(value);
		}
		if(this._filter3DRenderer != null) {
			this._filter3DRenderer.set_filters(value);
			this._requireDepthRender = this._filter3DRenderer.get_requireDepthRender();
		} else {
			this._requireDepthRender = false;
			if(this._depthRender != null) {
				this._depthRender.dispose();
				this._depthRender = null;
			}
		}
		return value;
	}
	,get_renderer: function() {
		return this._renderer;
	}
	,set_renderer: function(value) {
		this._renderer.dispose();
		this._renderer = value;
		this._entityCollector = this._renderer.createEntityCollector();
		this._entityCollector.set_camera(this._camera);
		this._renderer.set_stage3DProxy(this._stage3DProxy);
		this._renderer.set_antiAlias(this._antiAlias);
		this._renderer.set_backgroundR((function($this) {
			var $r;
			var $int = $this._backgroundColor >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundG((function($this) {
			var $r;
			var int2 = $this._backgroundColor >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundB((function($this) {
			var $r;
			var int4 = $this._backgroundColor & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundAlpha(this._backgroundAlpha);
		this._renderer.set_viewWidth(this._width);
		this._renderer.set_viewHeight(this._height);
		this._backBufferInvalid = true;
		return this._renderer;
	}
	,get_backgroundColor: function() {
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		this._backgroundColor = value;
		this._renderer.set_backgroundR((function($this) {
			var $r;
			var $int = value >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundG((function($this) {
			var $r;
			var int2 = value >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundB((function($this) {
			var $r;
			var int4 = value & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)));
		return value;
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		this._renderer.set_backgroundAlpha(value);
		this._backgroundAlpha = value;
		return value;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(camera) {
		this._camera.removeEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
		this._camera = camera;
		this._entityCollector.set_camera(this._camera);
		if(this._scene != null) this._camera.set_partition(this._scene.get_partition());
		this._camera.addEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
		this._scissorRectDirty = true;
		this._viewportDirty = true;
		return camera;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(scene) {
		this._scene.removeEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
		this._scene = scene;
		this._scene.addEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
		if(this._camera != null) this._camera.set_partition(this._scene.get_partition());
		return this._scene;
	}
	,get_deltaTime: function() {
		return this._deltaTime;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) value = 2048;
		if(this._width == value) return value;
		if(this._rttBufferManager != null) this._rttBufferManager.set_viewWidth(value | 0);
		this._hitField.set_width(value);
		this._width = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewWidth(value);
		this._scissorRect.width = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) value = 2048;
		if(this._height == value) return value;
		if(this._rttBufferManager != null) this._rttBufferManager.set_viewHeight(value | 0);
		this._hitField.set_height(value);
		this._height = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewHeight(value);
		this._scissorRect.height = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,set_x: function(value) {
		if(this.get_x() == value) return this.get_x();
		this._localPos.x = openfl.display.Sprite.prototype.set_x.call(this,value);
		if(this.parent != null) this._globalPos.x = this.parent.localToGlobal(this._localPos).x; else this._globalPos.x = value;
		this._globalPosDirty = true;
		return this.get_x();
	}
	,set_y: function(value) {
		if(this.get_y() == value) return this.get_y();
		this._localPos.y = openfl.display.Sprite.prototype.set_y.call(this,value);
		if(this.parent != null) this._globalPos.y = this.parent.localToGlobal(this._localPos).y; else this._globalPos.y = value;
		this._globalPosDirty = true;
		return this.get_y();
	}
	,set_visible: function(value) {
		openfl.display.Sprite.prototype.set_visible.call(this,value);
		if(this._stage3DProxy != null && !this._shareContext) this._stage3DProxy.set_visible(value);
		return value;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(value) {
		this._antiAlias = value;
		this._renderer.set_antiAlias(value);
		this._backBufferInvalid = true;
		return this._antiAlias;
	}
	,get_renderedFacesCount: function() {
		return this._entityCollector.get_numTriangles();
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		if(this._shareContext == value) return value;
		this._shareContext = value;
		this._globalPosDirty = true;
		return value;
	}
	,updateBackBuffer: function() {
		if(this._stage3DProxy.get_context3D() != null && !this._shareContext) {
			if(this._width > 0 && this._height > 0) {
				if(this._stage3DProxy.get_usesSoftwareRendering()) {
					if(this._width > 2048) this._width = 2048;
					if(this._height > 2048) this._height = 2048;
				}
				this._stage3DProxy.configureBackBuffer(this._width | 0,this._height | 0,this._antiAlias,true);
				this._backBufferInvalid = false;
			} else {
				this.set_width(this.stage.stageWidth);
				this.set_height(this.stage.stageHeight);
			}
		}
	}
	,setRenderCallback: function(func) {
		if(this._stage3DProxy != null) this._stage3DProxy.setRenderCallback(func);
		this._callbackMethod = func;
	}
	,render: function() {
		if(!this.get_stage3DProxy().recoverFromDisposal()) {
			this._backBufferInvalid = true;
			return;
		}
		if(this._backBufferInvalid) this.updateBackBuffer();
		if(this._shareContext && this._layeredView) this.get_stage3DProxy().clearDepthBuffer();
		if(!this._parentIsStage) {
			var globalPos = this.parent.localToGlobal(this._localPos);
			if(this._globalPos.x != globalPos.x || this._globalPos.y != globalPos.y) {
				this._globalPos = globalPos;
				this._globalPosDirty = true;
			}
		}
		if(this._globalPosDirty) this.updateGlobalPos();
		this.updateTime();
		this.updateViewSizeData();
		this._entityCollector.clear();
		this._scene.traversePartitions(this._entityCollector);
		this._mouse3DManager.updateCollider(this);
		if(this._requireDepthRender) this.renderSceneDepthToTexture(this._entityCollector);
		if(this._depthPrepass) this.renderDepthPrepass(this._entityCollector);
		this._renderer.set_clearOnRender(!this._depthPrepass);
		if(this._filter3DRenderer != null && this._stage3DProxy._context3D != null) {
			this._renderer.render(this._entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
			this._filter3DRenderer.render(this._stage3DProxy,this.get_camera(),this._depthRender);
		} else {
			this._renderer.set_shareContext(this._shareContext);
			if(this._shareContext) this._renderer.render(this._entityCollector,null,this._scissorRect); else this._renderer.render(this._entityCollector);
		}
		if(!this._shareContext) {
			this.get_stage3DProxy().present();
			this._mouse3DManager.fireMouseEvents();
		}
		this._entityCollector.cleanUp();
		this.get_stage3DProxy().set_bufferClear(false);
	}
	,updateGlobalPos: function() {
		this._globalPosDirty = false;
		if(this._stage3DProxy == null) return;
		if(this._shareContext) {
			this._scissorRect.x = this._globalPos.x - this._stage3DProxy.get_x();
			this._scissorRect.y = this._globalPos.y - this._stage3DProxy.get_y();
		} else {
			this._scissorRect.x = 0;
			this._scissorRect.y = 0;
			this._stage3DProxy.set_x(this._globalPos.x);
			this._stage3DProxy.set_y(this._globalPos.y);
		}
		this._scissorRectDirty = true;
	}
	,updateTime: function() {
		var time = openfl.Lib.getTimer();
		if((function($this) {
			var $r;
			var $int = $this._time;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) this._time = time;
		this._deltaTime = time - this._time;
		this._time = time;
	}
	,updateViewSizeData: function() {
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		if(this._scissorRectDirty) {
			this._scissorRectDirty = false;
			this._camera.get_lens().updateScissorRect(this._scissorRect.x,this._scissorRect.y,this._scissorRect.width,this._scissorRect.height);
		}
		if(this._viewportDirty) {
			this._viewportDirty = false;
			this._camera.get_lens().updateViewport(this._stage3DProxy.get_viewPort().x,this._stage3DProxy.get_viewPort().y,this._stage3DProxy.get_viewPort().width,this._stage3DProxy.get_viewPort().height);
		}
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._renderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._renderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		} else {
			this._renderer.set_textureRatioX(1);
			this._renderer.set_textureRatioY(1);
		}
	}
	,renderDepthPrepass: function(entityCollector) {
		this._depthRenderer.set_disableColor(true);
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
			this._depthRenderer.render(entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
		} else {
			this._depthRenderer.set_textureRatioX(1);
			this._depthRenderer.set_textureRatioY(1);
			this._depthRenderer.render(entityCollector);
		}
		this._depthRenderer.set_disableColor(false);
	}
	,renderSceneDepthToTexture: function(entityCollector) {
		if(this._depthTextureInvalid || this._depthRender == null) this.initDepthTexture(this._stage3DProxy._context3D);
		this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
		this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		this._depthRenderer.render(entityCollector,this._depthRender);
	}
	,initDepthTexture: function(context) {
		this._depthTextureInvalid = false;
		if(this._depthRender != null) this._depthRender.dispose();
		this._depthRender = context.createTexture(this._rttBufferManager.get_textureWidth(),this._rttBufferManager.get_textureHeight(),openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,dispose: function() {
		this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		if(!this.get_shareContext()) this._stage3DProxy.dispose();
		this._renderer.dispose();
		if(this._depthRender != null) this._depthRender.dispose();
		if(this._rttBufferManager != null) this._rttBufferManager.dispose();
		this._mouse3DManager.disableMouseListeners(this);
		this._mouse3DManager.dispose();
		this._rttBufferManager = null;
		this._depthRender = null;
		this._mouse3DManager = null;
		this._depthRenderer = null;
		this._stage3DProxy = null;
		this._renderer = null;
		this._entityCollector = null;
	}
	,project: function(point3d) {
		var v = this._camera.project(point3d);
		v.x = (v.x + 1.0) * this._width / 2.0;
		v.y = (v.y + 1.0) * this._height / 2.0;
		return v;
	}
	,unproject: function(sX,sY,sZ) {
		return this._camera.unproject((sX * 2 - this._width) / this._stage3DProxy.get_width(),(sY * 2 - this._height) / this._stage3DProxy.get_height(),sZ);
	}
	,getRay: function(sX,sY,sZ) {
		return this._camera.getRay((sX * 2 - this._width) / this._width,(sY * 2 - this._height) / this._height,sZ);
	}
	,get_mousePicker: function() {
		return this._mouse3DManager.get_mousePicker();
	}
	,set_mousePicker: function(value) {
		this._mouse3DManager.set_mousePicker(value);
		return value;
	}
	,get_touchPicker: function() {
		return this._touch3DManager.get_touchPicker();
	}
	,set_touchPicker: function(value) {
		this._touch3DManager.set_touchPicker(value);
		return value;
	}
	,get_entityCollector: function() {
		return this._entityCollector;
	}
	,onLensChanged: function(event) {
		this._scissorRectDirty = true;
		this._viewportDirty = true;
	}
	,onAddedToStage: function(event) {
		if(this._addedToStage) return;
		this._addedToStage = true;
		if(this._stage3DProxy == null) {
			this._stage3DProxy = away3d.core.managers.Stage3DManager.getInstance(this.stage).getFreeStage3DProxy(this._forceSoftware,this._profile);
			this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
			if(this._callbackMethod != null) this._stage3DProxy.setRenderCallback(this._callbackMethod);
		}
		this._globalPosDirty = true;
		this._rttBufferManager = away3d.core.managers.RTTBufferManager.getInstance(this._stage3DProxy);
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		if(this._width == 0) this.set_width(this.stage.stageWidth); else this._rttBufferManager.set_viewWidth(this._width | 0);
		if(this._height == 0) this.set_height(this.stage.stageHeight); else this._rttBufferManager.set_viewHeight(this._height | 0);
		if(this._shareContext) this._mouse3DManager.addViewLayer(this);
	}
	,onAdded: function(event) {
		this._parentIsStage = this.parent == this.stage;
		this._globalPos = this.parent.localToGlobal(this._localPos);
		this._globalPosDirty = true;
	}
	,onViewportUpdated: function(event) {
		if(this._shareContext) {
			this._scissorRect.x = this._globalPos.x - this._stage3DProxy.get_x();
			this._scissorRect.y = this._globalPos.y - this._stage3DProxy.get_y();
			this._scissorRectDirty = true;
		}
		this._viewportDirty = true;
	}
	,__class__: away3d.containers.View3D
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_entityCollector:"get_entityCollector",set_touchPicker:"set_touchPicker",get_touchPicker:"get_touchPicker",set_mousePicker:"set_mousePicker",get_mousePicker:"get_mousePicker",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",get_renderedFacesCount:"get_renderedFacesCount",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",get_deltaTime:"get_deltaTime",set_scene:"set_scene",get_scene:"get_scene",set_camera:"set_camera",get_camera:"get_camera",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_renderer:"set_renderer",get_renderer:"get_renderer",set_filters3d:"set_filters3d",get_filters3d:"get_filters3d",set_layeredView:"set_layeredView",get_layeredView:"get_layeredView",set_background:"set_background",get_background:"get_background",set_forceMouseMove:"set_forceMouseMove",get_forceMouseMove:"get_forceMouseMove",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy",set_depthPrepass:"set_depthPrepass",get_depthPrepass:"get_depthPrepass"})
});
away3d.controllers = {};
away3d.controllers.ControllerBase = function(targetObject) {
	this._autoUpdate = true;
	this.set_targetObject(targetObject);
};
$hxClasses["away3d.controllers.ControllerBase"] = away3d.controllers.ControllerBase;
away3d.controllers.ControllerBase.__name__ = ["away3d","controllers","ControllerBase"];
away3d.controllers.ControllerBase.prototype = {
	notifyUpdate: function() {
		if(this._targetObject != null && this._targetObject.get_implicitPartition() != null && this._autoUpdate) this._targetObject.get_implicitPartition().markForUpdate(this._targetObject);
	}
	,get_targetObject: function() {
		return this._targetObject;
	}
	,set_targetObject: function(val) {
		if(this._targetObject == val) return val;
		if(this._targetObject != null && this._autoUpdate) this._targetObject._controller = null;
		this._targetObject = val;
		if(this._targetObject != null && this._autoUpdate) this._targetObject._controller = this;
		this.notifyUpdate();
		return val;
	}
	,get_autoUpdate: function() {
		return this._autoUpdate;
	}
	,set_autoUpdate: function(val) {
		if(this._autoUpdate == val) return val;
		this._autoUpdate = val;
		if(this._targetObject != null) {
			if(this._autoUpdate) this._targetObject._controller = this; else this._targetObject._controller = null;
		}
		return val;
	}
	,update: function(interpolate) {
		if(interpolate == null) interpolate = true;
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.controllers.ControllerBase
	,__properties__: {set_autoUpdate:"set_autoUpdate",get_autoUpdate:"get_autoUpdate",set_targetObject:"set_targetObject",get_targetObject:"get_targetObject"}
};
away3d.core.base.SubGeometryBase = function() {
	this._faceNormalsDirty = true;
	this._faceTangentsDirty = true;
	this._indexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._indexBufferContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._indicesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._autoDeriveVertexNormals = true;
	this._autoDeriveVertexTangents = true;
	this._autoGenerateUVs = false;
	this._useFaceWeights = false;
	this._vertexNormalsDirty = true;
	this._vertexTangentsDirty = true;
	this._scaleU = 1;
	this._scaleV = 1;
	this._uvsDirty = true;
};
$hxClasses["away3d.core.base.SubGeometryBase"] = away3d.core.base.SubGeometryBase;
away3d.core.base.SubGeometryBase.__name__ = ["away3d","core","base","SubGeometryBase"];
away3d.core.base.SubGeometryBase.prototype = {
	get_autoGenerateDummyUVs: function() {
		return this._autoGenerateUVs;
	}
	,set_autoGenerateDummyUVs: function(value) {
		this._autoGenerateUVs = value;
		this._uvsDirty = value;
		return value;
	}
	,get_autoDeriveVertexNormals: function() {
		return this._autoDeriveVertexNormals;
	}
	,set_autoDeriveVertexNormals: function(value) {
		this._autoDeriveVertexNormals = value;
		this._vertexNormalsDirty = value;
		return value;
	}
	,get_useFaceWeights: function() {
		return this._useFaceWeights;
	}
	,set_useFaceWeights: function(value) {
		this._useFaceWeights = value;
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		return value;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,getIndexBuffer: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._indexBuffer[contextIndex] == null || this._indexBufferContext[contextIndex] != context) {
			this._indexBuffer[contextIndex] = context.createIndexBuffer(this._numIndices);
			this._indexBufferContext[contextIndex] = context;
			this._indicesInvalid[contextIndex] = true;
		}
		if(this._indicesInvalid[contextIndex]) {
			this._indexBuffer[contextIndex].uploadFromVector((function($this) {
				var $r;
				var value = $this._indices;
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)),0,this._numIndices);
			this._indicesInvalid[contextIndex] = false;
		}
		return this._indexBuffer[contextIndex];
	}
	,updateFaceTangents: function() {
		var i = 0;
		var index1;
		var index2;
		var index3;
		var len = this._indices.length;
		var ui;
		var vi;
		var v0;
		var dv1;
		var dv2;
		var denom;
		var x0;
		var y0;
		var z0;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var vertices = this._vertexData;
		var uvs = this.get_UVData();
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		var texStride = this.get_UVStride();
		var texOffset = this.get_UVOffset();
		if(this._faceTangents == null) this._faceTangents = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._indices.length);
		while(i < len) {
			index1 = this._indices[i];
			index2 = this._indices[i + 1];
			index3 = this._indices[i + 2];
			ui = texOffset + index1 * texStride + 1;
			v0 = uvs[ui];
			ui = texOffset + index2 * texStride + 1;
			dv1 = uvs[ui] - v0;
			ui = texOffset + index3 * texStride + 1;
			dv2 = uvs[ui] - v0;
			vi = posOffset + index1 * posStride;
			x0 = vertices[vi];
			y0 = vertices[vi + 1];
			z0 = vertices[vi + 2];
			vi = posOffset + index2 * posStride;
			dx1 = vertices[vi] - x0;
			dy1 = vertices[vi + 1] - y0;
			dz1 = vertices[vi + 2] - z0;
			vi = posOffset + index3 * posStride;
			dx2 = vertices[vi] - x0;
			dy2 = vertices[vi + 1] - y0;
			dz2 = vertices[vi + 2] - z0;
			cx = dv2 * dx1 - dv1 * dx2;
			cy = dv2 * dy1 - dv1 * dy2;
			cz = dv2 * dz1 - dv1 * dz2;
			denom = 1 / Math.sqrt(cx * cx + cy * cy + cz * cz);
			this._faceTangents[i++] = denom * cx;
			this._faceTangents[i++] = denom * cy;
			this._faceTangents[i++] = denom * cz;
		}
		this._faceTangentsDirty = false;
	}
	,updateFaceNormals: function() {
		var i = 0;
		var j = 0;
		var k = 0;
		var index;
		var len = this._indices.length;
		var x1;
		var x2;
		var x3;
		var y1;
		var y2;
		var y3;
		var z1;
		var z2;
		var z3;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var d;
		var vertices = this._vertexData;
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		if(this._faceNormals == null) this._faceNormals = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),len);
		if(this._faceWeights == null) this._faceWeights = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),len / 3 | 0);
		while(i < len) {
			var b;
			var a = this._indices[i++];
			b = a * posStride;
			index = posOffset + b;
			x1 = vertices[index];
			y1 = vertices[index + 1];
			z1 = vertices[index + 2];
			var b1;
			var a1 = this._indices[i++];
			b1 = a1 * posStride;
			index = posOffset + b1;
			x2 = vertices[index];
			y2 = vertices[index + 1];
			z2 = vertices[index + 2];
			var b2;
			var a2 = this._indices[i++];
			b2 = a2 * posStride;
			index = posOffset + b2;
			x3 = vertices[index];
			y3 = vertices[index + 1];
			z3 = vertices[index + 2];
			dx1 = x3 - x1;
			dy1 = y3 - y1;
			dz1 = z3 - z1;
			dx2 = x2 - x1;
			dy2 = y2 - y1;
			dz2 = z2 - z1;
			cx = dz1 * dy2 - dy1 * dz2;
			cy = dx1 * dz2 - dz1 * dx2;
			cz = dy1 * dx2 - dx1 * dy2;
			d = Math.sqrt(cx * cx + cy * cy + cz * cz);
			if(this._useFaceWeights) {
				var w = d * 10000;
				if(w < 1) w = 1;
				this._faceWeights[k++] = w;
			}
			d = 1 / d;
			this._faceNormals[j++] = cx * d;
			this._faceNormals[j++] = cy * d;
			this._faceNormals[j++] = cz * d;
		}
		this._faceNormalsDirty = false;
	}
	,updateVertexNormals: function(target) {
		if(this._faceNormalsDirty) this.updateFaceNormals();
		var v1;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		var lenV = this._vertexData.length;
		var normalStride = this.get_vertexNormalStride();
		var normalOffset = this.get_vertexNormalOffset();
		if(target == null) target = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),lenV,0);
		v1 = normalOffset;
		while(v1 < lenV) {
			target[v1] = 0.0;
			target[v1 + 1] = 0.0;
			target[v1 + 2] = 0.0;
			v1 += normalStride;
		}
		var i = 0;
		var k = 0;
		var lenI = this._indices.length;
		var index;
		var weight;
		while(i < lenI) {
			if(this._useFaceWeights) weight = this._faceWeights[k++]; else weight = 1;
			var b;
			var a = this._indices[i++];
			b = a * normalStride;
			index = normalOffset + b;
			target[index++] += this._faceNormals[f1] * weight;
			target[index++] += this._faceNormals[f2] * weight;
			target[index] += this._faceNormals[f3] * weight;
			var b1;
			var a1 = this._indices[i++];
			b1 = a1 * normalStride;
			index = normalOffset + b1;
			target[index++] += this._faceNormals[f1] * weight;
			target[index++] += this._faceNormals[f2] * weight;
			target[index] += this._faceNormals[f3] * weight;
			var b2;
			var a2 = this._indices[i++];
			b2 = a2 * normalStride;
			index = normalOffset + b2;
			target[index++] += this._faceNormals[f1] * weight;
			target[index++] += this._faceNormals[f2] * weight;
			target[index] += this._faceNormals[f3] * weight;
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		v1 = normalOffset;
		while(v1 < lenV) {
			var vx = target[v1];
			var vy = target[v1 + 1];
			var vz = target[v1 + 2];
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			target[v1] = vx * d;
			target[v1 + 1] = vy * d;
			target[v1 + 2] = vz * d;
			v1 += normalStride;
		}
		this._vertexNormalsDirty = false;
		return target;
	}
	,updateVertexTangents: function(target) {
		if(this._faceTangentsDirty) this.updateFaceTangents();
		var i = 0;
		var lenV = this._vertexData.length;
		var tangentStride = this.get_vertexTangentStride();
		var tangentOffset = this.get_vertexTangentOffset();
		if(target == null) target = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),lenV);
		i = tangentOffset;
		while(i < lenV) {
			target[i] = 0.0;
			target[i + 1] = 0.0;
			target[i + 2] = 0.0;
			i += tangentStride;
		}
		var k = 0;
		var lenI = this._indices.length;
		var index;
		var weight;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		i = 0;
		while(i < lenI) {
			if(this._useFaceWeights) weight = this._faceWeights[k++]; else weight = 1;
			var b;
			var a = this._indices[i++];
			b = a * tangentStride;
			index = tangentOffset + b;
			target[index++] += this._faceTangents[f1] * weight;
			target[index++] += this._faceTangents[f2] * weight;
			target[index] += this._faceTangents[f3] * weight;
			var b1;
			var a1 = this._indices[i++];
			b1 = a1 * tangentStride;
			index = tangentOffset + b1;
			target[index++] += this._faceTangents[f1] * weight;
			target[index++] += this._faceTangents[f2] * weight;
			target[index] += this._faceTangents[f3] * weight;
			var b2;
			var a2 = this._indices[i++];
			b2 = a2 * tangentStride;
			index = tangentOffset + b2;
			target[index++] += this._faceTangents[f1] * weight;
			target[index++] += this._faceTangents[f2] * weight;
			target[index] += this._faceTangents[f3] * weight;
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		i = tangentOffset;
		while(i < lenV) {
			var vx = target[i];
			var vy = target[i + 1];
			var vz = target[i + 2];
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			target[i] = vx * d;
			target[i + 1] = vy * d;
			target[i + 2] = vz * d;
			i += tangentStride;
		}
		this._vertexTangentsDirty = false;
		return target;
	}
	,dispose: function() {
		this.disposeIndexBuffers(this._indexBuffer);
		this._indices = null;
		this._indexBufferContext = null;
		this._faceNormals = null;
		this._faceWeights = null;
		this._faceTangents = null;
		this._vertexData = null;
	}
	,get_indexData: function() {
		return this._indices;
	}
	,updateIndexData: function(indices) {
		this._indices = indices;
		this._numIndices = indices.length;
		var numTriangles = this._numIndices / 3 | 0;
		if(this._numTriangles != numTriangles) this.disposeIndexBuffers(this._indexBuffer);
		this._numTriangles = numTriangles;
		this.invalidateBuffers(this._indicesInvalid);
		this._faceNormalsDirty = true;
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
	}
	,disposeIndexBuffers: function(buffers) {
		var i = 0;
		while(i < 8) {
			if(buffers[i] != null) {
				buffers[i].dispose();
				buffers[i] = null;
			}
			++i;
		}
	}
	,disposeVertexBuffers: function(buffers) {
		var i = 0;
		while(i < 8) {
			if(buffers[i] != null) {
				buffers[i].dispose();
				buffers[i] = null;
			}
			++i;
		}
	}
	,get_autoDeriveVertexTangents: function() {
		return this._autoDeriveVertexTangents;
	}
	,set_autoDeriveVertexTangents: function(value) {
		this._autoDeriveVertexTangents = value;
		this._vertexTangentsDirty = value;
		return value;
	}
	,get_faceNormals: function() {
		if(this._faceNormalsDirty) this.updateFaceNormals();
		return this._faceNormals;
	}
	,invalidateBuffers: function(invalid) {
		var i = 0;
		while(i < 8) {
			invalid[i] = true;
			++i;
		}
	}
	,get_UVStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexPositionData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexNormalData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexTangentData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_UVData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexNormalStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexTangentStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexNormalOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexTangentOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_UVOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,invalidateBounds: function() {
		if(this._parentGeometry != null) this._parentGeometry.invalidateBounds(js.Boot.__cast(this , away3d.core.base.ISubGeometry));
	}
	,get_parentGeometry: function() {
		return this._parentGeometry;
	}
	,set_parentGeometry: function(value) {
		this._parentGeometry = value;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		var offset = this.get_UVOffset();
		var stride = this.get_UVStride();
		var uvs = this.get_UVData();
		var len = uvs.length;
		var ratioU = scaleU / this._scaleU;
		var ratioV = scaleV / this._scaleV;
		var i = offset;
		while(i < len) {
			uvs[i] *= ratioU;
			uvs[i + 1] *= ratioV;
			i += stride;
		}
		this._scaleU = scaleU;
		this._scaleV = scaleV;
	}
	,scale: function(scale) {
		var vertices = this.get_UVData();
		var len = vertices.length;
		var offset = this.get_vertexOffset();
		var stride = this.get_vertexStride();
		var i = offset;
		while(i < len) {
			vertices[i] *= scale;
			vertices[i + 1] *= scale;
			vertices[i + 2] *= scale;
			i += stride;
		}
	}
	,applyTransformation: function(transform) {
		var vertices = this._vertexData;
		var normals = this.get_vertexNormalData();
		var tangents = this.get_vertexTangentData();
		var posStride = this.get_vertexStride();
		var normalStride = this.get_vertexNormalStride();
		var tangentStride = this.get_vertexTangentStride();
		var posOffset = this.get_vertexOffset();
		var normalOffset = this.get_vertexNormalOffset();
		var tangentOffset = this.get_vertexTangentOffset();
		var len = vertices.length / posStride | 0;
		var i = 0;
		var i1;
		var i2;
		var vector = new openfl.geom.Vector3D();
		var bakeNormals = normals != null;
		var bakeTangents = tangents != null;
		var invTranspose = null;
		if(bakeNormals || bakeTangents) {
			invTranspose = new openfl.geom.Matrix3D(openfl._Vector.Vector_Impl_.copy(transform.rawData));
			invTranspose.invert();
			invTranspose.transpose();
		}
		var vi0 = posOffset;
		var ni0 = normalOffset;
		var ti0 = tangentOffset;
		i = 0;
		while(i < len) {
			i1 = vi0 + 1;
			i2 = vi0 + 2;
			vector.x = vertices[vi0];
			vector.y = vertices[i1];
			vector.z = vertices[i2];
			vector = transform.transformVector(vector);
			vertices[vi0] = vector.x;
			vertices[i1] = vector.y;
			vertices[i2] = vector.z;
			vi0 += posStride;
			if(bakeNormals) {
				i1 = ni0 + 1;
				i2 = ni0 + 2;
				vector.x = normals[ni0];
				vector.y = normals[i1];
				vector.z = normals[i2];
				vector = invTranspose.deltaTransformVector(vector);
				vector.normalize();
				normals[ni0] = vector.x;
				normals[i1] = vector.y;
				normals[i2] = vector.z;
				ni0 += normalStride;
			}
			if(bakeTangents) {
				i1 = ti0 + 1;
				i2 = ti0 + 2;
				vector.x = tangents[ti0];
				vector.y = tangents[i1];
				vector.z = tangents[i2];
				vector = invTranspose.deltaTransformVector(vector);
				vector.normalize();
				tangents[ti0] = vector.x;
				tangents[i1] = vector.y;
				tangents[i2] = vector.z;
				ti0 += tangentStride;
			}
			++i;
		}
	}
	,updateDummyUVs: function(target) {
		this._uvsDirty = false;
		var idx;
		var uvIdx;
		var stride = this.get_UVStride();
		var skip = stride - 2;
		var len = Std["int"](this._vertexData.length / this.get_vertexStride() * stride);
		if(target == null) target = new Array();
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(target),len);
		idx = this.get_UVOffset();
		uvIdx = 0;
		while(idx < len) {
			target[idx++] = uvIdx * .5;
			target[idx++] = 1.0 - (uvIdx & 1);
			idx += skip;
			if(++uvIdx == 3) uvIdx = 0;
		}
		return target;
	}
	,__class__: away3d.core.base.SubGeometryBase
	,__properties__: {get_scaleV:"get_scaleV",get_scaleU:"get_scaleU",set_parentGeometry:"set_parentGeometry",get_parentGeometry:"get_parentGeometry",get_UVOffset:"get_UVOffset",get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentStride:"get_vertexTangentStride",get_vertexNormalStride:"get_vertexNormalStride",get_vertexStride:"get_vertexStride",get_UVData:"get_UVData",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexPositionData:"get_vertexPositionData",get_vertexData:"get_vertexData",get_UVStride:"get_UVStride",get_faceNormals:"get_faceNormals",set_autoDeriveVertexTangents:"set_autoDeriveVertexTangents",get_autoDeriveVertexTangents:"get_autoDeriveVertexTangents",get_indexData:"get_indexData",get_numTriangles:"get_numTriangles",set_useFaceWeights:"set_useFaceWeights",get_useFaceWeights:"get_useFaceWeights",set_autoDeriveVertexNormals:"set_autoDeriveVertexNormals",get_autoDeriveVertexNormals:"get_autoDeriveVertexNormals",set_autoGenerateDummyUVs:"set_autoGenerateDummyUVs",get_autoGenerateDummyUVs:"get_autoGenerateDummyUVs"}
};
away3d.core.base.ISubGeometry = function() { };
$hxClasses["away3d.core.base.ISubGeometry"] = away3d.core.base.ISubGeometry;
away3d.core.base.ISubGeometry.__name__ = ["away3d","core","base","ISubGeometry"];
away3d.core.base.ISubGeometry.prototype = {
	__class__: away3d.core.base.ISubGeometry
	,__properties__: {get_vertexPositionData:"get_vertexPositionData",set_autoDeriveVertexTangents:"set_autoDeriveVertexTangents",get_autoDeriveVertexTangents:"get_autoDeriveVertexTangents",set_autoDeriveVertexNormals:"set_autoDeriveVertexNormals",get_autoDeriveVertexNormals:"get_autoDeriveVertexNormals",get_faceNormals:"get_faceNormals",set_parentGeometry:"set_parentGeometry",get_parentGeometry:"get_parentGeometry",get_scaleV:"get_scaleV",get_scaleU:"get_scaleU",get_UVData:"get_UVData",get_indexData:"get_indexData",get_secondaryUVOffset:"get_secondaryUVOffset",get_UVOffset:"get_UVOffset",get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexData:"get_vertexData",get_secondaryUVStride:"get_secondaryUVStride",get_UVStride:"get_UVStride",get_vertexTangentStride:"get_vertexTangentStride",get_vertexNormalStride:"get_vertexNormalStride",get_vertexStride:"get_vertexStride",get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices"}
};
away3d.core.base.CompactSubGeometry = function() {
	away3d.core.base.SubGeometryBase.call(this);
	this._vertexDataInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._vertexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._bufferContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._autoDeriveVertexNormals = false;
	this._autoDeriveVertexTangents = false;
};
$hxClasses["away3d.core.base.CompactSubGeometry"] = away3d.core.base.CompactSubGeometry;
away3d.core.base.CompactSubGeometry.__name__ = ["away3d","core","base","CompactSubGeometry"];
away3d.core.base.CompactSubGeometry.__interfaces__ = [away3d.core.base.ISubGeometry];
away3d.core.base.CompactSubGeometry.__super__ = away3d.core.base.SubGeometryBase;
away3d.core.base.CompactSubGeometry.prototype = $extend(away3d.core.base.SubGeometryBase.prototype,{
	get_numVertices: function() {
		return this._numVertices;
	}
	,updateData: function(data) {
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		this._faceTangentsDirty = true;
		this._isolatedVertexPositionDataDirty = true;
		this._vertexData = data;
		var numVertices = this._vertexData.length / 13 | 0;
		if(numVertices != this._numVertices) this.disposeVertexBuffers(this._vertexBuffer);
		this._numVertices = numVertices;
		if(this._numVertices == 0) throw new openfl.errors.Error("Bad data: geometry can't have zero triangles");
		this.invalidateBuffers(this._vertexDataInvalid);
		this.invalidateBounds();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,9,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,11,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,uploadData: function(contextIndex) {
		this._activeBuffer.uploadFromVector(this._vertexData,0,this._numVertices);
		this._vertexDataInvalid[contextIndex] = this._activeDataInvalid = false;
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,3,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,6,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,createBuffer: function(contextIndex,context) {
		this._vertexBuffer[contextIndex] = this._activeBuffer = context.createVertexBuffer(this._numVertices,13);
		this._bufferContext[contextIndex] = this._activeContext = context;
		this._vertexDataInvalid[contextIndex] = this._activeDataInvalid = true;
	}
	,updateActiveBuffer: function(contextIndex) {
		this._contextIndex = contextIndex;
		this._activeDataInvalid = this._vertexDataInvalid[contextIndex];
		this._activeBuffer = this._vertexBuffer[contextIndex];
		this._activeContext = this._bufferContext[contextIndex];
	}
	,get_vertexData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexData = this.updateVertexTangents(this._vertexData);
		if(this._uvsDirty && this._autoGenerateUVs) this._vertexData = this.updateDummyUVs(this._vertexData);
		return this._vertexData;
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		return this._vertexData;
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexData = this.updateVertexTangents(this._vertexData);
		return this._vertexData;
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		return this._vertexData;
	}
	,applyTransformation: function(transform) {
		away3d.core.base.SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,scale: function(scale) {
		away3d.core.base.SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,clone: function() {
		var clone = new away3d.core.base.CompactSubGeometry();
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone.updateData(this._vertexData.slice());
		clone.updateIndexData(this._indices.slice());
		return clone;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		away3d.core.base.SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,get_vertexStride: function() {
		return 13;
	}
	,get_vertexNormalStride: function() {
		return 13;
	}
	,get_vertexTangentStride: function() {
		return 13;
	}
	,get_UVStride: function() {
		return 13;
	}
	,get_secondaryUVStride: function() {
		return 13;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 3;
	}
	,get_vertexTangentOffset: function() {
		return 6;
	}
	,get_UVOffset: function() {
		return 9;
	}
	,get_secondaryUVOffset: function() {
		return 11;
	}
	,dispose: function() {
		away3d.core.base.SubGeometryBase.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._vertexBuffer);
		this._vertexBuffer = null;
	}
	,disposeVertexBuffers: function(buffers) {
		away3d.core.base.SubGeometryBase.prototype.disposeVertexBuffers.call(this,buffers);
		this._activeBuffer = null;
	}
	,invalidateBuffers: function(invalid) {
		away3d.core.base.SubGeometryBase.prototype.invalidateBuffers.call(this,invalid);
		this._activeDataInvalid = true;
	}
	,cloneWithSeperateBuffers: function() {
		var clone = new away3d.core.base.SubGeometry();
		clone.updateVertexData(this._isolatedVertexPositionData != null?this._isolatedVertexPositionData:this._isolatedVertexPositionData = this.stripBuffer(0,3));
		clone.set_autoDeriveVertexNormals(this._autoDeriveVertexNormals);
		clone.set_autoDeriveVertexTangents(this._autoDeriveVertexTangents);
		if(!this._autoDeriveVertexNormals) clone.updateVertexNormalData(this.stripBuffer(3,3));
		if(!this._autoDeriveVertexTangents) clone.updateVertexTangentData(this.stripBuffer(6,3));
		clone.updateUVData(this.stripBuffer(9,2));
		clone.updateSecondaryUVData(this.stripBuffer(11,2));
		clone.updateIndexData((function($this) {
			var $r;
			var _this = $this.get_indexData();
			$r = _this.slice();
			return $r;
		}(this)));
		return clone;
	}
	,get_vertexPositionData: function() {
		if(this._isolatedVertexPositionDataDirty || this._isolatedVertexPositionData == null) {
			this._isolatedVertexPositionData = this.stripBuffer(0,3);
			this._isolatedVertexPositionDataDirty = false;
		}
		return this._isolatedVertexPositionData;
	}
	,stripBuffer: function(offset,numEntries) {
		var data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._numVertices * numEntries);
		var i = 0;
		var j = offset;
		var skip = 13 - numEntries;
		var v = 0;
		while(v < this._numVertices) {
			var k = 0;
			while(k < numEntries) {
				data[i++] = this._vertexData[j++];
				++k;
			}
			j += skip;
			++v;
		}
		return data;
	}
	,fromVectors: function(verts,uvs,normals,tangents) {
		var vertLen = verts.length / 3 * 13 | 0;
		var index = 0;
		var v = 0;
		var n = 0;
		var t = 0;
		var u = 0;
		var data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),vertLen,0);
		while(index < vertLen) {
			data[index++] = verts[v++];
			data[index++] = verts[v++];
			data[index++] = verts[v++];
			if(normals != null && normals.length > 0) {
				data[index++] = normals[n++];
				data[index++] = normals[n++];
				data[index++] = normals[n++];
			} else {
				data[index++] = 0;
				data[index++] = 0;
				data[index++] = 0;
			}
			if(tangents != null && tangents.length > 0) {
				data[index++] = tangents[t++];
				data[index++] = tangents[t++];
				data[index++] = tangents[t++];
			} else {
				data[index++] = 0;
				data[index++] = 0;
				data[index++] = 0;
			}
			if(uvs != null && uvs.length > 0) {
				data[index++] = uvs[u];
				data[index++] = uvs[u + 1];
				data[index++] = uvs[u++];
				data[index++] = uvs[u++];
			} else {
				data[index++] = 0;
				data[index++] = 0;
				data[index++] = 0;
				data[index++] = 0;
			}
		}
		this.set_autoDeriveVertexNormals(!(normals != null && normals.length > 0));
		this.set_autoDeriveVertexTangents(!(tangents != null && tangents.length > 0));
		this.set_autoGenerateDummyUVs(!(uvs != null && uvs.length > 0));
		this.updateData(data);
	}
	,__class__: away3d.core.base.CompactSubGeometry
	,__properties__: $extend(away3d.core.base.SubGeometryBase.prototype.__properties__,{get_secondaryUVOffset:"get_secondaryUVOffset",get_secondaryUVStride:"get_secondaryUVStride",get_numVertices:"get_numVertices"})
});
away3d.core.base.Geometry = function() {
	away3d.library.assets.NamedAssetBase.call(this);
	this._subGeometries = new Array();
};
$hxClasses["away3d.core.base.Geometry"] = away3d.core.base.Geometry;
away3d.core.base.Geometry.__name__ = ["away3d","core","base","Geometry"];
away3d.core.base.Geometry.__interfaces__ = [away3d.library.assets.IAsset];
away3d.core.base.Geometry.__super__ = away3d.library.assets.NamedAssetBase;
away3d.core.base.Geometry.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.GEOMETRY;
	}
	,get_subGeometries: function() {
		return this._subGeometries;
	}
	,applyTransformation: function(transform) {
		var len = this._subGeometries.length;
		var i = 0;
		while(i < len) {
			this._subGeometries[i].applyTransformation(transform);
			++i;
		}
	}
	,addSubGeometry: function(subGeometry) {
		this._subGeometries.push(subGeometry);
		subGeometry.set_parentGeometry(this);
		if(this.hasEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,subGeometry));
		this.invalidateBounds(subGeometry);
	}
	,removeSubGeometry: function(subGeometry) {
		this._subGeometries.splice(HxOverrides.indexOf(this._subGeometries,subGeometry,0),1);
		subGeometry.set_parentGeometry(null);
		if(this.hasEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,subGeometry));
		this.invalidateBounds(subGeometry);
	}
	,clone: function() {
		var clone = new away3d.core.base.Geometry();
		var len = this._subGeometries.length;
		var i = 0;
		while(i < len) {
			clone.addSubGeometry(this._subGeometries[i].clone());
			++i;
		}
		return clone;
	}
	,scale: function(scale) {
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			this._subGeometries[i].scale(scale);
			++i;
		}
	}
	,dispose: function() {
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			var subGeom = this._subGeometries[0];
			this.removeSubGeometry(subGeom);
			subGeom.dispose();
			++i;
		}
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			this._subGeometries[i].scaleUV(scaleU,scaleV);
			++i;
		}
	}
	,convertToSeparateBuffers: function() {
		var subGeom;
		var numSubGeoms = this._subGeometries.length;
		var _removableCompactSubGeometries = new Array();
		var i = 0;
		while(i < numSubGeoms) {
			subGeom = this._subGeometries[i];
			if(js.Boot.__instanceof(subGeom,away3d.core.base.SubGeometry)) {
				++i;
				continue;
			}
			_removableCompactSubGeometries.push(subGeom);
			this.addSubGeometry(subGeom.cloneWithSeperateBuffers());
			++i;
		}
		var _g = 0;
		while(_g < _removableCompactSubGeometries.length) {
			var s = _removableCompactSubGeometries[_g];
			++_g;
			this.removeSubGeometry(s);
			s.dispose();
		}
	}
	,validate: function() {
	}
	,invalidateBounds: function(subGeom) {
		if(this.hasEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.BOUNDS_INVALID,subGeom));
	}
	,__class__: away3d.core.base.Geometry
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_subGeometries:"get_subGeometries",get_assetType:"get_assetType"})
});
away3d.core.base.IRenderable = function() { };
$hxClasses["away3d.core.base.IRenderable"] = away3d.core.base.IRenderable;
away3d.core.base.IRenderable.__name__ = ["away3d","core","base","IRenderable"];
away3d.core.base.IRenderable.__interfaces__ = [away3d.core.base.IMaterialOwner];
away3d.core.base.IRenderable.prototype = {
	__class__: away3d.core.base.IRenderable
	,__properties__: {get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexData:"get_vertexData",get_vertexStride:"get_vertexStride",get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices",get_shaderPickingDetails:"get_shaderPickingDetails",get_uvTransform:"get_uvTransform",get_castsShadows:"get_castsShadows",get_sourceEntity:"get_sourceEntity",get_mouseEnabled:"get_mouseEnabled",get_inverseSceneTransform:"get_inverseSceneTransform",get_sceneTransform:"get_sceneTransform"}
};
away3d.core.base.ParticleGeometry = function() {
	away3d.core.base.Geometry.call(this);
};
$hxClasses["away3d.core.base.ParticleGeometry"] = away3d.core.base.ParticleGeometry;
away3d.core.base.ParticleGeometry.__name__ = ["away3d","core","base","ParticleGeometry"];
away3d.core.base.ParticleGeometry.__super__ = away3d.core.base.Geometry;
away3d.core.base.ParticleGeometry.prototype = $extend(away3d.core.base.Geometry.prototype,{
	__class__: away3d.core.base.ParticleGeometry
});
away3d.core.base.SkinnedSubGeometry = function(jointsPerVertex) {
	this._jointWeightsBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._jointIndexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._jointWeightsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8,false);
	this._jointIndicesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8,false);
	this._jointWeightContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._jointIndexContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	away3d.core.base.CompactSubGeometry.call(this);
	this._jointsPerVertex = jointsPerVertex;
	this._bufferFormat = this.getVertexBufferFormat(this._jointsPerVertex);
};
$hxClasses["away3d.core.base.SkinnedSubGeometry"] = away3d.core.base.SkinnedSubGeometry;
away3d.core.base.SkinnedSubGeometry.__name__ = ["away3d","core","base","SkinnedSubGeometry"];
away3d.core.base.SkinnedSubGeometry.__super__ = away3d.core.base.CompactSubGeometry;
away3d.core.base.SkinnedSubGeometry.prototype = $extend(away3d.core.base.CompactSubGeometry.prototype,{
	getVertexBufferFormat: function(size) {
		switch(size) {
		case 1:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_1;
		case 2:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_2;
		case 3:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_3;
		case 4:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_3;
		default:
			return null;
		}
	}
	,get_condensedIndexLookUp: function() {
		return this._condensedIndexLookUp;
	}
	,get_numCondensedJoints: function() {
		return this._numCondensedJoints;
	}
	,get_animatedData: function() {
		if(this._animatedData != null) return this._animatedData;
		return this._vertexData.slice();
	}
	,updateAnimatedData: function(value) {
		this._animatedData = value;
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,activateJointWeightsBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointWeightContext[contextIndex] != context || this._jointWeightsBuffer[contextIndex] == null) {
			this._jointWeightsBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,this._jointsPerVertex);
			this._jointWeightContext[contextIndex] = context;
			this._jointWeightsInvalid[contextIndex] = true;
		}
		if(this._jointWeightsInvalid[contextIndex]) {
			this._jointWeightsBuffer[contextIndex].uploadFromVector(this._jointWeightsData,0,this._jointWeightsData.length / this._jointsPerVertex | 0);
			this._jointWeightsInvalid[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._jointWeightsBuffer[contextIndex],0,this._bufferFormat);
	}
	,activateJointIndexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointIndexContext[contextIndex] != context || this._jointIndexBuffer[contextIndex] == null) {
			this._jointIndexBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,this._jointsPerVertex);
			this._jointIndexContext[contextIndex] = context;
			this._jointIndicesInvalid[contextIndex] = true;
		}
		if(this._jointIndicesInvalid[contextIndex]) {
			this._jointIndexBuffer[contextIndex].uploadFromVector(this._numCondensedJoints > 0?this._condensedJointIndexData:this._jointIndexData,0,this._jointIndexData.length / this._jointsPerVertex | 0);
			this._jointIndicesInvalid[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._jointIndexBuffer[contextIndex],0,this._bufferFormat);
	}
	,uploadData: function(contextIndex) {
		if(this._animatedData != null) {
			this._activeBuffer.uploadFromVector(this._animatedData,0,this._numVertices);
			this._vertexDataInvalid[contextIndex] = this._activeDataInvalid = false;
		} else away3d.core.base.CompactSubGeometry.prototype.uploadData.call(this,contextIndex);
	}
	,clone: function() {
		var clone = new away3d.core.base.SkinnedSubGeometry(this._jointsPerVertex);
		clone.updateData(this._vertexData.slice());
		clone.updateIndexData(this._indices.slice());
		clone.updateJointIndexData(this._jointIndexData.slice());
		clone.updateJointWeightsData(this._jointWeightsData.slice());
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone._numCondensedJoints = this._numCondensedJoints;
		clone._condensedIndexLookUp = this._condensedIndexLookUp;
		clone._condensedJointIndexData = this._condensedJointIndexData;
		return clone;
	}
	,dispose: function() {
		away3d.core.base.CompactSubGeometry.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._jointWeightsBuffer);
		this.disposeVertexBuffers(this._jointIndexBuffer);
	}
	,condenseIndexData: function() {
		var len = this._jointIndexData.length;
		var oldIndex;
		var newIndex = 0;
		var dic = new haxe.ds.IntMap();
		this._condensedJointIndexData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),len,0);
		this._condensedIndexLookUp = new Array();
		var i = 0;
		while(i < len) {
			oldIndex = this._jointIndexData[i];
			if(!dic.exists(oldIndex)) {
				dic.set(oldIndex,newIndex);
				this._condensedIndexLookUp[newIndex++] = oldIndex;
				this._condensedIndexLookUp[newIndex++] = oldIndex + 1;
				this._condensedIndexLookUp[newIndex++] = oldIndex + 2;
			}
			this._condensedJointIndexData[i] = dic.get(oldIndex);
			++i;
		}
		this._numCondensedJoints = newIndex / 3 | 0;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,get_jointWeightsData: function() {
		return this._jointWeightsData;
	}
	,updateJointWeightsData: function(value) {
		this._numCondensedJoints = 0;
		this._condensedIndexLookUp = null;
		this._condensedJointIndexData = null;
		this._jointWeightsData = value;
		this.invalidateBuffers(this._jointWeightsInvalid);
	}
	,get_jointIndexData: function() {
		return this._jointIndexData;
	}
	,updateJointIndexData: function(value) {
		this._jointIndexData = value;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,__class__: away3d.core.base.SkinnedSubGeometry
	,__properties__: $extend(away3d.core.base.CompactSubGeometry.prototype.__properties__,{get_jointIndexData:"get_jointIndexData",get_jointWeightsData:"get_jointWeightsData",get_animatedData:"get_animatedData",get_numCondensedJoints:"get_numCondensedJoints",get_condensedIndexLookUp:"get_condensedIndexLookUp"})
});
away3d.core.base.SubGeometry = function() {
	away3d.core.base.SubGeometryBase.call(this);
	this._verticesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._uvsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._secondaryUvsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._normalsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._tangentsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._vertexBuffer = new Array();
	this._uvBuffer = new Array();
	this._secondaryUvBuffer = new Array();
	this._vertexNormalBuffer = new Array();
	this._vertexTangentBuffer = new Array();
	this._vertexBufferContext = new Array();
	this._uvBufferContext = new Array();
	this._secondaryUvBufferContext = new Array();
	this._vertexNormalBufferContext = new Array();
	this._vertexTangentBufferContext = new Array();
};
$hxClasses["away3d.core.base.SubGeometry"] = away3d.core.base.SubGeometry;
away3d.core.base.SubGeometry.__name__ = ["away3d","core","base","SubGeometry"];
away3d.core.base.SubGeometry.__interfaces__ = [away3d.core.base.ISubGeometry];
away3d.core.base.SubGeometry.__super__ = away3d.core.base.SubGeometryBase;
away3d.core.base.SubGeometry.prototype = $extend(away3d.core.base.SubGeometryBase.prototype,{
	get_numVertices: function() {
		return this._numVertices;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexBuffer[contextIndex] == null || this._vertexBufferContext[contextIndex] != context) {
			this._vertexBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,3);
			this._vertexBufferContext[contextIndex] = context;
			this._verticesInvalid[contextIndex] = true;
		}
		if(this._verticesInvalid[contextIndex]) {
			this._vertexBuffer[contextIndex].uploadFromVector(this._vertexData,0,this._numVertices);
			this._verticesInvalid[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexBuffer[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoGenerateUVs && this._uvsDirty) this._uvs = this.updateDummyUVs(this._uvs);
		if(this._uvBuffer[contextIndex] == null || this._uvBufferContext[contextIndex] != context) {
			this._uvBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,2);
			this._uvBufferContext[contextIndex] = context;
			this._uvsInvalid[contextIndex] = true;
		}
		if(this._uvsInvalid[contextIndex]) {
			this._uvBuffer[contextIndex].uploadFromVector(this._uvs,0,this._numVertices);
			this._uvsInvalid[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._uvBuffer[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._secondaryUvBuffer[contextIndex] == null || this._secondaryUvBufferContext[contextIndex] != context) {
			this._secondaryUvBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,2);
			this._secondaryUvBufferContext[contextIndex] = context;
			this._secondaryUvsInvalid[contextIndex] = true;
		}
		if(this._secondaryUvsInvalid[contextIndex]) {
			this._secondaryUvBuffer[contextIndex].uploadFromVector(this._secondaryUvs,0,this._numVertices);
			this._secondaryUvsInvalid[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._secondaryUvBuffer[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		if(this._vertexNormalBuffer[contextIndex] == null || this._vertexNormalBufferContext[contextIndex] != context) {
			this._vertexNormalBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,3);
			this._vertexNormalBufferContext[contextIndex] = context;
			this._normalsInvalid[contextIndex] = true;
		}
		if(this._normalsInvalid[contextIndex]) {
			this._vertexNormalBuffer[contextIndex].uploadFromVector(this._vertexNormals,0,this._numVertices);
			this._normalsInvalid[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexNormalBuffer[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexTangentsDirty) this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		if(this._vertexTangentBuffer[contextIndex] == null || this._vertexTangentBufferContext[contextIndex] != context) {
			this._vertexTangentBuffer[contextIndex] = context.createVertexBuffer(this._numVertices,3);
			this._vertexTangentBufferContext[contextIndex] = context;
			this._tangentsInvalid[contextIndex] = true;
		}
		if(this._tangentsInvalid[contextIndex]) {
			this._vertexTangentBuffer[contextIndex].uploadFromVector(this._vertexTangents,0,this._numVertices);
			this._tangentsInvalid[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexTangentBuffer[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,applyTransformation: function(transform) {
		away3d.core.base.SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBuffers(this._normalsInvalid);
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,clone: function() {
		var clone = new away3d.core.base.SubGeometry();
		clone.updateVertexData(this._vertexData.slice());
		clone.updateUVData(this._uvs.slice());
		clone.updateIndexData(this._indices.slice());
		if(this._secondaryUvs != null) clone.updateSecondaryUVData(this._secondaryUvs.slice());
		if(!this._autoDeriveVertexNormals) clone.updateVertexNormalData(this._vertexNormals.slice());
		if(!this._autoDeriveVertexTangents) clone.updateVertexTangentData(this._vertexTangents.slice());
		return clone;
	}
	,scale: function(scale) {
		away3d.core.base.SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._verticesInvalid);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		away3d.core.base.SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._uvsInvalid);
	}
	,dispose: function() {
		away3d.core.base.SubGeometryBase.prototype.dispose.call(this);
		this.disposeAllVertexBuffers();
		this._vertexBuffer = null;
		this._vertexNormalBuffer = null;
		this._uvBuffer = null;
		this._secondaryUvBuffer = null;
		this._vertexTangentBuffer = null;
		this._indexBuffer = null;
		this._uvs = null;
		this._secondaryUvs = null;
		this._vertexNormals = null;
		this._vertexTangents = null;
		this._vertexBufferContext = null;
		this._uvBufferContext = null;
		this._secondaryUvBufferContext = null;
		this._vertexNormalBufferContext = null;
		this._vertexTangentBufferContext = null;
	}
	,disposeAllVertexBuffers: function() {
		this.disposeVertexBuffers(this._vertexBuffer);
		this.disposeVertexBuffers(this._vertexNormalBuffer);
		this.disposeVertexBuffers(this._uvBuffer);
		this.disposeVertexBuffers(this._secondaryUvBuffer);
		this.disposeVertexBuffers(this._vertexTangentBuffer);
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_vertexPositionData: function() {
		return this._vertexData;
	}
	,updateVertexData: function(vertices) {
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		this._vertexData = vertices;
		var numVertices = vertices.length / 3 | 0;
		if(numVertices != this._numVertices) this.disposeAllVertexBuffers();
		this._numVertices = numVertices;
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBounds();
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) this._uvs = this.updateDummyUVs(this._uvs);
		return this._uvs;
	}
	,get_secondaryUVData: function() {
		return this._secondaryUvs;
	}
	,updateUVData: function(uvs) {
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceTangentsDirty = true;
		this._uvs = uvs;
		this.invalidateBuffers(this._uvsInvalid);
	}
	,updateSecondaryUVData: function(uvs) {
		this._secondaryUvs = uvs;
		this.invalidateBuffers(this._secondaryUvsInvalid);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		return this._vertexNormals;
	}
	,updateVertexNormalData: function(vertexNormals) {
		this._vertexNormalsDirty = false;
		this._autoDeriveVertexNormals = vertexNormals == null;
		this._vertexNormals = vertexNormals;
		this.invalidateBuffers(this._normalsInvalid);
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		return this._vertexTangents;
	}
	,updateVertexTangentData: function(vertexTangents) {
		this._vertexTangentsDirty = false;
		this._autoDeriveVertexTangents = vertexTangents == null;
		this._vertexTangents = vertexTangents;
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,fromVectors: function(vertices,uvs,normals,tangents) {
		this.updateVertexData(vertices);
		this.updateUVData(uvs);
		this.updateVertexNormalData(normals);
		this.updateVertexTangentData(tangents);
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._normalsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		this.invalidateBuffers(this._tangentsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,updateDummyUVs: function(target) {
		this.invalidateBuffers(this._uvsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateDummyUVs.call(this,target);
	}
	,disposeForStage3D: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		if(this._vertexBuffer[index] != null) {
			this._vertexBuffer[index].dispose();
			this._vertexBuffer[index] = null;
		}
		if(this._uvBuffer[index] != null) {
			this._uvBuffer[index].dispose();
			this._uvBuffer[index] = null;
		}
		if(this._secondaryUvBuffer[index] != null) {
			this._secondaryUvBuffer[index].dispose();
			this._secondaryUvBuffer[index] = null;
		}
		if(this._vertexNormalBuffer[index] != null) {
			this._vertexNormalBuffer[index].dispose();
			this._vertexNormalBuffer[index] = null;
		}
		if(this._vertexTangentBuffer[index] != null) {
			this._vertexTangentBuffer[index].dispose();
			this._vertexTangentBuffer[index] = null;
		}
		if(this._indexBuffer[index] != null) {
			this._indexBuffer[index].dispose();
			this._indexBuffer[index] = null;
		}
	}
	,get_vertexStride: function() {
		return 3;
	}
	,get_vertexTangentStride: function() {
		return 3;
	}
	,get_vertexNormalStride: function() {
		return 3;
	}
	,get_UVStride: function() {
		return 2;
	}
	,get_secondaryUVStride: function() {
		return 2;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_UVOffset: function() {
		return 0;
	}
	,get_secondaryUVOffset: function() {
		return 0;
	}
	,cloneWithSeperateBuffers: function() {
		return js.Boot.__cast(this.clone() , away3d.core.base.SubGeometry);
	}
	,__class__: away3d.core.base.SubGeometry
	,__properties__: $extend(away3d.core.base.SubGeometryBase.prototype.__properties__,{get_secondaryUVOffset:"get_secondaryUVOffset",get_secondaryUVStride:"get_secondaryUVStride",get_secondaryUVData:"get_secondaryUVData",get_numVertices:"get_numVertices"})
});
away3d.core.base.SubMesh = function(subGeometry,parentMesh,material) {
	this._uvRotation = 0;
	this._scaleU = 1;
	this._scaleV = 1;
	this._offsetU = 0;
	this._offsetV = 0;
	this._parentMesh = parentMesh;
	this._subGeometry = subGeometry;
	this.set_material(material);
};
$hxClasses["away3d.core.base.SubMesh"] = away3d.core.base.SubMesh;
away3d.core.base.SubMesh.__name__ = ["away3d","core","base","SubMesh"];
away3d.core.base.SubMesh.__interfaces__ = [away3d.core.base.IRenderable];
away3d.core.base.SubMesh.prototype = {
	get_shaderPickingDetails: function() {
		return this.get_sourceEntity().get_shaderPickingDetails();
	}
	,get_offsetU: function() {
		return this._offsetU;
	}
	,set_offsetU: function(value) {
		if(value == this._offsetU) return value;
		this._offsetU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_offsetV: function() {
		return this._offsetV;
	}
	,set_offsetV: function(value) {
		if(value == this._offsetV) return value;
		this._offsetV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,set_scaleU: function(value) {
		if(value == this._scaleU) return value;
		this._scaleU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,set_scaleV: function(value) {
		if(value == this._scaleV) return value;
		this._scaleV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_uvRotation: function() {
		return this._uvRotation;
	}
	,set_uvRotation: function(value) {
		if(value == this._uvRotation) return value;
		this._uvRotation = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_sourceEntity: function() {
		return this._parentMesh;
	}
	,get_subGeometry: function() {
		return this._subGeometry;
	}
	,set_subGeometry: function(value) {
		this._subGeometry = value;
		return value;
	}
	,get_material: function() {
		if(this._material != null) return this._material;
		return this._parentMesh.get_material();
	}
	,set_material: function(value) {
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_sceneTransform: function() {
		return this._parentMesh.get_sceneTransform();
	}
	,get_inverseSceneTransform: function() {
		return this._parentMesh.get_inverseSceneTransform();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexBuffer(index,stage3DProxy);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexNormalBuffer(index,stage3DProxy);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexTangentBuffer(index,stage3DProxy);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateUVBuffer(index,stage3DProxy);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateSecondaryUVBuffer(index,stage3DProxy);
	}
	,getIndexBuffer: function(stage3DProxy) {
		return this._subGeometry.getIndexBuffer(stage3DProxy);
	}
	,get_numTriangles: function() {
		return this._subGeometry.get_numTriangles();
	}
	,get_animator: function() {
		return this._parentMesh.get_animator();
	}
	,get_mouseEnabled: function() {
		return this._parentMesh.get_mouseEnabled() || this._parentMesh._ancestorsAllowMouseEnabled;
	}
	,get_castsShadows: function() {
		return this._parentMesh.get_castsShadows();
	}
	,get_parentMesh: function() {
		return this._parentMesh;
	}
	,set_parentMesh: function(value) {
		this._parentMesh = value;
		return value;
	}
	,get_uvTransform: function() {
		if(this._uvTransformDirty) this.updateUVTransform();
		return this._uvTransform;
	}
	,updateUVTransform: function() {
		if(this._uvTransform == null) this._uvTransform = new openfl.geom.Matrix();
		this._uvTransform.identity();
		if(this._uvRotation != 0) this._uvTransform.rotate(this._uvRotation);
		if(this._scaleU != 1 || this._scaleV != 1) this._uvTransform.scale(this._scaleU,this._scaleV);
		this._uvTransform.translate(this._offsetU,this._offsetV);
		this._uvTransformDirty = false;
	}
	,dispose: function() {
		this.set_material(null);
	}
	,get_vertexData: function() {
		return this._subGeometry.get_vertexData();
	}
	,get_indexData: function() {
		return this._subGeometry.get_indexData();
	}
	,get_UVData: function() {
		return this._subGeometry.get_UVData();
	}
	,get_bounds: function() {
		return this._parentMesh.get_bounds();
	}
	,get_visible: function() {
		return this._parentMesh.get_visible();
	}
	,get_numVertices: function() {
		return this._subGeometry.get_numVertices();
	}
	,get_vertexStride: function() {
		return this._subGeometry.get_vertexStride();
	}
	,get_UVStride: function() {
		return this._subGeometry.get_UVStride();
	}
	,get_vertexNormalData: function() {
		return this._subGeometry.get_vertexNormalData();
	}
	,get_vertexTangentData: function() {
		return this._subGeometry.get_vertexTangentData();
	}
	,get_UVOffset: function() {
		return this._subGeometry.get_UVOffset();
	}
	,get_vertexOffset: function() {
		return this._subGeometry.get_vertexOffset();
	}
	,get_vertexNormalOffset: function() {
		return this._subGeometry.get_vertexNormalOffset();
	}
	,get_vertexTangentOffset: function() {
		return this._subGeometry.get_vertexTangentOffset();
	}
	,getRenderSceneTransform: function(camera) {
		return this._parentMesh.get_sceneTransform();
	}
	,__class__: away3d.core.base.SubMesh
	,__properties__: {get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_UVOffset:"get_UVOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_UVStride:"get_UVStride",get_vertexStride:"get_vertexStride",get_numVertices:"get_numVertices",get_visible:"get_visible",get_bounds:"get_bounds",get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexData:"get_vertexData",get_uvTransform:"get_uvTransform",set_parentMesh:"set_parentMesh",get_parentMesh:"get_parentMesh",get_castsShadows:"get_castsShadows",get_mouseEnabled:"get_mouseEnabled",get_animator:"get_animator",get_numTriangles:"get_numTriangles",get_inverseSceneTransform:"get_inverseSceneTransform",get_sceneTransform:"get_sceneTransform",set_material:"set_material",get_material:"get_material",set_subGeometry:"set_subGeometry",get_subGeometry:"get_subGeometry",get_sourceEntity:"get_sourceEntity",set_uvRotation:"set_uvRotation",get_uvRotation:"get_uvRotation",set_scaleV:"set_scaleV",get_scaleV:"get_scaleV",set_scaleU:"set_scaleU",get_scaleU:"get_scaleU",set_offsetV:"set_offsetV",get_offsetV:"get_offsetV",set_offsetU:"set_offsetU",get_offsetU:"get_offsetU",get_shaderPickingDetails:"get_shaderPickingDetails"}
};
away3d.core.base.data = {};
away3d.core.base.data.ParticleData = function() {
};
$hxClasses["away3d.core.base.data.ParticleData"] = away3d.core.base.data.ParticleData;
away3d.core.base.data.ParticleData.__name__ = ["away3d","core","base","data","ParticleData"];
away3d.core.base.data.ParticleData.prototype = {
	__class__: away3d.core.base.data.ParticleData
};
away3d.core.data = {};
away3d.core.data.EntityListItem = function() {
};
$hxClasses["away3d.core.data.EntityListItem"] = away3d.core.data.EntityListItem;
away3d.core.data.EntityListItem.__name__ = ["away3d","core","data","EntityListItem"];
away3d.core.data.EntityListItem.prototype = {
	__class__: away3d.core.data.EntityListItem
};
away3d.core.data.EntityListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	this._pool = new Array();
};
$hxClasses["away3d.core.data.EntityListItemPool"] = away3d.core.data.EntityListItemPool;
away3d.core.data.EntityListItemPool.__name__ = ["away3d","core","data","EntityListItemPool"];
away3d.core.data.EntityListItemPool.prototype = {
	getItem: function() {
		var item;
		if(this._index == this._poolSize) {
			item = new away3d.core.data.EntityListItem();
			this._pool[this._index++] = item;
			++this._poolSize;
		} else item = this._pool[this._index++];
		return item;
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		this._pool = [];
	}
	,__class__: away3d.core.data.EntityListItemPool
};
away3d.core.data.RenderableListItem = function() {
};
$hxClasses["away3d.core.data.RenderableListItem"] = away3d.core.data.RenderableListItem;
away3d.core.data.RenderableListItem.__name__ = ["away3d","core","data","RenderableListItem"];
away3d.core.data.RenderableListItem.prototype = {
	__class__: away3d.core.data.RenderableListItem
};
away3d.core.data.RenderableListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	this._pool = new Array();
};
$hxClasses["away3d.core.data.RenderableListItemPool"] = away3d.core.data.RenderableListItemPool;
away3d.core.data.RenderableListItemPool.__name__ = ["away3d","core","data","RenderableListItemPool"];
away3d.core.data.RenderableListItemPool.prototype = {
	getItem: function() {
		if(this._index == this._poolSize) {
			var item = new away3d.core.data.RenderableListItem();
			this._pool[this._index++] = item;
			++this._poolSize;
			return item;
		} else return this._pool[this._index++];
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		this._pool = [];
	}
	,__class__: away3d.core.data.RenderableListItemPool
};
away3d.core.managers = {};
away3d.core.managers.AGALProgram3DCache = function(stage3DProxy) {
	this._stage3DProxy = stage3DProxy;
	this._program3Ds = new haxe.ds.StringMap();
	this._ids = new haxe.ds.StringMap();
	this._usages = [];
	this._keys = [];
};
$hxClasses["away3d.core.managers.AGALProgram3DCache"] = away3d.core.managers.AGALProgram3DCache;
away3d.core.managers.AGALProgram3DCache.__name__ = ["away3d","core","managers","AGALProgram3DCache"];
away3d.core.managers.AGALProgram3DCache._instances = null;
away3d.core.managers.AGALProgram3DCache.getInstance = function(stage3DProxy) {
	var index = stage3DProxy.get_stage3DIndex();
	if(away3d.core.managers.AGALProgram3DCache._instances == null) away3d.core.managers.AGALProgram3DCache._instances = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	if(away3d.core.managers.AGALProgram3DCache._instances[index] == null) {
		away3d.core.managers.AGALProgram3DCache._instances[index] = new away3d.core.managers.AGALProgram3DCache(stage3DProxy);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
	}
	return away3d.core.managers.AGALProgram3DCache._instances[index];
};
away3d.core.managers.AGALProgram3DCache.getInstanceFromIndex = function(index) {
	if(away3d.core.managers.AGALProgram3DCache._instances[index] == null) throw new openfl.errors.Error("Instance not created yet!");
	return away3d.core.managers.AGALProgram3DCache._instances[index];
};
away3d.core.managers.AGALProgram3DCache.onContext3DDisposed = function(event) {
	var stage3DProxy;
	stage3DProxy = js.Boot.__cast(event.target , away3d.core.managers.Stage3DProxy);
	var index = stage3DProxy.get_stage3DIndex();
	away3d.core.managers.AGALProgram3DCache._instances[index].dispose();
	away3d.core.managers.AGALProgram3DCache._instances[index] = null;
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
};
away3d.core.managers.AGALProgram3DCache.prototype = {
	dispose: function() {
		var keys = this._program3Ds.keys();
		while( keys.hasNext() ) {
			var key = keys.next();
			this.destroyProgram(key);
		}
		this._keys = null;
		this._program3Ds = null;
		this._usages = null;
	}
	,setProgram3D: function(pass,vertexCode,fragmentCode) {
		var stageIndex = this._stage3DProxy.get_stage3DIndex();
		var program;
		var key = vertexCode + "---" + fragmentCode;
		if(!this._program3Ds.exists(key)) {
			this._keys[away3d.core.managers.AGALProgram3DCache._currentId] = key;
			this._usages[away3d.core.managers.AGALProgram3DCache._currentId] = 0;
			this._ids.set(key,away3d.core.managers.AGALProgram3DCache._currentId);
			++away3d.core.managers.AGALProgram3DCache._currentId;
			program = this._stage3DProxy.get_context3D().createProgram();
			var vertexByteCode = openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode);
			var fragmentByteCode = openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode);
			program.upload(vertexByteCode,fragmentByteCode);
			this._program3Ds.set(key,program);
		}
		var oldId = pass._program3Dids[stageIndex];
		var newId = this._ids.get(key);
		if(oldId != newId) {
			if(oldId >= 0) this.freeProgram3D(oldId);
			this._usages[newId]++;
		}
		pass._program3Dids[stageIndex] = newId;
		pass._program3Ds[stageIndex] = this._program3Ds.get(key);
	}
	,freeProgram3D: function(programId) {
		this._usages[programId]--;
		if(this._usages[programId] == 0) this.destroyProgram(this._keys[programId]);
	}
	,destroyProgram: function(key) {
		this._program3Ds.get(key).dispose();
		this._program3Ds.remove(key);
		this._ids.set(key,-1);
	}
	,getKey: function(vertexCode,fragmentCode) {
		return vertexCode + "---" + fragmentCode;
	}
	,__class__: away3d.core.managers.AGALProgram3DCache
};
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.AGALProgram3DCacheSingletonEnforcer"] = away3d.core.managers.AGALProgram3DCacheSingletonEnforcer;
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer.__name__ = ["away3d","core","managers","AGALProgram3DCacheSingletonEnforcer"];
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer.prototype = {
	__class__: away3d.core.managers.AGALProgram3DCacheSingletonEnforcer
};
openfl.events.Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 1;
};
$hxClasses["openfl.events.Event"] = openfl.events.Event;
openfl.events.Event.__name__ = ["openfl","events","Event"];
openfl.events.Event.prototype = {
	clone: function() {
		var event = new openfl.events.Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__isCancelled || this.__isCancelledNow;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl.events.Event
};
away3d.events = {};
away3d.events.MouseEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl.events.Event.call(this,type,true,true);
};
$hxClasses["away3d.events.MouseEvent3D"] = away3d.events.MouseEvent3D;
away3d.events.MouseEvent3D.__name__ = ["away3d","events","MouseEvent3D"];
away3d.events.MouseEvent3D.__super__ = openfl.events.Event;
away3d.events.MouseEvent3D.prototype = $extend(openfl.events.Event.prototype,{
	stopPropagation: function() {
		openfl.events.Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent.stopPropagation();
	}
	,stopImmediatePropagation: function() {
		openfl.events.Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent.stopImmediatePropagation();
	}
	,clone: function() {
		var result = new away3d.events.MouseEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.delta = this.delta;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		result._allowedToPropagate = this._allowedToPropagate;
		return result;
	}
	,get_scenePosition: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) return (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().transformVector(this.localPosition); else return this.localPosition;
	}
	,get_sceneNormal: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) {
			var sceneNormal = (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().deltaTransformVector(this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else return this.localNormal;
	}
	,__class__: away3d.events.MouseEvent3D
	,__properties__: {get_sceneNormal:"get_sceneNormal",get_scenePosition:"get_scenePosition"}
});
away3d.core.managers.Mouse3DManager = function() {
	this._updateDirty = true;
	this._nullVector = new openfl.geom.Vector3D();
	this._mouseMoveEvent = new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_MOVE);
	this._mousePicker = away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED;
	this._childDepth = 0;
	if(away3d.core.managers.Mouse3DManager._view3Ds == null) {
		away3d.core.managers.Mouse3DManager._view3Ds = new haxe.ds.ObjectMap();
		away3d.core.managers.Mouse3DManager._view3DLookup = new Array();
	}
};
$hxClasses["away3d.core.managers.Mouse3DManager"] = away3d.core.managers.Mouse3DManager;
away3d.core.managers.Mouse3DManager.__name__ = ["away3d","core","managers","Mouse3DManager"];
away3d.core.managers.Mouse3DManager._view3Ds = null;
away3d.core.managers.Mouse3DManager._view3DLookup = null;
away3d.core.managers.Mouse3DManager._collidingObject = null;
away3d.core.managers.Mouse3DManager._previousCollidingObject = null;
away3d.core.managers.Mouse3DManager._collidingViewObjects = null;
away3d.core.managers.Mouse3DManager.prototype = {
	updateCollider: function(view) {
		away3d.core.managers.Mouse3DManager._previousCollidingView = away3d.core.managers.Mouse3DManager._collidingView;
		if(view != null) {
			if(view.get_stage3DProxy().get_bufferClear()) away3d.core.managers.Mouse3DManager._collidingViewObjects = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),away3d.core.managers.Mouse3DManager._viewCount);
			if(!view.get_shareContext()) {
				if(view == this._activeView && (this._forceMouseMove || this._updateDirty)) away3d.core.managers.Mouse3DManager._collidingObject = this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view);
			} else if(view.parent.getBounds(null).contains(view.get_mouseX() + view.get_x(),view.get_mouseY() + view.get_y())) {
				if(away3d.core.managers.Mouse3DManager._collidingViewObjects == null) away3d.core.managers.Mouse3DManager._collidingViewObjects = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),away3d.core.managers.Mouse3DManager._viewCount);
				away3d.core.managers.Mouse3DManager._collidingObject = away3d.core.managers.Mouse3DManager._collidingViewObjects[away3d.core.managers.Mouse3DManager._view3Ds.h[view.__id__]] = this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view);
			}
		}
	}
	,fireMouseEvents: function() {
		var i = 0;
		var len;
		var event;
		var dispatcher;
		if(away3d.core.managers.Mouse3DManager._collidingViewObjects != null) {
			away3d.core.managers.Mouse3DManager._collidingObject = null;
			var distance = Math.POSITIVE_INFINITY;
			var view;
			var v = away3d.core.managers.Mouse3DManager._viewCount - 1;
			while(v >= 0) {
				view = away3d.core.managers.Mouse3DManager._view3DLookup[v];
				if(away3d.core.managers.Mouse3DManager._collidingViewObjects[v] != null && (view.get_layeredView() || away3d.core.managers.Mouse3DManager._collidingViewObjects[v].rayEntryDistance < distance)) {
					distance = away3d.core.managers.Mouse3DManager._collidingViewObjects[v].rayEntryDistance;
					away3d.core.managers.Mouse3DManager._collidingObject = away3d.core.managers.Mouse3DManager._collidingViewObjects[v];
					if(view.get_layeredView()) break;
				}
				v--;
			}
		}
		if(away3d.core.managers.Mouse3DManager._collidingObject != away3d.core.managers.Mouse3DManager._previousCollidingObject) {
			if(away3d.core.managers.Mouse3DManager._previousCollidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOut,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._previousCollidingObject);
			if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOver,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._collidingObject);
		}
		if(this._forceMouseMove && away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseMove,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._collidingObject);
		len = away3d.core.managers.Mouse3DManager._queuedEvents.length;
		i = 0;
		while(i < len) {
			event = away3d.core.managers.Mouse3DManager._queuedEvents[i];
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) dispatcher.dispatchEvent(event);
			++i;
		}
		away3d.core.managers.Mouse3DManager._queuedEvents = [];
		this._updateDirty = false;
		away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
	}
	,addViewLayer: function(view) {
		var stg = view.stage;
		if(view.get_stage3DProxy().get_mouse3DManager() == null) view.get_stage3DProxy().set_mouse3DManager(this);
		if(!this.hasKey(view)) away3d.core.managers.Mouse3DManager._view3Ds.set(view,0);
		this._childDepth = 0;
		this.traverseDisplayObjects(stg);
		away3d.core.managers.Mouse3DManager._viewCount = this._childDepth;
	}
	,enableMouseListeners: function(view) {
		view.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
		view.addEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.onDoubleClick));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	}
	,disableMouseListeners: function(view) {
		view.removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
		view.removeEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.onDoubleClick));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	}
	,dispose: function() {
		this._mousePicker.dispose();
	}
	,queueDispatch: function(event,sourceEvent,collider) {
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.delta = sourceEvent.delta;
		event.screenX = sourceEvent.localX;
		event.screenY = sourceEvent.localY;
		if(collider == null) collider = away3d.core.managers.Mouse3DManager._collidingObject;
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			if(collider.localPosition != null) event.localPosition = collider.localPosition.clone(); else event.localPosition = null;
			if(collider.localNormal != null) event.localNormal = collider.localNormal.clone(); else event.localNormal = null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		away3d.core.managers.Mouse3DManager._queuedEvents.push(event);
	}
	,reThrowEvent: function(event) {
		if(this._activeView == null || this._activeView != null && !this._activeView.get_shareContext()) return;
		var keys = away3d.core.managers.Mouse3DManager._view3Ds.keys();
		while( keys.hasNext() ) {
			var v = keys.next();
			if(v != this._activeView && away3d.core.managers.Mouse3DManager._view3Ds.h[v.__id__] < away3d.core.managers.Mouse3DManager._view3Ds.h[this._activeView.__id__]) v.dispatchEvent(event);
		}
	}
	,hasKey: function(view) {
		var keys = away3d.core.managers.Mouse3DManager._view3Ds.keys();
		while( keys.hasNext() ) {
			var v = keys.next();
			if(v == view) return true;
		}
		return false;
	}
	,traverseDisplayObjects: function(container) {
	}
	,onMouseMove: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseMove,this._mouseMoveEvent = event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseOut: function(event) {
		this._activeView = null;
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOut,event,away3d.core.managers.Mouse3DManager._collidingObject);
		this._updateDirty = true;
	}
	,onMouseOver: function(event) {
		this._activeView = js.Boot.__cast(event.currentTarget , away3d.containers.View3D);
		if(away3d.core.managers.Mouse3DManager._collidingObject != null && away3d.core.managers.Mouse3DManager._previousCollidingObject != away3d.core.managers.Mouse3DManager._collidingObject) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOver,event,away3d.core.managers.Mouse3DManager._collidingObject); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onClick: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseClick,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onDoubleClick: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseDoubleClick,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseDown: function(event) {
		this._activeView = js.Boot.__cast(event.currentTarget , away3d.containers.View3D);
		this.updateCollider(this._activeView);
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseDown,event);
			away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
		} else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseUp: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseUp,event);
			away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
		} else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseWheel: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseWheel,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,get_forceMouseMove: function() {
		return this._forceMouseMove;
	}
	,set_forceMouseMove: function(value) {
		this._forceMouseMove = value;
		return value;
	}
	,get_mousePicker: function() {
		return this._mousePicker;
	}
	,set_mousePicker: function(value) {
		this._mousePicker = value;
		return value;
	}
	,__class__: away3d.core.managers.Mouse3DManager
	,__properties__: {set_mousePicker:"set_mousePicker",get_mousePicker:"get_mousePicker",set_forceMouseMove:"set_forceMouseMove",get_forceMouseMove:"get_forceMouseMove"}
};
away3d.core.managers.RTTBufferManager = function(se,stage3DProxy) {
	this._viewWidth = -1;
	this._viewHeight = -1;
	this._textureWidth = -1;
	this._textureHeight = -1;
	this._buffersInvalid = true;
	if(se == null) throw new openfl.errors.Error("No cheating the multiton!");
	this._renderToTextureRect = new openfl.geom.Rectangle();
	this._stage3DProxy = stage3DProxy;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.core.managers.RTTBufferManager"] = away3d.core.managers.RTTBufferManager;
away3d.core.managers.RTTBufferManager.__name__ = ["away3d","core","managers","RTTBufferManager"];
away3d.core.managers.RTTBufferManager._instances = null;
away3d.core.managers.RTTBufferManager.getInstance = function(stage3DProxy) {
	if(stage3DProxy == null) throw new openfl.errors.Error("stage3DProxy key cannot be null!");
	if(away3d.core.managers.RTTBufferManager._instances == null) away3d.core.managers.RTTBufferManager._instances = new haxe.ds.ObjectMap();
	var rttb = away3d.core.managers.RTTBufferManager._instances.h[stage3DProxy.__id__];
	if(rttb == null) {
		rttb = new away3d.core.managers.RTTBufferManager(new away3d.core.managers.SingletonEnforcer(),stage3DProxy);
		away3d.core.managers.RTTBufferManager._instances.set(stage3DProxy,rttb);
	}
	return rttb;
};
away3d.core.managers.RTTBufferManager.__super__ = openfl.events.EventDispatcher;
away3d.core.managers.RTTBufferManager.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_textureRatioX: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._textureRatioX;
	}
	,get_textureRatioY: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._textureRatioY;
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		if(value == this._viewWidth) return value;
		this._viewWidth = value;
		this._buffersInvalid = true;
		this._textureWidth = away3d.tools.utils.TextureUtils.getBestPowerOf2(this._viewWidth);
		if(this._textureWidth > this._viewWidth) {
			this._renderToTextureRect.x = (this._textureWidth - this._viewWidth) * .5 | 0;
			this._renderToTextureRect.width = this._viewWidth;
		} else {
			this._renderToTextureRect.x = 0;
			this._renderToTextureRect.width = this._textureWidth;
		}
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE));
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		if(value == this._viewHeight) return value;
		this._viewHeight = value;
		this._buffersInvalid = true;
		this._textureHeight = away3d.tools.utils.TextureUtils.getBestPowerOf2(this._viewHeight);
		if(this._textureHeight > this._viewHeight) {
			this._renderToTextureRect.y = (this._textureHeight - this._viewHeight) * .5 | 0;
			this._renderToTextureRect.height = this._viewHeight;
		} else {
			this._renderToTextureRect.y = 0;
			this._renderToTextureRect.height = this._textureHeight;
		}
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE));
		return value;
	}
	,get_renderToTextureVertexBuffer: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToTextureVertexBuffer;
	}
	,get_renderToScreenVertexBuffer: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToScreenVertexBuffer;
	}
	,get_indexBuffer: function() {
		return this._indexBuffer;
	}
	,get_renderToTextureRect: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToTextureRect;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,dispose: function() {
		away3d.core.managers.RTTBufferManager._instances.remove(this._stage3DProxy);
		if(this._indexBuffer != null) {
			this._indexBuffer.dispose();
			this._renderToScreenVertexBuffer.dispose();
			this._renderToTextureVertexBuffer.dispose();
			this._renderToScreenVertexBuffer = null;
			this._renderToTextureVertexBuffer = null;
			this._indexBuffer = null;
		}
	}
	,updateRTTBuffers: function() {
		var context = this._stage3DProxy.get_context3D();
		var textureVerts;
		var screenVerts;
		var x;
		var y;
		if(this._renderToTextureVertexBuffer == null) this._renderToTextureVertexBuffer = context.createVertexBuffer(4,5);
		if(this._renderToScreenVertexBuffer == null) this._renderToScreenVertexBuffer = context.createVertexBuffer(4,5);
		if(this._indexBuffer == null) {
			this._indexBuffer = context.createIndexBuffer(6);
			var tmp_data = [2,1,0,3,2,0];
			this._indexBuffer.uploadFromVector((function($this) {
				var $r;
				var vectorData = new openfl.VectorData();
				vectorData.length = tmp_data.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(tmp_data.length);
					vec = this1;
					var _g1 = 0;
					var _g = tmp_data.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = tmp_data[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)),0,6);
		}
		this._textureRatioX = x = Math.min(this._viewWidth / this._textureWidth,1);
		this._textureRatioY = y = Math.min(this._viewHeight / this._textureHeight,1);
		var u1 = (1 - x) * .5;
		var u2 = (x + 1) * .5;
		var v1 = (y + 1) * .5;
		var v2 = (1 - y) * .5;
		textureVerts = [-x,-y,u1,v1,0,x,-y,u2,v1,1,x,y,u2,v2,2,-x,y,u1,v2,3];
		screenVerts = [-1,-1,u1,v1,0,1,-1,u2,v1,1,1,1,u2,v2,2,-1,1,u1,v2,3];
		this._renderToTextureVertexBuffer.uploadFromVector(textureVerts,0,4);
		this._renderToScreenVertexBuffer.uploadFromVector(screenVerts,0,4);
		this._buffersInvalid = false;
	}
	,__class__: away3d.core.managers.RTTBufferManager
	,__properties__: {get_textureHeight:"get_textureHeight",get_textureWidth:"get_textureWidth",get_renderToTextureRect:"get_renderToTextureRect",get_indexBuffer:"get_indexBuffer",get_renderToScreenVertexBuffer:"get_renderToScreenVertexBuffer",get_renderToTextureVertexBuffer:"get_renderToTextureVertexBuffer",set_viewHeight:"set_viewHeight",get_viewHeight:"get_viewHeight",set_viewWidth:"set_viewWidth",get_viewWidth:"get_viewWidth",get_textureRatioY:"get_textureRatioY",get_textureRatioX:"get_textureRatioX"}
});
away3d.core.managers.SingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.SingletonEnforcer"] = away3d.core.managers.SingletonEnforcer;
away3d.core.managers.SingletonEnforcer.__name__ = ["away3d","core","managers","SingletonEnforcer"];
away3d.core.managers.SingletonEnforcer.prototype = {
	__class__: away3d.core.managers.SingletonEnforcer
};
away3d.core.managers.Stage3DManager = function(stage,Stage3DManagerSingletonEnforcer) {
	if(Stage3DManagerSingletonEnforcer == null) throw new openfl.errors.Error("This class is a multiton and cannot be instantiated manually. Use Stage3DManager.getInstance instead.");
	this._stage = stage;
	this.stage3DsLength = 1;
	if(away3d.core.managers.Stage3DManager._stageProxies == null) away3d.core.managers.Stage3DManager._stageProxies = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this.stage3DsLength);
};
$hxClasses["away3d.core.managers.Stage3DManager"] = away3d.core.managers.Stage3DManager;
away3d.core.managers.Stage3DManager.__name__ = ["away3d","core","managers","Stage3DManager"];
away3d.core.managers.Stage3DManager._instances = null;
away3d.core.managers.Stage3DManager._stageProxies = null;
away3d.core.managers.Stage3DManager.getInstance = function(stage) {
	if(away3d.core.managers.Stage3DManager._instances == null) away3d.core.managers.Stage3DManager._instances = new haxe.ds.ObjectMap();
	var manager = away3d.core.managers.Stage3DManager._instances.h[stage.__id__];
	if(manager == null) {
		manager = new away3d.core.managers.Stage3DManager(stage,new away3d.core.managers.Stage3DManagerSingletonEnforcer());
		away3d.core.managers.Stage3DManager._instances.set(stage,manager);
	}
	return manager;
};
away3d.core.managers.Stage3DManager.prototype = {
	getStage3DProxy: function(index,forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		if(away3d.core.managers.Stage3DManager._stageProxies[index] == null) {
			away3d.core.managers.Stage3DManager._numStageProxies++;
			away3d.core.managers.Stage3DManager._stageProxies[index] = new away3d.core.managers.Stage3DProxy(index,openfl.display3D.OpenFLStage3D.getStage3D(this._stage,index),this,forceSoftware,profile);
		}
		return away3d.core.managers.Stage3DManager._stageProxies[index];
	}
	,removeStage3DProxy: function(stage3DProxy) {
		away3d.core.managers.Stage3DManager._numStageProxies--;
		away3d.core.managers.Stage3DManager._stageProxies[stage3DProxy.get_stage3DIndex()] = null;
	}
	,getFreeStage3DProxy: function(forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		var i = 0;
		var len = this.stage3DsLength;
		while(i < len) {
			if(away3d.core.managers.Stage3DManager._stageProxies[i] == null) {
				this.getStage3DProxy(i,forceSoftware,profile);
				away3d.core.managers.Stage3DManager._stageProxies[i].set_width(this._stage.stageWidth);
				away3d.core.managers.Stage3DManager._stageProxies[i].set_height(this._stage.stageHeight);
				return away3d.core.managers.Stage3DManager._stageProxies[i];
			}
			++i;
		}
		throw new openfl.errors.Error("Too many Stage3D instances used!");
		return null;
	}
	,get_hasFreeStage3DProxy: function() {
		if((away3d.core.managers.Stage3DManager._numStageProxies | 0) < away3d.core.managers.Stage3DManager._stageProxies.length) return true; else return false;
	}
	,get_numProxySlotsFree: function() {
		return away3d.core.managers.Stage3DManager._stageProxies.length - away3d.core.managers.Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsUsed: function() {
		return away3d.core.managers.Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsTotal: function() {
		return away3d.core.managers.Stage3DManager._stageProxies.length;
	}
	,__class__: away3d.core.managers.Stage3DManager
	,__properties__: {get_numProxySlotsTotal:"get_numProxySlotsTotal",get_numProxySlotsUsed:"get_numProxySlotsUsed",get_numProxySlotsFree:"get_numProxySlotsFree",get_hasFreeStage3DProxy:"get_hasFreeStage3DProxy"}
};
away3d.core.managers.Stage3DManagerSingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.Stage3DManagerSingletonEnforcer"] = away3d.core.managers.Stage3DManagerSingletonEnforcer;
away3d.core.managers.Stage3DManagerSingletonEnforcer.__name__ = ["away3d","core","managers","Stage3DManagerSingletonEnforcer"];
away3d.core.managers.Stage3DManagerSingletonEnforcer.prototype = {
	__class__: away3d.core.managers.Stage3DManagerSingletonEnforcer
};
openfl.display.Shape = function() {
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl.display.Shape;
openfl.display.Shape.__name__ = ["openfl","display","Shape"];
openfl.display.Shape.__super__ = openfl.display.DisplayObject;
openfl.display.Shape.prototype = $extend(openfl.display.DisplayObject.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,this.__worldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.get_visible() && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__worldTransform)) {
			if(!interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) {
			this.__graphics.__render();
			if(this.__graphics.__canvas != null) {
				var context = renderSession.context;
				context.globalAlpha = this.__worldAlpha;
				var transform = this.__worldTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				if(this.get_scrollRect() == null) context.drawImage(this.__graphics.__canvas,this.__graphics.__bounds.x,this.__graphics.__bounds.y); else context.drawImage(this.__graphics.__canvas,this.get_scrollRect().x - this.__graphics.__bounds.x,this.get_scrollRect().y - this.__graphics.__bounds.y,this.get_scrollRect().width,this.get_scrollRect().height,this.__graphics.__bounds.x + this.get_scrollRect().x,this.__graphics.__bounds.y + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			}
		}
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.__graphics != null) {
			if(this.__graphics.__dirty || this.__worldAlphaChanged || this.__canvas == null && this.__graphics.__canvas != null) {
				this.__graphics.__render();
				if(this.__graphics.__canvas != null) {
					if(this.__canvas == null) {
						this.__canvas = window.document.createElement("canvas");
						this.__canvasContext = this.__canvas.getContext("2d");
						this.__initializeElement(this.__canvas,renderSession);
					}
					this.__canvas.width = this.__graphics.__canvas.width;
					this.__canvas.height = this.__graphics.__canvas.height;
					this.__canvasContext.globalAlpha = this.__worldAlpha;
					this.__canvasContext.drawImage(this.__graphics.__canvas,0,0);
				} else if(this.__canvas != null) {
					renderSession.element.removeChild(this.__canvas);
					this.__canvas = null;
					this.__style = null;
				}
			}
			if(this.__canvas != null) {
				if(this.__worldTransformChanged) {
					var transform = new openfl.geom.Matrix();
					transform.translate(this.__graphics.__bounds.x,this.__graphics.__bounds.y);
					transform = transform.mult(this.__worldTransform);
					this.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
				}
				this.__applyStyle(renderSession,false,false,true);
			}
		} else if(this.__canvas != null) {
			renderSession.element.removeChild(this.__canvas);
			this.__canvas = null;
			this.__style = null;
		}
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl.display.Graphics();
		return this.__graphics;
	}
	,__class__: openfl.display.Shape
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
openfl.geom = {};
openfl.geom.Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl.geom.Matrix;
openfl.geom.Matrix.__name__ = ["openfl","geom","Matrix"];
openfl.geom.Matrix.prototype = {
	clone: function() {
		return new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,deltaTransformPoint: function(point) {
		return new openfl.geom.Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl.geom.Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl.geom.Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl.geom.Matrix
};
away3d.core.managers.Stage3DProxy = function(stage3DIndex,stage3D,stage3DManager,forceSoftware,profile) {
	if(profile == null) profile = "baseline";
	if(forceSoftware == null) forceSoftware = false;
	this._stage3DIndex = -1;
	this._stage3DIndex = stage3DIndex;
	this._stage3D = stage3D;
	this._stage3D.x = 0;
	this._stage3D.y = 0;
	this._stage3D.visible = true;
	this._stage3DManager = stage3DManager;
	this._viewPort = new openfl.geom.Rectangle();
	this._enableDepthAndStencil = true;
	openfl.events.EventDispatcher.call(this);
	this._stage3D.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContext3DUpdate),false,1000,false);
	this.forceSoftware = forceSoftware;
	this._profile = profile;
	this.requestContext(forceSoftware,this._profile);
};
$hxClasses["away3d.core.managers.Stage3DProxy"] = away3d.core.managers.Stage3DProxy;
away3d.core.managers.Stage3DProxy.__name__ = ["away3d","core","managers","Stage3DProxy"];
away3d.core.managers.Stage3DProxy.__super__ = openfl.events.EventDispatcher;
away3d.core.managers.Stage3DProxy.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	notifyViewportUpdated: function() {
		if(this._viewportDirty) return;
		this._viewportDirty = true;
		if(!this.hasEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED)) return;
		this._viewportUpdated = new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.VIEWPORT_UPDATED);
		this.dispatchEvent(this._viewportUpdated);
	}
	,notifyEnterFrame: function() {
		if(!this.hasEventListener(openfl.events.Event.ENTER_FRAME)) return;
		if(this._enterFrame == null) this._enterFrame = new openfl.events.Event(openfl.events.Event.ENTER_FRAME);
		this.dispatchEvent(this._enterFrame);
	}
	,get_profile: function() {
		return this._profile;
	}
	,dispose: function() {
		this._stage3DManager.removeStage3DProxy(this);
		this._stage3D.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContext3DUpdate));
		this.freeContext3D();
		this._stage3D = null;
		this._stage3DManager = null;
		this._stage3DIndex = -1;
	}
	,setRenderCallback: function(func) {
		if(this._context3D != null) {
			if(this._callbackMethod != null) this._context3D.removeRenderMethod(func);
			if(func != null) this._context3D.setRenderMethod(func);
		}
		this._callbackMethod = func;
	}
	,configureBackBuffer: function(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil) {
		var oldWidth = this._backBufferWidth;
		var oldHeight = this._backBufferHeight;
		this._viewPort.width = this._backBufferWidth = backBufferWidth;
		this._viewPort.height = this._backBufferHeight = backBufferHeight;
		if(oldWidth != this._backBufferWidth || oldHeight != this._backBufferHeight) this.notifyViewportUpdated();
		this._antiAlias = antiAlias;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(this._context3D != null) this._context3D.configureBackBuffer(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil);
	}
	,get_enableDepthAndStencil: function() {
		return this._enableDepthAndStencil;
	}
	,set_enableDepthAndStencil: function(enableDepthAndStencil) {
		this._enableDepthAndStencil = enableDepthAndStencil;
		this._backBufferDirty = true;
		return enableDepthAndStencil;
	}
	,get_renderTarget: function() {
		return this._renderTarget;
	}
	,get_renderSurfaceSelector: function() {
		return this._renderSurfaceSelector;
	}
	,setRenderTarget: function(target,enableDepthAndStencil,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this._renderTarget == target && surfaceSelector == this._renderSurfaceSelector && this._enableDepthAndStencil == enableDepthAndStencil) return;
		this._renderTarget = target;
		this._renderSurfaceSelector = surfaceSelector;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(target != null) this._context3D.setRenderToTexture(target,enableDepthAndStencil,this._antiAlias,surfaceSelector); else {
			this._context3D.setRenderToBackBuffer();
			this._context3D.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
		}
	}
	,clear: function() {
		if(this._context3D == null) return;
		if(this._backBufferDirty) {
			this.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			this._backBufferDirty = false;
		}
		this._context3D.clear((this._color >> 16 & 255) / 255.0,(this._color >> 8 & 255) / 255.0,(this._color & 255) / 255.0,(this._color >> 24 & 255) / 255.0);
		this._bufferClear = true;
	}
	,present: function() {
		if(this._context3D == null) return;
		this._context3D.present();
		this._activeProgram3D = null;
		if(this._mouse3DManager != null) this._mouse3DManager.fireMouseEvents();
	}
	,get_scissorRect: function() {
		return this._scissorRect;
	}
	,set_scissorRect: function(value) {
		this._scissorRect = value;
		this._context3D.setScissorRectangle(this._scissorRect);
		return value;
	}
	,get_stage3DIndex: function() {
		return this._stage3DIndex;
	}
	,get_stage3D: function() {
		return this._stage3D;
	}
	,get_context3D: function() {
		return this._context3D;
	}
	,get_driverInfo: function() {
		if(this._context3D != null) return this._context3D.driverInfo; else return null;
	}
	,get_usesSoftwareRendering: function() {
		return this._usesSoftwareRendering;
	}
	,get_x: function() {
		return this._stage3D.x;
	}
	,set_x: function(value) {
		if(this._viewPort.x == value) return value;
		this._stage3D.x = this._viewPort.x = value;
		this.notifyViewportUpdated();
		return value;
	}
	,get_y: function() {
		return this._stage3D.y;
	}
	,set_y: function(value) {
		if(this._viewPort.y == value) return value;
		this._stage3D.y = this._viewPort.y = value;
		this.notifyViewportUpdated();
		return value;
	}
	,get_width: function() {
		return this._backBufferWidth;
	}
	,set_width: function(width) {
		if(this._viewPort.width == width) return width;
		this._viewPort.width = this._backBufferWidth = width;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return width;
	}
	,get_height: function() {
		return this._backBufferHeight;
	}
	,set_height: function(height) {
		if(this._viewPort.height == height) return height;
		this._viewPort.height = this._backBufferHeight = height;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return height;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		this._backBufferDirty = true;
		return antiAlias;
	}
	,get_viewPort: function() {
		this._viewportDirty = false;
		return this._viewPort;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(color) {
		this._color = color;
		return color;
	}
	,get_visible: function() {
		return this._stage3D.visible;
	}
	,set_visible: function(value) {
		this._stage3D.visible = value;
		return value;
	}
	,get_bufferClear: function() {
		return this._bufferClear;
	}
	,set_bufferClear: function(newBufferClear) {
		this._bufferClear = newBufferClear;
		return newBufferClear;
	}
	,get_mouse3DManager: function() {
		return this._mouse3DManager;
	}
	,set_mouse3DManager: function(value) {
		this._mouse3DManager = value;
		return value;
	}
	,get_touch3DManager: function() {
		return this._touch3DManager;
	}
	,set_touch3DManager: function(value) {
		this._touch3DManager = value;
		return value;
	}
	,freeContext3D: function() {
		if(this._context3D != null) {
			this._context3D.dispose();
			this.dispatchEvent(new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED));
		}
		this._context3D = null;
	}
	,onContext3DUpdate: function(event) {
		if(this._stage3D.context3D != null) {
			var hadContext = this._context3D != null;
			this._context3D = this._stage3D.context3D;
			this._context3D.enableErrorChecking = away3d.debug.Debug.active;
			if(this._backBufferWidth > 0 && this._backBufferHeight > 0) this._context3D.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			this.setRenderCallback(this._callbackMethod);
			this.dispatchEvent(new away3d.events.Stage3DEvent(hadContext?away3d.events.Stage3DEvent.CONTEXT3D_RECREATED:away3d.events.Stage3DEvent.CONTEXT3D_CREATED));
		} else throw new openfl.errors.Error("Rendering context lost!");
	}
	,requestContext: function(forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		if(!this._usesSoftwareRendering) this._usesSoftwareRendering = forceSoftware;
		this._profile = profile;
		var renderMode;
		if(forceSoftware) renderMode = openfl.display3D.Context3DRenderMode.SOFTWARE; else renderMode = openfl.display3D.Context3DRenderMode.AUTO;
		openfl.display3D.OpenFLStage3D.requestAGLSLContext3D(this._stage3D,Std.string(renderMode));
		this._contextRequested = true;
	}
	,onEnterFrame: function(event) {
		if(this._context3D == null) return;
		this.clear();
		this.notifyEnterFrame();
		this.present();
	}
	,recoverFromDisposal: function() {
		if(this._context3D == null) return false;
		if(this._context3D.driverInfo == "Disposed") {
			this._context3D = null;
			this.dispatchEvent(new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED));
			return false;
		}
		return true;
	}
	,clearDepthBuffer: function() {
		if(this._context3D == null) return;
		this._context3D.clear(0,0,0,1,1,0,256);
	}
	,__class__: away3d.core.managers.Stage3DProxy
	,__properties__: {set_touch3DManager:"set_touch3DManager",get_touch3DManager:"get_touch3DManager",set_mouse3DManager:"set_mouse3DManager",get_mouse3DManager:"get_mouse3DManager",set_bufferClear:"set_bufferClear",get_bufferClear:"get_bufferClear",set_visible:"set_visible",get_visible:"get_visible",set_color:"set_color",get_color:"get_color",get_viewPort:"get_viewPort",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_usesSoftwareRendering:"get_usesSoftwareRendering",get_driverInfo:"get_driverInfo",get_context3D:"get_context3D",get_stage3D:"get_stage3D",get_stage3DIndex:"get_stage3DIndex",set_scissorRect:"set_scissorRect",get_scissorRect:"get_scissorRect",get_renderSurfaceSelector:"get_renderSurfaceSelector",get_renderTarget:"get_renderTarget",set_enableDepthAndStencil:"set_enableDepthAndStencil",get_enableDepthAndStencil:"get_enableDepthAndStencil",get_profile:"get_profile"}
});
var haxe = {};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe.ds.IntMap
};
away3d.core.managers.Touch3DManager = function() {
	this._updateDirty = true;
	this._nullVector = new openfl.geom.Vector3D();
	this._touchMoveEvent = new openfl.events.TouchEvent("touchMove");
	this._touchPicker = away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED;
	this._touchPoints = new Array();
	this._touchPointFromId = new haxe.ds.IntMap();
};
$hxClasses["away3d.core.managers.Touch3DManager"] = away3d.core.managers.Touch3DManager;
away3d.core.managers.Touch3DManager.__name__ = ["away3d","core","managers","Touch3DManager"];
away3d.core.managers.Touch3DManager.prototype = {
	updateCollider: function() {
		if(this._forceTouchMove || this._updateDirty) {
			var _g1 = 0;
			var _g = this._numTouchPoints;
			while(_g1 < _g) {
				var i = _g1++;
				this._touchPoint = this._touchPoints[i];
				this._collidingObject = this._touchPicker.getViewCollision(this._touchPoint.x,this._touchPoint.y,this._view);
				away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.set(this._touchPoint.id,this._collidingObject);
			}
		}
	}
	,fireTouchEvents: function() {
		var i;
		var len;
		var event;
		var dispatcher;
		var _g1 = 0;
		var _g = this._numTouchPoints;
		while(_g1 < _g) {
			var i1 = _g1++;
			this._touchPoint = this._touchPoints[i1];
			this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(this._touchPoint.id);
			this._previousCollidingObject = away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId.get(this._touchPoint.id);
			if(this._collidingObject != this._previousCollidingObject) {
				if(this._previousCollidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_OUT,this._touchMoveEvent,this._previousCollidingObject,this._touchPoint);
				if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_OVER,this._touchMoveEvent,this._collidingObject,this._touchPoint);
			}
			if(this._forceTouchMove && this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_MOVE,this._touchMoveEvent,this._collidingObject,this._touchPoint);
		}
		len = away3d.core.managers.Touch3DManager._queuedEvents.length;
		var _g2 = 0;
		while(_g2 < len) {
			var i2 = _g2++;
			event = away3d.core.managers.Touch3DManager._queuedEvents[i2];
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) dispatcher.dispatchEvent(event);
		}
		away3d.core.managers.Touch3DManager._queuedEvents = [];
		this._updateDirty = false;
		var _g11 = 0;
		var _g3 = this._numTouchPoints;
		while(_g11 < _g3) {
			var i3 = _g11++;
			this._touchPoint = this._touchPoints[i3];
			away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId.set(this._touchPoint.id,away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(this._touchPoint.id));
		}
	}
	,enableTouchListeners: function(view) {
		view.addEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.addEventListener("touchMove",$bind(this,this.onTouchMove));
		view.addEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,disableTouchListeners: function(view) {
		view.removeEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.removeEventListener("touchMove",$bind(this,this.onTouchMove));
		view.removeEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,dispose: function() {
		this._touchPicker.dispose();
		this._touchPoints = null;
		this._touchPointFromId = null;
		away3d.core.managers.Touch3DManager._collidingObjectFromTouchId = null;
		away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId = null;
	}
	,queueDispatch: function(emitType,sourceEvent,collider,touch) {
		var event = new away3d.events.TouchEvent3D(emitType);
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.screenX = touch.x;
		event.screenY = touch.y;
		event.touchPointID = touch.id;
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			if(collider.localPosition != null) event.localPosition = collider.localPosition.clone(); else event.localPosition = null;
			if(collider.localNormal != null) event.localNormal = collider.localNormal.clone(); else event.localNormal = null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		away3d.core.managers.Touch3DManager._queuedEvents.push(event);
	}
	,onTouchBegin: function(event) {
		var touch = new away3d.core.managers.TouchPoint();
		touch.id = event.touchPointID;
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._numTouchPoints++;
		this._touchPoints.push(touch);
		this._touchPointFromId.set(touch.id,touch);
		this.updateCollider();
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_BEGIN,event,this._collidingObject,touch);
		this._updateDirty = true;
	}
	,onTouchMove: function(event) {
		var touch = this._touchPointFromId.get(event.touchPointID);
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_MOVE,this._touchMoveEvent = event,this._collidingObject,touch);
		this._updateDirty = true;
	}
	,onTouchEnd: function(event) {
		var touch = this._touchPointFromId.get(event.touchPointID);
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_END,event,this._collidingObject,touch);
		this._touchPointFromId.remove(touch.id);
		this._numTouchPoints--;
		this._touchPoints.splice(HxOverrides.indexOf(this._touchPoints,touch,0),1);
		this._updateDirty = true;
	}
	,get_forceTouchMove: function() {
		return this._forceTouchMove;
	}
	,set_forceTouchMove: function(value) {
		this._forceTouchMove = value;
		return value;
	}
	,get_touchPicker: function() {
		return this._touchPicker;
	}
	,set_touchPicker: function(value) {
		this._touchPicker = value;
		return value;
	}
	,set_view: function(value) {
		this._view = value;
		return value;
	}
	,__class__: away3d.core.managers.Touch3DManager
	,__properties__: {set_view:"set_view",set_touchPicker:"set_touchPicker",get_touchPicker:"get_touchPicker",set_forceTouchMove:"set_forceTouchMove",get_forceTouchMove:"get_forceTouchMove"}
};
away3d.core.managers.TouchPoint = function() {
};
$hxClasses["away3d.core.managers.TouchPoint"] = away3d.core.managers.TouchPoint;
away3d.core.managers.TouchPoint.__name__ = ["away3d","core","managers","TouchPoint"];
away3d.core.managers.TouchPoint.prototype = {
	__class__: away3d.core.managers.TouchPoint
};
away3d.core.math = {};
away3d.core.math.MathConsts = function() { };
$hxClasses["away3d.core.math.MathConsts"] = away3d.core.math.MathConsts;
away3d.core.math.MathConsts.__name__ = ["away3d","core","math","MathConsts"];
away3d.core.math.Matrix3DUtils = function() { };
$hxClasses["away3d.core.math.Matrix3DUtils"] = away3d.core.math.Matrix3DUtils;
away3d.core.math.Matrix3DUtils.__name__ = ["away3d","core","math","Matrix3DUtils"];
away3d.core.math.Matrix3DUtils.__properties__ = {get_CALCULATION_MATRIX:"get_CALCULATION_MATRIX",get_RAW_DATA_CONTAINER:"get_RAW_DATA_CONTAINER"}
away3d.core.math.Matrix3DUtils.RAW_DATA_CONTAINER = null;
away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER = function() {
	var value = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
away3d.core.math.Matrix3DUtils.CALCULATION_MATRIX = null;
away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX = function() {
	return new openfl.geom.Matrix3D();
};
away3d.core.math.Matrix3DUtils.quaternion2matrix = function(quarternion,m) {
	var x = quarternion.x;
	var y = quarternion.y;
	var z = quarternion.z;
	var w = quarternion.w;
	var xx = x * x;
	var xy = x * y;
	var xz = x * z;
	var xw = x * w;
	var yy = y * y;
	var yz = y * z;
	var yw = y * w;
	var zz = z * z;
	var zw = z * w;
	var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	if(0 >= raw.length && !raw.fixed) raw.length = 1;
	raw.data[0] = 1 - 2 * (yy + zz);
	if(1 >= raw.length && !raw.fixed) raw.length = 2;
	raw.data[1] = 2 * (xy + zw);
	if(2 >= raw.length && !raw.fixed) raw.length = 3;
	raw.data[2] = 2 * (xz - yw);
	if(4 >= raw.length && !raw.fixed) raw.length = 5;
	raw.data[4] = 2 * (xy - zw);
	if(5 >= raw.length && !raw.fixed) raw.length = 6;
	raw.data[5] = 1 - 2 * (xx + zz);
	if(6 >= raw.length && !raw.fixed) raw.length = 7;
	raw.data[6] = 2 * (yz + xw);
	if(8 >= raw.length && !raw.fixed) raw.length = 9;
	raw.data[8] = 2 * (xz + yw);
	if(9 >= raw.length && !raw.fixed) raw.length = 10;
	raw.data[9] = 2 * (yz - xw);
	if(10 >= raw.length && !raw.fixed) raw.length = 11;
	raw.data[10] = 1 - 2 * (xx + yy);
	var value;
	var value1;
	var value2;
	var value3;
	var value4;
	if(14 >= raw.length && !raw.fixed) raw.length = 15;
	value4 = raw.data[14] = 0;
	if(13 >= raw.length && !raw.fixed) raw.length = 14;
	value3 = raw.data[13] = value4;
	if(12 >= raw.length && !raw.fixed) raw.length = 13;
	value2 = raw.data[12] = value3;
	if(11 >= raw.length && !raw.fixed) raw.length = 12;
	value1 = raw.data[11] = value2;
	if(7 >= raw.length && !raw.fixed) raw.length = 8;
	value = raw.data[7] = value1;
	if(3 >= raw.length && !raw.fixed) raw.length = 4;
	raw.data[3] = value;
	if(15 >= raw.length && !raw.fixed) raw.length = 16;
	raw.data[15] = 1;
	if(m != null) {
		m.copyRawDataFrom(raw);
		return m;
	} else return new openfl.geom.Matrix3D(raw);
};
away3d.core.math.Matrix3DUtils.getForward = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(2,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.getUp = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(1,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.getRight = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(0,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.compare = function(m1,m2) {
	var r1 = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var r2 = m2.rawData;
	m1.copyRawDataTo(r1);
	var i = 0;
	while(i < 16) {
		if(r1.data[i] != r2.data[i]) return false;
		++i;
	}
	return true;
};
away3d.core.math.Matrix3DUtils.lookAt = function(matrix,pos,dir,up) {
	var dirN;
	var upN;
	var lftN;
	var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	lftN = new openfl.geom.Vector3D(dir.y * up.z - dir.z * up.y,dir.z * up.x - dir.x * up.z,dir.x * up.y - dir.y * up.x,1);
	lftN.normalize();
	upN = new openfl.geom.Vector3D(lftN.y * dir.z - lftN.z * dir.y,lftN.z * dir.x - lftN.x * dir.z,lftN.x * dir.y - lftN.y * dir.x,1);
	upN.normalize();
	dirN = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
	dirN.normalize();
	if(0 >= raw.length && !raw.fixed) raw.length = 1;
	raw.data[0] = lftN.x;
	if(1 >= raw.length && !raw.fixed) raw.length = 2;
	raw.data[1] = upN.x;
	if(2 >= raw.length && !raw.fixed) raw.length = 3;
	raw.data[2] = -dirN.x;
	if(3 >= raw.length && !raw.fixed) raw.length = 4;
	raw.data[3] = 0.0;
	if(4 >= raw.length && !raw.fixed) raw.length = 5;
	raw.data[4] = lftN.y;
	if(5 >= raw.length && !raw.fixed) raw.length = 6;
	raw.data[5] = upN.y;
	if(6 >= raw.length && !raw.fixed) raw.length = 7;
	raw.data[6] = -dirN.y;
	if(7 >= raw.length && !raw.fixed) raw.length = 8;
	raw.data[7] = 0.0;
	if(8 >= raw.length && !raw.fixed) raw.length = 9;
	raw.data[8] = lftN.z;
	if(9 >= raw.length && !raw.fixed) raw.length = 10;
	raw.data[9] = upN.z;
	if(10 >= raw.length && !raw.fixed) raw.length = 11;
	raw.data[10] = -dirN.z;
	if(11 >= raw.length && !raw.fixed) raw.length = 12;
	raw.data[11] = 0.0;
	if(12 >= raw.length && !raw.fixed) raw.length = 13;
	raw.data[12] = -(lftN.x * pos.x + lftN.y * pos.y + lftN.z * pos.z);
	if(13 >= raw.length && !raw.fixed) raw.length = 14;
	raw.data[13] = -(upN.x * pos.x + upN.y * pos.y + upN.z * pos.z);
	if(14 >= raw.length && !raw.fixed) raw.length = 15;
	raw.data[14] = dirN.x * pos.x + dirN.y * pos.y + dirN.z * pos.z;
	if(15 >= raw.length && !raw.fixed) raw.length = 16;
	raw.data[15] = 1.0;
	matrix.copyRawDataFrom(raw);
};
away3d.core.math.Matrix3DUtils.reflection = function(plane,target) {
	if(target == null) target = new openfl.geom.Matrix3D();
	var a = plane.a;
	var b = plane.b;
	var c = plane.c;
	var d = plane.d;
	var rawData = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var ab2 = -2 * a * b;
	var ac2 = -2 * a * c;
	var bc2 = -2 * b * c;
	if(0 >= rawData.length && !rawData.fixed) rawData.length = 1;
	rawData.data[0] = 1 - 2 * a * a;
	if(4 >= rawData.length && !rawData.fixed) rawData.length = 5;
	rawData.data[4] = ab2;
	if(8 >= rawData.length && !rawData.fixed) rawData.length = 9;
	rawData.data[8] = ac2;
	if(12 >= rawData.length && !rawData.fixed) rawData.length = 13;
	rawData.data[12] = -2 * a * d;
	if(1 >= rawData.length && !rawData.fixed) rawData.length = 2;
	rawData.data[1] = ab2;
	if(5 >= rawData.length && !rawData.fixed) rawData.length = 6;
	rawData.data[5] = 1 - 2 * b * b;
	if(9 >= rawData.length && !rawData.fixed) rawData.length = 10;
	rawData.data[9] = bc2;
	if(13 >= rawData.length && !rawData.fixed) rawData.length = 14;
	rawData.data[13] = -2 * b * d;
	if(2 >= rawData.length && !rawData.fixed) rawData.length = 3;
	rawData.data[2] = ac2;
	if(6 >= rawData.length && !rawData.fixed) rawData.length = 7;
	rawData.data[6] = bc2;
	if(10 >= rawData.length && !rawData.fixed) rawData.length = 11;
	rawData.data[10] = 1 - 2 * c * c;
	if(14 >= rawData.length && !rawData.fixed) rawData.length = 15;
	rawData.data[14] = -2 * c * d;
	if(3 >= rawData.length && !rawData.fixed) rawData.length = 4;
	rawData.data[3] = 0;
	if(7 >= rawData.length && !rawData.fixed) rawData.length = 8;
	rawData.data[7] = 0;
	if(11 >= rawData.length && !rawData.fixed) rawData.length = 12;
	rawData.data[11] = 0;
	if(15 >= rawData.length && !rawData.fixed) rawData.length = 16;
	rawData.data[15] = 1;
	target.copyRawDataFrom(rawData);
	return target;
};
away3d.core.math.Plane3D = function(a,b,c,d) {
	if(d == null) d = 0;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 0;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	if(a == 0 && b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(b == 0 && c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(a == 0 && c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
};
$hxClasses["away3d.core.math.Plane3D"] = away3d.core.math.Plane3D;
away3d.core.math.Plane3D.__name__ = ["away3d","core","math","Plane3D"];
away3d.core.math.Plane3D.prototype = {
	fromPoints: function(p0,p1,p2) {
		var d1x = p1.x - p0.x;
		var d1y = p1.y - p0.y;
		var d1z = p1.z - p0.z;
		var d2x = p2.x - p0.x;
		var d2y = p2.y - p0.y;
		var d2z = p2.z - p0.z;
		this.a = d1y * d2z - d1z * d2y;
		this.b = d1z * d2x - d1x * d2z;
		this.c = d1x * d2y - d1y * d2x;
		this.d = this.a * p0.x + this.b * p0.y + this.c * p0.z;
		if(this.a == 0 && this.b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(this.b == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(this.a == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
	}
	,fromNormalAndPoint: function(normal,point) {
		this.a = normal.x;
		this.b = normal.y;
		this.c = normal.z;
		this.d = this.a * point.x + this.b * point.y + this.c * point.z;
		if(this.a == 0 && this.b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(this.b == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(this.a == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
	}
	,normalize: function() {
		var len = 1 / Math.sqrt(this.a * this.a + this.b * this.b + this.c * this.c);
		this.a *= len;
		this.b *= len;
		this.c *= len;
		this.d *= len;
		return this;
	}
	,distance: function(p) {
		if(this._alignment == away3d.core.math.Plane3D.ALIGN_YZ_AXIS) return this.a * p.x - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XZ_AXIS) return this.b * p.y - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XY_AXIS) return this.c * p.z - this.d; else return this.a * p.x + this.b * p.y + this.c * p.z - this.d;
	}
	,classifyPoint: function(p,epsilon) {
		if(epsilon == null) epsilon = 0.01;
		if(this.d != this.d) return away3d.core.math.PlaneClassification.FRONT;
		var len;
		if(this._alignment == away3d.core.math.Plane3D.ALIGN_YZ_AXIS) len = this.a * p.x - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XZ_AXIS) len = this.b * p.y - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XY_AXIS) len = this.c * p.z - this.d; else len = this.a * p.x + this.b * p.y + this.c * p.z - this.d;
		if(len < -epsilon) return away3d.core.math.PlaneClassification.BACK; else if(len > epsilon) return away3d.core.math.PlaneClassification.FRONT; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,toString: function() {
		return "Plane3D [a:" + this.a + ", b:" + this.b + ", c:" + this.c + ", d:" + this.d + "].";
	}
	,__class__: away3d.core.math.Plane3D
};
away3d.core.math.PlaneClassification = function() { };
$hxClasses["away3d.core.math.PlaneClassification"] = away3d.core.math.PlaneClassification;
away3d.core.math.PlaneClassification.__name__ = ["away3d","core","math","PlaneClassification"];
away3d.core.math.Quaternion = function(x,y,z,w) {
	if(w == null) w = 1;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	x = 0;
	y = 0;
	z = 0;
	w = 1;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["away3d.core.math.Quaternion"] = away3d.core.math.Quaternion;
away3d.core.math.Quaternion.__name__ = ["away3d","core","math","Quaternion"];
away3d.core.math.Quaternion.prototype = {
	get_magnitude: function() {
		return Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,multiply: function(qa,qb) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		this.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
		this.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;
		this.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;
		this.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;
	}
	,multiplyVector: function(vector,target) {
		if(target == null) target = new away3d.core.math.Quaternion();
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		target.w = -this.x * x2 - this.y * y2 - this.z * z2;
		target.x = this.w * x2 + this.y * z2 - this.z * y2;
		target.y = this.w * y2 - this.x * z2 + this.z * x2;
		target.z = this.w * z2 + this.x * y2 - this.y * x2;
		return target;
	}
	,fromAxisAngle: function(axis,angle) {
		var sin_a = Math.sin(angle / 2);
		var cos_a = Math.cos(angle / 2);
		this.x = axis.x * sin_a;
		this.y = axis.y * sin_a;
		this.z = axis.z * sin_a;
		this.w = cos_a;
		this.normalize();
	}
	,slerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var dot = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;
		if(dot < 0) {
			dot = -dot;
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		if(dot < 0.95) {
			var angle = Math.acos(dot);
			var s = 1 / Math.sin(angle);
			var s1 = Math.sin(angle * (1 - t)) * s;
			var s2 = Math.sin(angle * t) * s;
			this.w = w1 * s1 + w2 * s2;
			this.x = x1 * s1 + x2 * s2;
			this.y = y1 * s1 + y2 * s2;
			this.z = z1 * s1 + z2 * s2;
		} else {
			this.w = w1 + t * (w2 - w1);
			this.x = x1 + t * (x2 - x1);
			this.y = y1 + t * (y2 - y1);
			this.z = z1 + t * (z2 - z1);
			var len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
			this.w *= len;
			this.x *= len;
			this.y *= len;
			this.z *= len;
		}
	}
	,lerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var len;
		if(w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2 < 0) {
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		this.w = w1 + t * (w2 - w1);
		this.x = x1 + t * (x2 - x1);
		this.y = y1 + t * (y2 - y1);
		this.z = z1 + t * (z2 - z1);
		len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
		this.w *= len;
		this.x *= len;
		this.y *= len;
		this.z *= len;
	}
	,fromEulerAngles: function(ax,ay,az) {
		var halfX = ax * .5;
		var halfY = ay * .5;
		var halfZ = az * .5;
		var cosX = Math.cos(halfX);
		var sinX = Math.sin(halfX);
		var cosY = Math.cos(halfY);
		var sinY = Math.sin(halfY);
		var cosZ = Math.cos(halfZ);
		var sinZ = Math.sin(halfZ);
		this.w = cosX * cosY * cosZ + sinX * sinY * sinZ;
		this.x = sinX * cosY * cosZ - cosX * sinY * sinZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
	}
	,toEulerAngles: function(target) {
		if(target == null) target = new openfl.geom.Vector3D();
		target.x = Math.atan2(2 * (this.w * this.x + this.y * this.z),1 - 2 * (this.x * this.x + this.y * this.y));
		target.y = Math.asin(2 * (this.w * this.y - this.z * this.x));
		target.z = Math.atan2(2 * (this.w * this.z + this.x * this.y),1 - 2 * (this.y * this.y + this.z * this.z));
		return target;
	}
	,normalize: function(val) {
		if(val == null) val = 1;
		var mag = val / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		this.x *= mag;
		this.y *= mag;
		this.z *= mag;
		this.w *= mag;
	}
	,toString: function() {
		return "{x:" + this.x + " y:" + this.y + " z:" + this.z + " w:" + this.w + "}";
	}
	,toMatrix3D: function(target) {
		var rawData = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		if(0 >= rawData.length && !rawData.fixed) rawData.length = 1;
		rawData.data[0] = xx - yy - zz + ww;
		if(4 >= rawData.length && !rawData.fixed) rawData.length = 5;
		rawData.data[4] = xy2 - zw2;
		if(8 >= rawData.length && !rawData.fixed) rawData.length = 9;
		rawData.data[8] = xz2 + yw2;
		if(12 >= rawData.length && !rawData.fixed) rawData.length = 13;
		rawData.data[12] = 0;
		if(1 >= rawData.length && !rawData.fixed) rawData.length = 2;
		rawData.data[1] = xy2 + zw2;
		if(5 >= rawData.length && !rawData.fixed) rawData.length = 6;
		rawData.data[5] = -xx + yy - zz + ww;
		if(9 >= rawData.length && !rawData.fixed) rawData.length = 10;
		rawData.data[9] = yz2 - xw2;
		if(13 >= rawData.length && !rawData.fixed) rawData.length = 14;
		rawData.data[13] = 0;
		if(2 >= rawData.length && !rawData.fixed) rawData.length = 3;
		rawData.data[2] = xz2 - yw2;
		if(6 >= rawData.length && !rawData.fixed) rawData.length = 7;
		rawData.data[6] = yz2 + xw2;
		if(10 >= rawData.length && !rawData.fixed) rawData.length = 11;
		rawData.data[10] = -xx - yy + zz + ww;
		if(14 >= rawData.length && !rawData.fixed) rawData.length = 15;
		rawData.data[14] = 0;
		if(3 >= rawData.length && !rawData.fixed) rawData.length = 4;
		rawData.data[3] = 0.0;
		if(7 >= rawData.length && !rawData.fixed) rawData.length = 8;
		rawData.data[7] = 0.0;
		if(11 >= rawData.length && !rawData.fixed) rawData.length = 12;
		rawData.data[11] = 0;
		if(15 >= rawData.length && !rawData.fixed) rawData.length = 16;
		rawData.data[15] = 1;
		if(target == null) return new openfl.geom.Matrix3D(rawData);
		target.copyRawDataFrom(rawData);
		return target;
	}
	,fromMatrix: function(matrix) {
		var tmp;
		tmp = matrix.decompose(openfl.geom.Orientation3D.QUATERNION);
		var v = tmp.data[1];
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,toRawData: function(target,exclude4thRow) {
		if(exclude4thRow == null) exclude4thRow = false;
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		target[0] = xx - yy - zz + ww;
		target[1] = xy2 - zw2;
		target[2] = xz2 + yw2;
		target[4] = xy2 + zw2;
		target[5] = -xx + yy - zz + ww;
		target[6] = yz2 - xw2;
		target[8] = xz2 - yw2;
		target[9] = yz2 + xw2;
		target[10] = -xx - yy + zz + ww;
		target[3] = target[7] = target[11] = 0;
		if(!exclude4thRow) {
			target[12] = target[13] = target[14] = 0;
			target[15] = 1;
		}
	}
	,clone: function() {
		return new away3d.core.math.Quaternion(this.x,this.y,this.z,this.w);
	}
	,rotatePoint: function(vector,target) {
		var x1;
		var y1;
		var z1;
		var w1;
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		if(target == null) target = new openfl.geom.Vector3D();
		w1 = -this.x * x2 - this.y * y2 - this.z * z2;
		x1 = this.w * x2 + this.y * z2 - this.z * y2;
		y1 = this.w * y2 - this.x * z2 + this.z * x2;
		z1 = this.w * z2 + this.x * y2 - this.y * x2;
		target.x = -w1 * this.x + x1 * this.w - y1 * this.z + z1 * this.y;
		target.y = -w1 * this.y + x1 * this.z + y1 * this.w - z1 * this.x;
		target.z = -w1 * this.z - x1 * this.y + y1 * this.x + z1 * this.w;
		return target;
	}
	,copyFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,__class__: away3d.core.math.Quaternion
	,__properties__: {get_magnitude:"get_magnitude"}
};
away3d.core.math.Vector3DUtils = function() { };
$hxClasses["away3d.core.math.Vector3DUtils"] = away3d.core.math.Vector3DUtils;
away3d.core.math.Vector3DUtils.__name__ = ["away3d","core","math","Vector3DUtils"];
away3d.core.math.Vector3DUtils.getAngle = function(w,q) {
	return Math.acos((w.x * q.x + w.y * q.y + w.z * q.z) / (Math.sqrt(w.x * w.x + w.y * w.y + w.z * w.z) * Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z)));
};
away3d.core.math.Vector3DUtils.matrix2euler = function(m1) {
	var m2 = new openfl.geom.Matrix3D();
	var result = new openfl.geom.Vector3D();
	var raw;
	var this1 = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	raw = value;
	m1.copyRawDataTo((function($this) {
		var $r;
		var vectorData = new openfl.VectorData();
		vectorData.length = raw.length;
		vectorData.fixed = true;
		{
			var vec;
			var this2;
			this2 = new Array(raw.length);
			vec = this2;
			var _g11 = 0;
			var _g2 = raw.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				vec[i1] = raw[i1];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
	result.x = -Math.atan2(raw[6],raw[10]);
	m2.appendRotation(result.x * 180 / away3d.core.math.Vector3DUtils.MathPI,new openfl.geom.Vector3D(1,0,0),null);
	m2.append(m1);
	m2.copyRawDataTo((function($this) {
		var $r;
		var vectorData1 = new openfl.VectorData();
		vectorData1.length = raw.length;
		vectorData1.fixed = true;
		{
			var vec1;
			var this3;
			this3 = new Array(raw.length);
			vec1 = this3;
			var _g12 = 0;
			var _g3 = raw.length;
			while(_g12 < _g3) {
				var i2 = _g12++;
				vec1[i2] = raw[i2];
			}
			vectorData1.data = vec1;
		}
		$r = vectorData1;
		return $r;
	}(this)));
	var cy = Math.sqrt(raw[0] * raw[0] + raw[1] * raw[1]);
	result.y = Math.atan2(-raw[2],cy);
	result.z = Math.atan2(-raw[4],raw[5]);
	if(Math.round(result.z / away3d.core.math.Vector3DUtils.MathPI) == 1) {
		if(result.y > 0) result.y = -(result.y - away3d.core.math.Vector3DUtils.MathPI); else result.y = -(result.y + away3d.core.math.Vector3DUtils.MathPI);
		result.z -= away3d.core.math.Vector3DUtils.MathPI;
		if(result.x > 0) result.x -= away3d.core.math.Vector3DUtils.MathPI; else result.x += away3d.core.math.Vector3DUtils.MathPI;
	} else if(Math.round(result.z / away3d.core.math.Vector3DUtils.MathPI) == -1) {
		if(result.y > 0) result.y = -(result.y - away3d.core.math.Vector3DUtils.MathPI); else result.y = -(result.y + away3d.core.math.Vector3DUtils.MathPI);
		result.z += away3d.core.math.Vector3DUtils.MathPI;
		if(result.x > 0) result.x -= away3d.core.math.Vector3DUtils.MathPI; else result.x += away3d.core.math.Vector3DUtils.MathPI;
	} else if(Math.round(result.x / away3d.core.math.Vector3DUtils.MathPI) == 1) {
		if(result.y > 0) result.y = -(result.y - away3d.core.math.Vector3DUtils.MathPI); else result.y = -(result.y + away3d.core.math.Vector3DUtils.MathPI);
		result.x -= away3d.core.math.Vector3DUtils.MathPI;
		if(result.z > 0) result.z -= away3d.core.math.Vector3DUtils.MathPI; else result.z += away3d.core.math.Vector3DUtils.MathPI;
	} else if(Math.round(result.x / away3d.core.math.Vector3DUtils.MathPI) == -1) {
		if(result.y > 0) result.y = -(result.y - away3d.core.math.Vector3DUtils.MathPI); else result.y = -(result.y + away3d.core.math.Vector3DUtils.MathPI);
		result.x += away3d.core.math.Vector3DUtils.MathPI;
		if(result.z > 0) result.z -= away3d.core.math.Vector3DUtils.MathPI; else result.z += away3d.core.math.Vector3DUtils.MathPI;
	}
	return result;
};
away3d.core.math.Vector3DUtils.quaternion2euler = function(quarternion) {
	var result = new openfl.geom.Vector3D();
	var test = quarternion.x * quarternion.y + quarternion.z * quarternion.w;
	if(test > 0.499) {
		result.x = 2 * Math.atan2(quarternion.x,quarternion.w);
		result.y = Math.PI / 2;
		result.z = 0;
		return result;
	}
	if(test < -0.499) {
		result.x = -2 * Math.atan2(quarternion.x,quarternion.w);
		result.y = -Math.PI / 2;
		result.z = 0;
		return result;
	}
	var sqx = quarternion.x * quarternion.x;
	var sqy = quarternion.y * quarternion.y;
	var sqz = quarternion.z * quarternion.z;
	result.x = Math.atan2(2 * quarternion.y * quarternion.w - 2 * quarternion.x * quarternion.z,1 - 2 * sqy - 2 * sqz);
	result.y = Math.asin(2 * test);
	result.z = Math.atan2(2 * quarternion.x * quarternion.w - 2 * quarternion.y * quarternion.z,1 - 2 * sqx - 2 * sqz);
	return result;
};
away3d.core.math.Vector3DUtils.matrix2scale = function(m) {
	var result = new openfl.geom.Vector3D();
	var raw;
	var this1 = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	raw = value;
	m.copyRawDataTo((function($this) {
		var $r;
		var vectorData = new openfl.VectorData();
		vectorData.length = raw.length;
		vectorData.fixed = true;
		{
			var vec;
			var this2;
			this2 = new Array(raw.length);
			vec = this2;
			var _g11 = 0;
			var _g2 = raw.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				vec[i1] = raw[i1];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
	result.x = Math.sqrt(raw[0] * raw[0] + raw[1] * raw[1] + raw[2] * raw[2]);
	result.y = Math.sqrt(raw[4] * raw[4] + raw[5] * raw[5] + raw[6] * raw[6]);
	result.z = Math.sqrt(raw[8] * raw[8] + raw[9] * raw[9] + raw[10] * raw[10]);
	return result;
};
away3d.core.math.Vector3DUtils.rotatePoint = function(aPoint,rotation) {
	if(rotation.x != 0 || rotation.y != 0 || rotation.z != 0) {
		var x1;
		var y1;
		var rad = away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		var rotx = rotation.x * rad;
		var roty = rotation.y * rad;
		var rotz = rotation.z * rad;
		var sinx = Math.sin(rotx);
		var cosx = Math.cos(rotx);
		var siny = Math.sin(roty);
		var cosy = Math.cos(roty);
		var sinz = Math.sin(rotz);
		var cosz = Math.cos(rotz);
		var x = aPoint.x;
		var y = aPoint.y;
		var z = aPoint.z;
		y1 = y;
		y = y1 * cosx + z * -sinx;
		z = y1 * sinx + z * cosx;
		x1 = x;
		x = x1 * cosy + z * siny;
		z = x1 * -siny + z * cosy;
		x1 = x;
		x = x1 * cosz + y * -sinz;
		y = x1 * sinz + y * cosz;
		aPoint.x = x;
		aPoint.y = y;
		aPoint.z = z;
	}
	return aPoint;
};
away3d.core.math.Vector3DUtils.subdivide = function(startVal,endVal,numSegments) {
	var points = new Array();
	var numPoints = 0;
	var stepx = (endVal.x - startVal.x) / numSegments;
	var stepy = (endVal.y - startVal.y) / numSegments;
	var stepz = (endVal.z - startVal.z) / numSegments;
	var step = 1;
	var scalestep;
	while(step < numSegments) {
		scalestep = new openfl.geom.Vector3D();
		scalestep.x = startVal.x + stepx * step;
		scalestep.y = startVal.y + stepy * step;
		scalestep.z = startVal.z + stepz * step;
		points[numPoints++] = scalestep;
		step++;
	}
	points[numPoints] = endVal;
	return points;
};
away3d.core.partition = {};
away3d.core.partition.NodeBase = function() {
	this._childNodes = new Array();
	this._numEntities = 0;
	this._collectionMark = 0;
	this._numChildNodes = 0;
};
$hxClasses["away3d.core.partition.NodeBase"] = away3d.core.partition.NodeBase;
away3d.core.partition.NodeBase.__name__ = ["away3d","core","partition","NodeBase"];
away3d.core.partition.NodeBase.prototype = {
	get_showDebugBounds: function() {
		return this._debugPrimitive != null;
	}
	,set_showDebugBounds: function(value) {
		if(js.Boot.__cast(this._debugPrimitive != null , Bool) == value) return value;
		if(value) this._debugPrimitive = this.createDebugBounds(); else {
			this._debugPrimitive.dispose();
			this._debugPrimitive = null;
		}
		var i = 0;
		while(i < this._numChildNodes) {
			this._childNodes[i].set_showDebugBounds(value);
			++i;
		}
		return value;
	}
	,get_parent: function() {
		return this._parent;
	}
	,addNode: function(node) {
		node._parent = this;
		this._numEntities += node._numEntities;
		this._childNodes[this._numChildNodes++] = node;
		node.set_showDebugBounds(this._debugPrimitive != null);
		var numEntities = node._numEntities;
		node = this;
		do node._numEntities += numEntities; while((node = node._parent) != null);
	}
	,removeNode: function(node) {
		var index = HxOverrides.indexOf(this._childNodes,node,0);
		this._childNodes[index] = this._childNodes[--this._numChildNodes];
		this._childNodes.pop();
		var numEntities = node._numEntities;
		node = this;
		do node._numEntities -= numEntities; while((node = node._parent) != null);
	}
	,isInFrustum: function(planes,numPlanes) {
		return true;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		return true;
	}
	,findPartitionForEntity: function(entity) {
		return this;
	}
	,acceptTraverser: function(traverser) {
		if(this._numEntities == 0 && this._debugPrimitive == null) return;
		if(traverser.enterNode(this)) {
			var i = 0;
			while(i < this._numChildNodes) this._childNodes[i++].acceptTraverser(traverser);
			if(this._debugPrimitive != null) traverser.applyRenderable(this._debugPrimitive);
		}
	}
	,createDebugBounds: function() {
		return null;
	}
	,get_numEntities: function() {
		return this._numEntities;
	}
	,updateNumEntities: function(value) {
		var diff = value - this._numEntities;
		var node = this;
		do node._numEntities += diff; while((node = node._parent) != null);
	}
	,__class__: away3d.core.partition.NodeBase
	,__properties__: {get_numEntities:"get_numEntities",get_parent:"get_parent",set_showDebugBounds:"set_showDebugBounds",get_showDebugBounds:"get_showDebugBounds"}
};
away3d.core.partition.EntityNode = function(entity) {
	away3d.core.partition.NodeBase.call(this);
	this._entity = entity;
	this._numEntities = 1;
};
$hxClasses["away3d.core.partition.EntityNode"] = away3d.core.partition.EntityNode;
away3d.core.partition.EntityNode.__name__ = ["away3d","core","partition","EntityNode"];
away3d.core.partition.EntityNode.__super__ = away3d.core.partition.NodeBase;
away3d.core.partition.EntityNode.prototype = $extend(away3d.core.partition.NodeBase.prototype,{
	get_entity: function() {
		return this._entity;
	}
	,acceptTraverser: function(traverser) {
		traverser.applyEntity(this._entity);
	}
	,removeFromParent: function() {
		if(this._parent != null) this._parent.removeNode(this);
		this._parent = null;
	}
	,isInFrustum: function(planes,numPlanes) {
		if(!this._entity.get_isVisible()) return false;
		return this._entity.get_worldBounds().isInFrustum(planes,numPlanes);
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		if(!this._entity.get_isVisible()) return false;
		return this._entity.isIntersectingRay(rayPosition,rayDirection);
	}
	,__class__: away3d.core.partition.EntityNode
	,__properties__: $extend(away3d.core.partition.NodeBase.prototype.__properties__,{get_entity:"get_entity"})
});
away3d.core.partition.CameraNode = function(camera) {
	away3d.core.partition.EntityNode.call(this,camera);
};
$hxClasses["away3d.core.partition.CameraNode"] = away3d.core.partition.CameraNode;
away3d.core.partition.CameraNode.__name__ = ["away3d","core","partition","CameraNode"];
away3d.core.partition.CameraNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.CameraNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	acceptTraverser: function(traverser) {
	}
	,__class__: away3d.core.partition.CameraNode
});
away3d.core.partition.DirectionalLightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.DirectionalLightNode"] = away3d.core.partition.DirectionalLightNode;
away3d.core.partition.DirectionalLightNode.__name__ = ["away3d","core","partition","DirectionalLightNode"];
away3d.core.partition.DirectionalLightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.DirectionalLightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyDirectionalLight(this._light);
		}
	}
	,__class__: away3d.core.partition.DirectionalLightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.LightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightNode"] = away3d.core.partition.LightNode;
away3d.core.partition.LightNode.__name__ = ["away3d","core","partition","LightNode"];
away3d.core.partition.LightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.LightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyUnknownLight(this._light);
		}
	}
	,__class__: away3d.core.partition.LightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.LightProbeNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightProbeNode"] = away3d.core.partition.LightProbeNode;
away3d.core.partition.LightProbeNode.__name__ = ["away3d","core","partition","LightProbeNode"];
away3d.core.partition.LightProbeNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.LightProbeNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyLightProbe(this._light);
		}
	}
	,__class__: away3d.core.partition.LightProbeNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.MeshNode = function(mesh) {
	away3d.core.partition.EntityNode.call(this,mesh);
	this._mesh = mesh;
};
$hxClasses["away3d.core.partition.MeshNode"] = away3d.core.partition.MeshNode;
away3d.core.partition.MeshNode.__name__ = ["away3d","core","partition","MeshNode"];
away3d.core.partition.MeshNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.MeshNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_mesh: function() {
		return this._mesh;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			var subs = this._mesh.get_subMeshes();
			var i = 0;
			var len = subs.length;
			while(i < len) traverser.applyRenderable(subs[i++]);
		}
	}
	,__class__: away3d.core.partition.MeshNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_mesh:"get_mesh"})
});
away3d.core.partition.NullNode = function() {
	away3d.core.partition.NodeBase.call(this);
};
$hxClasses["away3d.core.partition.NullNode"] = away3d.core.partition.NullNode;
away3d.core.partition.NullNode.__name__ = ["away3d","core","partition","NullNode"];
away3d.core.partition.NullNode.__super__ = away3d.core.partition.NodeBase;
away3d.core.partition.NullNode.prototype = $extend(away3d.core.partition.NodeBase.prototype,{
	__class__: away3d.core.partition.NullNode
});
away3d.core.partition.Partition3D = function(rootNode) {
	this._rootNode = rootNode;
	if(rootNode == null) this._rootNode = new away3d.core.partition.NullNode();
};
$hxClasses["away3d.core.partition.Partition3D"] = away3d.core.partition.Partition3D;
away3d.core.partition.Partition3D.__name__ = ["away3d","core","partition","Partition3D"];
away3d.core.partition.Partition3D.prototype = {
	get_showDebugBounds: function() {
		return this._rootNode.get_showDebugBounds();
	}
	,set_showDebugBounds: function(value) {
		this._rootNode.set_showDebugBounds(value);
		return value;
	}
	,traverse: function(traverser) {
		if(this._updatesMade) this.updateEntities();
		++away3d.core.traverse.PartitionTraverser._collectionMark;
		this._rootNode.acceptTraverser(traverser);
	}
	,markForUpdate: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t = this._updateQueue;
		while(t != null) {
			if(node == t) return;
			t = t._updateQueueNext;
		}
		node._updateQueueNext = this._updateQueue;
		this._updateQueue = node;
		this._updatesMade = true;
	}
	,removeEntity: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t;
		node.removeFromParent();
		if(node == this._updateQueue) this._updateQueue = node._updateQueueNext; else {
			t = this._updateQueue;
			while(t != null && t._updateQueueNext != node) t = t._updateQueueNext;
			if(t != null) t._updateQueueNext = node._updateQueueNext;
		}
		node._updateQueueNext = null;
		if(this._updateQueue == null) this._updatesMade = false;
	}
	,updateEntities: function() {
		var node = this._updateQueue;
		var targetNode;
		var t;
		this._updateQueue = null;
		this._updatesMade = false;
		do {
			targetNode = this._rootNode.findPartitionForEntity(node.get_entity());
			if(node.get_parent() != targetNode) {
				if(node != null) node.removeFromParent();
				targetNode.addNode(node);
			}
			t = node._updateQueueNext;
			node._updateQueueNext = null;
			node.get_entity().internalUpdate();
		} while((node = t) != null);
	}
	,__class__: away3d.core.partition.Partition3D
	,__properties__: {set_showDebugBounds:"set_showDebugBounds",get_showDebugBounds:"get_showDebugBounds"}
};
away3d.core.partition.PointLightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.PointLightNode"] = away3d.core.partition.PointLightNode;
away3d.core.partition.PointLightNode.__name__ = ["away3d","core","partition","PointLightNode"];
away3d.core.partition.PointLightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.PointLightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyPointLight(this._light);
		}
	}
	,__class__: away3d.core.partition.PointLightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.RenderableNode = function(renderable) {
	away3d.core.partition.EntityNode.call(this,js.Boot.__cast(renderable , away3d.entities.Entity));
	this._renderable = renderable;
};
$hxClasses["away3d.core.partition.RenderableNode"] = away3d.core.partition.RenderableNode;
away3d.core.partition.RenderableNode.__name__ = ["away3d","core","partition","RenderableNode"];
away3d.core.partition.RenderableNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.RenderableNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyRenderable(this._renderable);
		}
	}
	,__class__: away3d.core.partition.RenderableNode
});
away3d.core.pick = {};
away3d.core.pick.IPicker = function() { };
$hxClasses["away3d.core.pick.IPicker"] = away3d.core.pick.IPicker;
away3d.core.pick.IPicker.__name__ = ["away3d","core","pick","IPicker"];
away3d.core.pick.IPicker.prototype = {
	__class__: away3d.core.pick.IPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
away3d.core.pick.IPickingCollider = function() { };
$hxClasses["away3d.core.pick.IPickingCollider"] = away3d.core.pick.IPickingCollider;
away3d.core.pick.IPickingCollider.__name__ = ["away3d","core","pick","IPickingCollider"];
away3d.core.pick.IPickingCollider.prototype = {
	__class__: away3d.core.pick.IPickingCollider
};
away3d.core.pick.PickingCollisionVO = function(entity) {
	this.entity = entity;
};
$hxClasses["away3d.core.pick.PickingCollisionVO"] = away3d.core.pick.PickingCollisionVO;
away3d.core.pick.PickingCollisionVO.__name__ = ["away3d","core","pick","PickingCollisionVO"];
away3d.core.pick.PickingCollisionVO.prototype = {
	__class__: away3d.core.pick.PickingCollisionVO
};
away3d.core.pick.RaycastPicker = function(findClosestCollision) {
	this._raycastCollector = new away3d.core.traverse.RaycastCollector();
	this._ignoredEntities = new Array();
	this._onlyMouseEnabled = true;
	this._findClosestCollision = findClosestCollision;
	this._entities = new Array();
};
$hxClasses["away3d.core.pick.RaycastPicker"] = away3d.core.pick.RaycastPicker;
away3d.core.pick.RaycastPicker.__name__ = ["away3d","core","pick","RaycastPicker"];
away3d.core.pick.RaycastPicker.__interfaces__ = [away3d.core.pick.IPicker];
away3d.core.pick.RaycastPicker.prototype = {
	get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		if(collector.get_numMouseEnableds() == 0) return null;
		var rayPosition = view.unproject(x,y,0);
		var rayDirection = view.unproject(x,y,1);
		rayDirection = new openfl.geom.Vector3D(rayDirection.x - rayPosition.x,rayDirection.y - rayPosition.y,rayDirection.z - rayPosition.z);
		this._numEntities = 0;
		var node = collector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			if(entity.get_isVisible() && entity.isIntersectingRay(rayPosition,rayDirection)) this._entities[this._numEntities++] = entity;
			node = node.next;
		}
		if(this._numEntities == 0) return null;
		return this.getPickingCollisionVO();
	}
	,getSceneCollision: function(position,direction,scene) {
		this._raycastCollector.clear();
		this._raycastCollector.set_rayPosition(position);
		this._raycastCollector.set_rayDirection(direction);
		scene.traversePartitions(this._raycastCollector);
		this._numEntities = 0;
		var node = this._raycastCollector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			this._entities[this._numEntities++] = entity;
			node = node.next;
		}
		if(this._numEntities == 0) return null;
		return this.getPickingCollisionVO();
	}
	,getEntityCollision: function(position,direction,entities) {
		this._numEntities = 0;
		var entity;
		var _g = 0;
		while(_g < entities.length) {
			var entity1 = entities[_g];
			++_g;
			if(entity1.isIntersectingRay(position,direction)) this._entities[this._numEntities++] = entity1;
		}
		return this.getPickingCollisionVO();
	}
	,setIgnoreList: function(entities) {
		this._ignoredEntities = entities;
	}
	,isIgnored: function(entity) {
		if(this._onlyMouseEnabled && (!entity._ancestorsAllowMouseEnabled || !entity.get_mouseEnabled())) return true;
		var ignoredEntity;
		var _g = 0;
		var _g1 = this._ignoredEntities;
		while(_g < _g1.length) {
			var ignoredEntity1 = _g1[_g];
			++_g;
			if(ignoredEntity1 == entity) return true;
		}
		return false;
	}
	,sortOnNearT: function(entity1,entity2) {
		if(entity1.get_pickingCollisionVO().rayEntryDistance > entity2.get_pickingCollisionVO().rayEntryDistance) return 1; else return -1;
	}
	,getPickingCollisionVO: function() {
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._entities),this._numEntities);
		this._entities.sort($bind(this,this.sortOnNearT));
		var shortestCollisionDistance = Math.POSITIVE_INFINITY;
		var bestCollisionVO = null;
		var pickingCollisionVO;
		var entity;
		var i;
		i = 0;
		while(i < this._numEntities) {
			entity = this._entities[i];
			pickingCollisionVO = entity._pickingCollisionVO;
			if(entity.get_pickingCollider() != null) {
				if((bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) && entity.collidesBefore(shortestCollisionDistance,this._findClosestCollision)) {
					shortestCollisionDistance = pickingCollisionVO.rayEntryDistance;
					bestCollisionVO = pickingCollisionVO;
					if(!this._findClosestCollision) {
						this.updateLocalPosition(pickingCollisionVO);
						return pickingCollisionVO;
					}
				}
			} else if(bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) {
				if(!pickingCollisionVO.rayOriginIsInsideBounds) {
					this.updateLocalPosition(pickingCollisionVO);
					return pickingCollisionVO;
				}
			}
			++i;
		}
		return bestCollisionVO;
	}
	,updateLocalPosition: function(pickingCollisionVO) {
		if(pickingCollisionVO.localPosition == null) pickingCollisionVO.localPosition = new openfl.geom.Vector3D();
		var collisionPos = pickingCollisionVO.localPosition;
		var rayDir = pickingCollisionVO.localRayDirection;
		var rayPos = pickingCollisionVO.localRayPosition;
		var t = pickingCollisionVO.rayEntryDistance;
		collisionPos.x = rayPos.x + t * rayDir.x;
		collisionPos.y = rayPos.y + t * rayDir.y;
		collisionPos.z = rayPos.z + t * rayDir.z;
	}
	,dispose: function() {
	}
	,__class__: away3d.core.pick.RaycastPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
away3d.core.traverse = {};
away3d.core.traverse.PartitionTraverser = function() {
};
$hxClasses["away3d.core.traverse.PartitionTraverser"] = away3d.core.traverse.PartitionTraverser;
away3d.core.traverse.PartitionTraverser.__name__ = ["away3d","core","traverse","PartitionTraverser"];
away3d.core.traverse.PartitionTraverser.prototype = {
	enterNode: function(node) {
		return true;
	}
	,applySkyBox: function(renderable) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyRenderable: function(renderable) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyUnknownLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyDirectionalLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyPointLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyLightProbe: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyEntity: function(entity) {
		throw new away3d.errors.AbstractMethodError();
	}
	,get_entryPoint: function() {
		return this._entryPoint;
	}
	,__class__: away3d.core.traverse.PartitionTraverser
	,__properties__: {get_entryPoint:"get_entryPoint"}
};
away3d.core.traverse.EntityCollector = function() {
	away3d.core.traverse.PartitionTraverser.call(this);
	this.init();
};
$hxClasses["away3d.core.traverse.EntityCollector"] = away3d.core.traverse.EntityCollector;
away3d.core.traverse.EntityCollector.__name__ = ["away3d","core","traverse","EntityCollector"];
away3d.core.traverse.EntityCollector.__super__ = away3d.core.traverse.PartitionTraverser;
away3d.core.traverse.EntityCollector.prototype = $extend(away3d.core.traverse.PartitionTraverser.prototype,{
	init: function() {
		this._lights = new Array();
		this._directionalLights = new Array();
		this._pointLights = new Array();
		this._lightProbes = new Array();
		this._renderableListItemPool = new away3d.core.data.RenderableListItemPool();
		this._entityListItemPool = new away3d.core.data.EntityListItemPool();
		this._numEntities = 0;
		this._numLights = 0;
		this._numTriangles = 0;
		this._numMouseEnableds = 0;
		this._numDirectionalLights = 0;
		this._numPointLights = 0;
		this._numLightProbes = 0;
		this._numCullPlanes = 0;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(value) {
		this._camera = value;
		this._entryPoint = this._camera.get_scenePosition();
		this._cameraForward = this._camera.get_forwardVector();
		this._cullPlanes = this._camera.get_frustumPlanes();
		return value;
	}
	,get_cullPlanes: function() {
		return this._customCullPlanes;
	}
	,set_cullPlanes: function(value) {
		this._customCullPlanes = value;
		return value;
	}
	,get_numMouseEnableds: function() {
		return this._numMouseEnableds;
	}
	,get_skyBox: function() {
		return this._skyBox;
	}
	,get_opaqueRenderableHead: function() {
		return this._opaqueRenderableHead;
	}
	,set_opaqueRenderableHead: function(value) {
		this._opaqueRenderableHead = value;
		return value;
	}
	,get_blendedRenderableHead: function() {
		return this._blendedRenderableHead;
	}
	,set_blendedRenderableHead: function(value) {
		this._blendedRenderableHead = value;
		return value;
	}
	,get_entityHead: function() {
		return this._entityHead;
	}
	,get_lights: function() {
		return this._lights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,clear: function() {
		if(this._camera != null) {
			this._entryPoint = this._camera.get_scenePosition();
			this._cameraForward = this._camera.get_forwardVector();
		}
		if(this._customCullPlanes != null) this._cullPlanes = this._customCullPlanes; else if(this._camera != null) this._cullPlanes = this._camera.get_frustumPlanes(); else this._cullPlanes = null;
		if(this._cullPlanes != null) this._numCullPlanes = this._cullPlanes.length; else this._numCullPlanes = 0;
		this._numTriangles = this._numMouseEnableds = 0;
		this._blendedRenderableHead = null;
		this._opaqueRenderableHead = null;
		this._entityHead = null;
		this._renderableListItemPool.freeAll();
		this._entityListItemPool.freeAll();
		this._skyBox = null;
		if(this._numLights > 0) {
			this._lights = [];
			this._numLights = 0;
		}
		if(this._numDirectionalLights > 0) {
			this._directionalLights = [];
			this._numDirectionalLights = 0;
		}
		if(this._numPointLights > 0) {
			this._pointLights = [];
			this._numPointLights = 0;
		}
		if(this._numLightProbes > 0) {
			this._lightProbes = [];
			this._numLightProbes = 0;
		}
	}
	,enterNode: function(node) {
		var enter = away3d.core.traverse.PartitionTraverser._collectionMark != node._collectionMark && node.isInFrustum(this._cullPlanes,this._numCullPlanes);
		node._collectionMark = away3d.core.traverse.PartitionTraverser._collectionMark;
		return enter;
	}
	,applySkyBox: function(renderable) {
		this._skyBox = renderable;
	}
	,applyRenderable: function(renderable) {
		var material;
		var entity = renderable.get_sourceEntity();
		if(renderable.get_mouseEnabled()) ++this._numMouseEnableds;
		this._numTriangles += renderable.get_numTriangles();
		material = renderable.get_material();
		if(material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.materialId = material._uniqueId;
			item.renderOrderId = material._renderOrderId;
			item.cascaded = false;
			var dx = this._entryPoint.x - entity.get_x();
			var dy = this._entryPoint.y - entity.get_y();
			var dz = this._entryPoint.z - entity.get_z();
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z + entity.get_zOffset();
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			if(material.get_requiresBlending()) {
				item.next = this._blendedRenderableHead;
				this._blendedRenderableHead = item;
			} else {
				item.next = this._opaqueRenderableHead;
				this._opaqueRenderableHead = item;
			}
		}
	}
	,applyEntity: function(entity) {
		++this._numEntities;
		var item = this._entityListItemPool.getItem();
		item.entity = entity;
		item.next = this._entityHead;
		this._entityHead = item;
	}
	,applyUnknownLight: function(light) {
		this._lights[this._numLights++] = light;
	}
	,applyDirectionalLight: function(light) {
		this._lights[this._numLights++] = light;
		this._directionalLights[this._numDirectionalLights++] = light;
	}
	,applyPointLight: function(light) {
		this._lights[this._numLights++] = light;
		this._pointLights[this._numPointLights++] = light;
	}
	,applyLightProbe: function(light) {
		this._lights[this._numLights++] = light;
		this._lightProbes[this._numLightProbes++] = light;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,cleanUp: function() {
	}
	,__class__: away3d.core.traverse.EntityCollector
	,__properties__: $extend(away3d.core.traverse.PartitionTraverser.prototype.__properties__,{get_numTriangles:"get_numTriangles",get_lightProbes:"get_lightProbes",get_pointLights:"get_pointLights",get_directionalLights:"get_directionalLights",get_lights:"get_lights",get_entityHead:"get_entityHead",set_blendedRenderableHead:"set_blendedRenderableHead",get_blendedRenderableHead:"get_blendedRenderableHead",set_opaqueRenderableHead:"set_opaqueRenderableHead",get_opaqueRenderableHead:"get_opaqueRenderableHead",get_skyBox:"get_skyBox",get_numMouseEnableds:"get_numMouseEnableds",set_cullPlanes:"set_cullPlanes",get_cullPlanes:"get_cullPlanes",set_camera:"set_camera",get_camera:"get_camera"})
});
away3d.core.traverse.RaycastCollector = function() {
	this._rayPosition = new openfl.geom.Vector3D();
	this._rayDirection = new openfl.geom.Vector3D();
	away3d.core.traverse.EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.RaycastCollector"] = away3d.core.traverse.RaycastCollector;
away3d.core.traverse.RaycastCollector.__name__ = ["away3d","core","traverse","RaycastCollector"];
away3d.core.traverse.RaycastCollector.__super__ = away3d.core.traverse.EntityCollector;
away3d.core.traverse.RaycastCollector.prototype = $extend(away3d.core.traverse.EntityCollector.prototype,{
	get_rayPosition: function() {
		return this._rayPosition;
	}
	,set_rayPosition: function(value) {
		this._rayPosition = value;
		return value;
	}
	,get_rayDirection: function() {
		return this._rayDirection;
	}
	,set_rayDirection: function(value) {
		this._rayDirection = value;
		return value;
	}
	,enterNode: function(node) {
		return node.isIntersectingRay(this._rayPosition,this._rayDirection);
	}
	,applySkyBox: function(renderable) {
	}
	,applyRenderable: function(renderable) {
	}
	,applyUnknownLight: function(light) {
	}
	,__class__: away3d.core.traverse.RaycastCollector
	,__properties__: $extend(away3d.core.traverse.EntityCollector.prototype.__properties__,{set_rayDirection:"set_rayDirection",get_rayDirection:"get_rayDirection",set_rayPosition:"set_rayPosition",get_rayPosition:"get_rayPosition"})
});
openfl.geom.Vector3D = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl.geom.Vector3D;
openfl.geom.Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl.geom.Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl.geom.Vector3D.X_AXIS = null;
openfl.geom.Vector3D.Y_AXIS = null;
openfl.geom.Vector3D.Z_AXIS = null;
openfl.geom.Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl.geom.Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl.geom.Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl.geom.Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl.geom.Vector3D.get_X_AXIS = function() {
	return new openfl.geom.Vector3D(1,0,0);
};
openfl.geom.Vector3D.get_Y_AXIS = function() {
	return new openfl.geom.Vector3D(0,1,0);
};
openfl.geom.Vector3D.get_Z_AXIS = function() {
	return new openfl.geom.Vector3D(0,0,1);
};
openfl.geom.Vector3D.prototype = {
	add: function(a) {
		return new openfl.geom.Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl.geom.Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl.geom.Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl.geom.Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl.geom.Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
openfl.geom.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl.geom.Rectangle;
openfl.geom.Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl.geom.Rectangle.prototype = {
	clone: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl.geom.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl.geom.Rectangle();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl.geom.Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl.geom.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
away3d.core.pick.ShaderPicker = function() {
	this._onlyMouseEnabled = true;
	this._interactives = new Array();
	this._localHitPosition = new openfl.geom.Vector3D();
	this._hitUV = new openfl.geom.Point();
	this._localHitNormal = new openfl.geom.Vector3D();
	this._rayPos = new openfl.geom.Vector3D();
	this._rayDir = new openfl.geom.Vector3D();
	this._id = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),4,0);
	this._viewportData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),4,0);
	this._boundOffsetScale = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8,0);
	this._boundOffsetScale[3] = 0;
	this._boundOffsetScale[7] = 1;
};
$hxClasses["away3d.core.pick.ShaderPicker"] = away3d.core.pick.ShaderPicker;
away3d.core.pick.ShaderPicker.__name__ = ["away3d","core","pick","ShaderPicker"];
away3d.core.pick.ShaderPicker.__interfaces__ = [away3d.core.pick.IPicker];
away3d.core.pick.ShaderPicker.prototype = {
	get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		this._stage3DProxy = view.get_stage3DProxy();
		if(this._stage3DProxy == null) return null;
		this._context = this._stage3DProxy._context3D;
		this._viewportData[0] = view.get_width();
		this._viewportData[1] = view.get_height();
		this._viewportData[2] = -(this._projX = 2 * x / view.get_width() - 1);
		this._viewportData[3] = this._projY = 2 * y / view.get_height() - 1;
		this._potentialFound = false;
		this.draw(collector,null);
		this._context.setVertexBufferAt(0,null);
		if(this._context == null || !this._potentialFound) return null;
		if(this._bitmapData == null) this._bitmapData = new openfl.display.BitmapData(1,1,false,0);
		this._context.drawToBitmapData(this._bitmapData);
		this._hitColor = this._bitmapData.getPixel(0,0);
		if(this._hitColor == 0) {
			this._context.present();
			return null;
		}
		this._hitRenderable = this._interactives[this._hitColor - 1];
		this._hitEntity = this._hitRenderable.get_sourceEntity();
		if(this._onlyMouseEnabled && (!this._hitEntity._ancestorsAllowMouseEnabled || !this._hitEntity.get_mouseEnabled())) return null;
		var _collisionVO = this._hitEntity.get_pickingCollisionVO();
		if(this._hitRenderable.get_shaderPickingDetails()) {
			this.getHitDetails(view.get_camera());
			_collisionVO.localPosition = this._localHitPosition;
			_collisionVO.localNormal = this._localHitNormal;
			_collisionVO.uv = this._hitUV;
			_collisionVO.index = this._faceIndex;
			_collisionVO.subGeometryIndex = this._subGeometryIndex;
		} else {
			_collisionVO.localPosition = null;
			_collisionVO.localNormal = null;
			_collisionVO.uv = null;
			_collisionVO.index = 0;
			_collisionVO.subGeometryIndex = 0;
		}
		return _collisionVO;
	}
	,getSceneCollision: function(position,direction,scene) {
		return null;
	}
	,draw: function(entityCollector,target) {
		var camera = entityCollector.get_camera();
		this._context.clear(0,0,0,1);
		this._stage3DProxy.set_scissorRect(away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT);
		this._interactives = [];
		this._interactiveId = 0;
		if(this._objectProgram3D == null) this.initObjectProgram3D();
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		this._context.setProgram(this._objectProgram3D);
		this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,4,this._viewportData,1);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),camera);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),camera);
	}
	,drawRenderables: function(item,camera) {
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		var renderable;
		var viewProjection = camera.get_viewProjection();
		while(item != null) {
			renderable = item.renderable;
			if(renderable.get_sourceEntity().get_scene() == null || !renderable.get_mouseEnabled() && this._onlyMouseEnabled) {
				item = item.next;
				continue;
			}
			this._potentialFound = true;
			this._context.setCulling(renderable.get_material() != null && renderable.get_material().get_bothSides()?0:1028);
			this._interactives[this._interactiveId++] = renderable;
			this._id[1] = (this._interactiveId >> 8) / 255;
			this._id[2] = (this._interactiveId & 255) / 255;
			matrix.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix.append(viewProjection);
			this._context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
			this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,this._id,1);
			renderable.activateVertexBuffer(0,this._stage3DProxy);
			this._context.drawTriangles(renderable.getIndexBuffer(this._stage3DProxy),0,renderable.get_numTriangles());
			item = item.next;
		}
	}
	,updateRay: function(camera) {
		this._rayPos = camera.get_scenePosition();
		this._rayDir = camera.getRay(this._projX,this._projY,1);
		this._rayDir.normalize();
	}
	,initObjectProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._objectProgram3D = this._context.createProgram();
		vertexCode = "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, fc0";
		this._objectProgram3D.upload(openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode),openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode));
	}
	,initTriangleProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._triangleProgram3D = this._context.createProgram();
		vertexCode = "add vt0, va0, vc5 \t\t\t\n" + "mul vt0, vt0, vc6 \t\t\t\n" + "mov v0, vt0\t\t\t\t\n" + "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, v0";
		this._triangleProgram3D.upload(openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode),openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode));
	}
	,getHitDetails: function(camera) {
		this.getApproximatePosition(camera);
		this.getPreciseDetails(camera);
	}
	,getApproximatePosition: function(camera) {
		var entity = this._hitRenderable.get_sourceEntity();
		var col;
		var scX;
		var scY;
		var scZ;
		var offsX;
		var offsY;
		var offsZ;
		var localViewProjection = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		localViewProjection.copyFrom(this._hitRenderable.getRenderSceneTransform(camera));
		localViewProjection.append(camera.get_viewProjection());
		if(this._triangleProgram3D == null) this.initTriangleProgram3D();
		this._boundOffsetScale[4] = 1 / (scX = entity.get_maxX() - entity.get_minX());
		this._boundOffsetScale[5] = 1 / (scY = entity.get_maxY() - entity.get_minY());
		this._boundOffsetScale[6] = 1 / (scZ = entity.get_maxZ() - entity.get_minZ());
		this._boundOffsetScale[0] = offsX = -entity.get_minX();
		this._boundOffsetScale[1] = offsY = -entity.get_minY();
		this._boundOffsetScale[2] = offsZ = -entity.get_minZ();
		this._context.setProgram(this._triangleProgram3D);
		this._context.clear(0,0,0,0,1,0,256);
		this._context.setScissorRectangle(away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT);
		this._context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,localViewProjection,true);
		this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,5,this._boundOffsetScale,2);
		this._hitRenderable.activateVertexBuffer(0,this._stage3DProxy);
		this._context.drawTriangles(this._hitRenderable.getIndexBuffer(this._stage3DProxy),0,this._hitRenderable.get_numTriangles());
		this._context.drawToBitmapData(this._bitmapData);
		col = this._bitmapData.getPixel(0,0);
		this._localHitPosition.x = (col >> 16 & 255) * scX / 255 - offsX;
		this._localHitPosition.y = (col >> 8 & 255) * scY / 255 - offsY;
		this._localHitPosition.z = (col & 255) * scZ / 255 - offsZ;
	}
	,getPreciseDetails: function(camera) {
		var subGeom = (js.Boot.__cast(this._hitRenderable , away3d.core.base.SubMesh)).get_subGeometry();
		var indices = subGeom.get_indexData();
		var vertices = subGeom.get_vertexData();
		var len = indices.length;
		var x1;
		var y1;
		var z1;
		var x2;
		var y2;
		var z2;
		var x3;
		var y3;
		var z3;
		var i = 0;
		var j = 1;
		var k = 2;
		var t1;
		var t2;
		var t3;
		var v0x;
		var v0y;
		var v0z;
		var v1x;
		var v1y;
		var v1z;
		var v2x;
		var v2y;
		var v2z;
		var dot00;
		var dot01;
		var dot02;
		var dot11;
		var dot12;
		var s;
		var t;
		var invDenom;
		var uvs = subGeom.get_UVData();
		var normals = subGeom.get_faceNormals();
		var x = this._localHitPosition.x;
		var y = this._localHitPosition.y;
		var z = this._localHitPosition.z;
		var u;
		var v;
		var ui1;
		var ui2;
		var ui3;
		var s0x;
		var s0y;
		var s0z;
		var s1x;
		var s1y;
		var s1z;
		var nl;
		var stride = subGeom.get_vertexStride();
		var vertexOffset = subGeom.get_vertexOffset();
		this.updateRay(camera);
		while(i < len) {
			t1 = vertexOffset + indices[i] * stride;
			t2 = vertexOffset + indices[j] * stride;
			t3 = vertexOffset + indices[k] * stride;
			x1 = vertices[t1];
			y1 = vertices[t1 + 1];
			z1 = vertices[t1 + 2];
			x2 = vertices[t2];
			y2 = vertices[t2 + 1];
			z2 = vertices[t2 + 2];
			x3 = vertices[t3];
			y3 = vertices[t3 + 1];
			z3 = vertices[t3 + 2];
			if(!(x < x1 && x < x2 && x < x3 || y < y1 && y < y2 && y < y3 || z < z1 && z < z2 && z < z3 || x > x1 && x > x2 && x > x3 || y > y1 && y > y2 && y > y3 || z > z1 && z > z2 && z > z3)) {
				v0x = x3 - x1;
				v0y = y3 - y1;
				v0z = z3 - z1;
				v1x = x2 - x1;
				v1y = y2 - y1;
				v1z = z2 - z1;
				v2x = x - x1;
				v2y = y - y1;
				v2z = z - z1;
				dot00 = v0x * v0x + v0y * v0y + v0z * v0z;
				dot01 = v0x * v1x + v0y * v1y + v0z * v1z;
				dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
				dot11 = v1x * v1x + v1y * v1y + v1z * v1z;
				dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
				invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
				s = (dot11 * dot02 - dot01 * dot12) * invDenom;
				t = (dot00 * dot12 - dot01 * dot02) * invDenom;
				if(s >= 0 && t >= 0 && s + t <= 1) {
					this.getPrecisePosition(this._hitRenderable.get_inverseSceneTransform(),normals[i],normals[i + 1],normals[i + 2],x1,y1,z1);
					v2x = this._localHitPosition.x - x1;
					v2y = this._localHitPosition.y - y1;
					v2z = this._localHitPosition.z - z1;
					s0x = x2 - x1;
					s0y = y2 - y1;
					s0z = z2 - z1;
					s1x = x3 - x1;
					s1y = y3 - y1;
					s1z = z3 - z1;
					this._localHitNormal.x = s0y * s1z - s0z * s1y;
					this._localHitNormal.y = s0z * s1x - s0x * s1z;
					this._localHitNormal.z = s0x * s1y - s0y * s1x;
					nl = 1 / Math.sqrt(this._localHitNormal.x * this._localHitNormal.x + this._localHitNormal.y * this._localHitNormal.y + this._localHitNormal.z * this._localHitNormal.z);
					this._localHitNormal.x *= nl;
					this._localHitNormal.y *= nl;
					this._localHitNormal.z *= nl;
					dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
					dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
					s = (dot11 * dot02 - dot01 * dot12) * invDenom;
					t = (dot00 * dot12 - dot01 * dot02) * invDenom;
					ui1 = indices[i] << 1;
					ui2 = indices[j] << 1;
					ui3 = indices[k] << 1;
					u = uvs[ui1];
					v = uvs[ui1 + 1];
					this._hitUV.x = u + t * (uvs[ui2] - u) + s * (uvs[ui3] - u);
					this._hitUV.y = v + t * (uvs[ui2 + 1] - v) + s * (uvs[ui3 + 1] - v);
					this._faceIndex = i;
					this._subGeometryIndex = away3d.tools.utils.GeomUtil.getMeshSubMeshIndex(js.Boot.__cast(this._hitRenderable , away3d.core.base.SubMesh));
					return;
				}
			}
			i += 3;
			j += 3;
			k += 3;
		}
	}
	,getPrecisePosition: function(invSceneTransform,nx,ny,nz,px,py,pz) {
		var rx;
		var ry;
		var rz;
		var ox;
		var oy;
		var oz;
		var t;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var cx = this._rayPos.x;
		var cy = this._rayPos.y;
		var cz = this._rayPos.z;
		ox = this._rayDir.x;
		oy = this._rayDir.y;
		oz = this._rayDir.z;
		invSceneTransform.copyRawDataTo(raw);
		rx = raw.data[0] * ox + raw.data[4] * oy + raw.data[8] * oz;
		ry = raw.data[1] * ox + raw.data[5] * oy + raw.data[9] * oz;
		rz = raw.data[2] * ox + raw.data[6] * oy + raw.data[10] * oz;
		ox = raw.data[0] * cx + raw.data[4] * cy + raw.data[8] * cz + raw.data[12];
		oy = raw.data[1] * cx + raw.data[5] * cy + raw.data[9] * cz + raw.data[13];
		oz = raw.data[2] * cx + raw.data[6] * cy + raw.data[10] * cz + raw.data[14];
		t = ((px - ox) * nx + (py - oy) * ny + (pz - oz) * nz) / (rx * nx + ry * ny + rz * nz);
		this._localHitPosition.x = ox + rx * t;
		this._localHitPosition.y = oy + ry * t;
		this._localHitPosition.z = oz + rz * t;
	}
	,dispose: function() {
		this._bitmapData.dispose();
		if(this._triangleProgram3D != null) this._triangleProgram3D.dispose();
		if(this._objectProgram3D != null) this._objectProgram3D.dispose();
		this._triangleProgram3D = null;
		this._objectProgram3D = null;
		this._bitmapData = null;
		this._hitRenderable = null;
		this._hitEntity = null;
	}
	,__class__: away3d.core.pick.ShaderPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
openfl.geom.Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl.geom.Point;
openfl.geom.Point.__name__ = ["openfl","geom","Point"];
openfl.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl.geom.Point.interpolate = function(pt1,pt2,f) {
	return new openfl.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl.geom.Point.polar = function(len,angle) {
	return new openfl.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl.geom.Point.prototype = {
	add: function(v) {
		return new openfl.geom.Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl.geom.Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl.geom.Point
	,__properties__: {get_length:"get_length"}
};
away3d.utils = {};
away3d.utils.ArrayUtils = function() { };
$hxClasses["away3d.utils.ArrayUtils"] = away3d.utils.ArrayUtils;
away3d.utils.ArrayUtils.__name__ = ["away3d","utils","ArrayUtils"];
away3d.utils.ArrayUtils.reSize = function(either,count,defaultValue) {
	{
		var _g = either;
		switch(_g[1]) {
		case 0:
			var arr = _g[2];
			var c = arr.length;
			while(c < count) {
				arr.push(defaultValue);
				c++;
			}
			while(c > count) {
				arr.pop();
				c--;
			}
			var _g2 = 0;
			var _g1 = arr.length;
			while(_g2 < _g1) {
				var i = _g2++;
				arr[i] = defaultValue;
			}
			break;
		case 1:
			var arr1 = _g[2];
			var c1 = arr1.length;
			while(c1 < count) {
				var x = defaultValue;
				if(!arr1.fixed) {
					arr1.length++;
					if(arr1.data.length < arr1.length) {
						var data;
						var this1;
						this1 = new Array(arr1.data.length + 10);
						data = this1;
						haxe.ds._Vector.Vector_Impl_.blit(arr1.data,0,data,0,arr1.data.length);
						arr1.data = data;
					}
					arr1.data[arr1.length - 1] = x;
				}
				arr1.length;
				c1++;
			}
			while(c1 > count) {
				openfl._Vector.Vector_Impl_.pop(arr1);
				c1--;
			}
			var _g21 = 0;
			var _g11 = arr1.length;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var value = defaultValue;
				if(i1 >= arr1.length && !arr1.fixed) arr1.length = i1 + 1;
				arr1.data[i1] = value;
			}
			break;
		}
	}
};
away3d.utils.ArrayUtils.Prefill = function(either,count,elem) {
	{
		var _g = either;
		switch(_g[1]) {
		case 0:
			var arr = _g[2];
			arr.splice(0,arr.length);
			var c = 0;
			while(c++ < count) arr.push(elem);
			return arr;
		case 1:
			var vec = _g[2];
			openfl._Vector.Vector_Impl_.splice(vec,0,vec.length);
			var c1 = 0;
			while(c1++ < count) {
				if(!vec.fixed) {
					vec.length++;
					if(vec.data.length < vec.length) {
						var data;
						var this1;
						this1 = new Array(vec.data.length + 10);
						data = this1;
						haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data,0,vec.data.length);
						vec.data = data;
					}
					vec.data[vec.length - 1] = elem;
				}
				vec.length;
			}
			return vec;
		}
	}
};
openfl._Vector = {};
openfl._Vector.Vector_Impl_ = function() { };
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl._Vector.Vector_Impl_;
openfl._Vector.Vector_Impl_.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl._Vector.Vector_Impl_._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl._Vector.Vector_Impl_.concat = function(this1,a) {
	var vectorData = new openfl.VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.copy = function(this1) {
	var vectorData = new openfl.VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.iterator = function(this1) {
	return new openfl.VectorDataIterator(this1);
};
openfl._Vector.Vector_Impl_.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl._Vector.Vector_Impl_.pop = function(this1) {
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			return this1.data[this1.length];
		}
	}
	return null;
};
openfl._Vector.Vector_Impl_.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl._Vector.Vector_Impl_.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl._Vector.Vector_Impl_.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		var value = this1.data[0];
		this1.length--;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl._Vector.Vector_Impl_.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl.VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.sort = function(this1,f) {
	var array = haxe.ds._Vector.Vector_Impl_.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl.VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl._Vector.Vector_Impl_.toString = function(this1) {
	return "";
};
openfl._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) return i;
	}
	return -1;
};
openfl._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) return i;
		i--;
	}
	return -1;
};
openfl._Vector.Vector_Impl_.ofArray = function(a) {
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.convert = function(v) {
	return v;
};
openfl._Vector.Vector_Impl_.arrayAccess = function(this1,key) {
	return this1.data[key];
};
openfl._Vector.Vector_Impl_.arrayWrite = function(this1,key,value) {
	if(key >= this1.length && !this1.fixed) this1.length = key + 1;
	return this1.data[key] = value;
};
openfl._Vector.Vector_Impl_.fromArray = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toArray = function(this1) {
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl._Vector.Vector_Impl_.fromHaxeVector = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toHaxeVector = function(this1) {
	return this1.data;
};
openfl._Vector.Vector_Impl_.fromVectorData = function(value) {
	return value;
};
openfl._Vector.Vector_Impl_.toVectorData = function(this1) {
	return this1;
};
openfl._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
openfl._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl._Vector.Vector_Impl_.get_fixed = function(this1) {
	return this1.fixed;
};
openfl._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl.VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl.VectorData;
openfl.VectorData.__name__ = ["openfl","VectorData"];
openfl.VectorData.prototype = {
	__class__: openfl.VectorData
};
haxe.ds._Vector = {};
haxe.ds._Vector.Vector_Impl_ = function() { };
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe.ds._Vector.Vector_Impl_;
haxe.ds._Vector.Vector_Impl_.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe.ds._Vector.Vector_Impl_.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe.ds._Vector.Vector_Impl_.toArray = function(this1) {
	var a = new Array();
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
away3d.utils._ArrayUtils = {};
away3d.utils._ArrayUtils.AcceptEither_Impl_ = function() { };
$hxClasses["away3d.utils._ArrayUtils.AcceptEither_Impl_"] = away3d.utils._ArrayUtils.AcceptEither_Impl_;
away3d.utils._ArrayUtils.AcceptEither_Impl_.__name__ = ["away3d","utils","_ArrayUtils","AcceptEither_Impl_"];
away3d.utils._ArrayUtils.AcceptEither_Impl_.__properties__ = {get_type:"get_type",get_value:"get_value"}
away3d.utils._ArrayUtils.AcceptEither_Impl_._new = function(e) {
	return e;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.get_value = function(this1) {
	switch(this1[1]) {
	case 0:
		var v = this1[2];
		return v;
	case 1:
		var v = this1[2];
		return v;
	}
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.get_type = function(this1) {
	return this1;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA = function(v) {
	var e = away3d.utils.Either.Left(v);
	return e;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB = function(v) {
	var e = away3d.utils.Either.Right(v);
	return e;
};
away3d.utils.Either = $hxClasses["away3d.utils.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"] };
away3d.utils.Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = away3d.utils.Either; $x.toString = $estr; return $x; };
away3d.utils.Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = away3d.utils.Either; $x.toString = $estr; return $x; };
away3d.core.pick.PickingType = function() { };
$hxClasses["away3d.core.pick.PickingType"] = away3d.core.pick.PickingType;
away3d.core.pick.PickingType.__name__ = ["away3d","core","pick","PickingType"];
away3d.core.render = {};
away3d.core.render.BackgroundImageRenderer = function(stage3DProxy) {
	this.set_stage3DProxy(stage3DProxy);
};
$hxClasses["away3d.core.render.BackgroundImageRenderer"] = away3d.core.render.BackgroundImageRenderer;
away3d.core.render.BackgroundImageRenderer.__name__ = ["away3d","core","render","BackgroundImageRenderer"];
away3d.core.render.BackgroundImageRenderer.prototype = {
	get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) return value;
		this._stage3DProxy = value;
		this.removeBuffers();
		return value;
	}
	,removeBuffers: function() {
		if(this._vertexBuffer != null) {
			this._vertexBuffer.dispose();
			this._vertexBuffer = null;
			this._program3d.dispose();
			this._program3d = null;
			this._indexBuffer.dispose();
			this._indexBuffer = null;
		}
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1";
	}
	,getFragmentCode: function() {
		var format;
		var _sw0_ = this._texture.get_format();
		switch(_sw0_[1]) {
		case 1:
			format = "dxt1,";
			break;
		case 2:
			format = "dxt5,";
			break;
		default:
			format = "";
		}
		return "tex ft0, v0, fs0 <2d, " + format + "linear>\t\n" + "mov oc, ft0";
	}
	,dispose: function() {
		this.removeBuffers();
	}
	,render: function() {
	}
	,initBuffers: function(context) {
		this._vertexBuffer = context.createVertexBuffer(4,4);
		this._program3d = context.createProgram();
		this._indexBuffer = context.createIndexBuffer(6);
		this._indexBuffer.uploadFromVector((function($this) {
			var $r;
			var a = [2,1,0,3,2,0];
			var vectorData = new openfl.VectorData();
			vectorData.length = a.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(a.length);
				vec = this1;
				var _g1 = 0;
				var _g = a.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = a[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)),0,6);
		this._program3d.upload(openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,this.getVertexCode()),openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,this.getFragmentCode()));
		var w = 2;
		var h = 2;
		var x = -1;
		var y = 1;
		if(this._stage3DProxy.get_scissorRect() != null) {
			x = (this._stage3DProxy.get_scissorRect().x * 2 - this._stage3DProxy.get_viewPort().width) / this._stage3DProxy.get_viewPort().width;
			y = (this._stage3DProxy.get_scissorRect().y * 2 - this._stage3DProxy.get_viewPort().height) / this._stage3DProxy.get_viewPort().height * -1;
			w = 2 / (this._stage3DProxy.get_viewPort().width / this._stage3DProxy.get_scissorRect().width);
			h = 2 / (this._stage3DProxy.get_viewPort().height / this._stage3DProxy.get_scissorRect().height);
		}
		this._vertexBuffer.uploadFromVector([x,y - h,0,1,x + w,y - h,1,1,x + w,y,1,0,x,y,0,0],0,4);
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		this._texture = value;
		return value;
	}
	,__class__: away3d.core.render.BackgroundImageRenderer
	,__properties__: {set_texture:"set_texture",get_texture:"get_texture",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy"}
};
away3d.core.render.RendererBase = function(renderToTexture) {
	if(renderToTexture == null) renderToTexture = false;
	this._backgroundR = 0;
	this._backgroundG = 0;
	this._backgroundB = 0;
	this._backgroundAlpha = 1;
	this._shareContext = false;
	this._textureRatioX = 1;
	this._textureRatioY = 1;
	this._clearOnRender = true;
	this._rttViewProjectionMatrix = new openfl.geom.Matrix3D();
	this._renderableSorter = new away3d.core.sort.RenderableMergeSort();
	this._renderToTexture = renderToTexture;
};
$hxClasses["away3d.core.render.RendererBase"] = away3d.core.render.RendererBase;
away3d.core.render.RendererBase.__name__ = ["away3d","core","render","RendererBase"];
away3d.core.render.RendererBase.prototype = {
	createEntityCollector: function() {
		return new away3d.core.traverse.EntityCollector();
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		this._viewWidth = value;
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		this._viewHeight = value;
		return value;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,get_renderableSorter: function() {
		return this._renderableSorter;
	}
	,set_renderableSorter: function(value) {
		this._renderableSorter = value;
		return value;
	}
	,get_clearOnRender: function() {
		return this._clearOnRender;
	}
	,set_clearOnRender: function(value) {
		this._clearOnRender = value;
		return value;
	}
	,get_backgroundR: function() {
		return this._backgroundR;
	}
	,set_backgroundR: function(value) {
		this._backgroundR = value;
		return value;
	}
	,get_backgroundG: function() {
		return this._backgroundG;
	}
	,set_backgroundG: function(value) {
		this._backgroundG = value;
		return value;
	}
	,get_backgroundB: function() {
		return this._backgroundB;
	}
	,set_backgroundB: function(value) {
		this._backgroundB = value;
		return value;
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) return value;
		if(value == null) {
			if(this._stage3DProxy != null) {
				this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,$bind(this,this.onContextUpdate));
				this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,$bind(this,this.onContextUpdate));
			}
			this._stage3DProxy = null;
			this._context = null;
			return null;
		}
		this._stage3DProxy = value;
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,$bind(this,this.onContextUpdate));
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,$bind(this,this.onContextUpdate));
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.set_stage3DProxy(value);
		if(value.get_context3D() != null) this._context = value.get_context3D();
		return value;
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		this._shareContext = value;
		return value;
	}
	,dispose: function() {
		this.set_stage3DProxy(null);
		if(this._backgroundImageRenderer != null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
	}
	,render: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(this._stage3DProxy == null || this._context == null) return;
		this._rttViewProjectionMatrix.copyFrom(entityCollector.get_camera().get_viewProjection());
		this._rttViewProjectionMatrix.appendScale(this._textureRatioX,this._textureRatioY,1);
		this.executeRender(entityCollector,target,scissorRect,surfaceSelector);
		var i = 0;
		while(i < 8) {
			this._context.setVertexBufferAt(i,null);
			this._context.setTextureAt(i,null);
			++i;
		}
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		this._renderTarget = target;
		this._renderTargetSurface = surfaceSelector;
		if(this._renderableSorter != null) this._renderableSorter.sort(entityCollector);
		if(this._renderToTexture) this.executeRenderToTexturePass(entityCollector);
		this._stage3DProxy.setRenderTarget(target,true,surfaceSelector);
		if((target != null || !this._shareContext) && this._clearOnRender) this._context.clear(this._backgroundR,this._backgroundG,this._backgroundB,this._backgroundAlpha,1,0);
		this._context.setDepthTest(false,519);
		this._stage3DProxy.set_scissorRect(scissorRect);
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.render();
		this.draw(entityCollector,target);
		this._context.setDepthTest(false,515);
		if(!this._shareContext) {
			if(this._snapshotRequired && this._snapshotBitmapData != null) {
				this._context.drawToBitmapData(this._snapshotBitmapData);
				this._snapshotRequired = false;
			}
		}
		this._stage3DProxy.set_scissorRect(null);
	}
	,queueSnapshot: function(bmd) {
		this._snapshotRequired = true;
		this._snapshotBitmapData = bmd;
	}
	,executeRenderToTexturePass: function(entityCollector) {
		throw new away3d.errors.AbstractMethodError();
	}
	,draw: function(entityCollector,target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,onContextUpdate: function(event) {
		this._context = this._stage3DProxy.get_context3D();
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		this._backgroundAlpha = value;
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		if(this._backgroundImageRenderer != null && value == null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
		if(this._backgroundImageRenderer == null && value != null) this._backgroundImageRenderer = new away3d.core.render.BackgroundImageRenderer(this._stage3DProxy);
		this._background = value;
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.set_texture(value);
		return value;
	}
	,get_backgroundImageRenderer: function() {
		return this._backgroundImageRenderer;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		return antiAlias;
	}
	,get_textureRatioX: function() {
		return this._textureRatioX;
	}
	,set_textureRatioX: function(value) {
		this._textureRatioX = value;
		return value;
	}
	,get_textureRatioY: function() {
		return this._textureRatioY;
	}
	,set_textureRatioY: function(value) {
		this._textureRatioY = value;
		return value;
	}
	,__class__: away3d.core.render.RendererBase
	,__properties__: {set_textureRatioY:"set_textureRatioY",get_textureRatioY:"get_textureRatioY",set_textureRatioX:"set_textureRatioX",get_textureRatioX:"get_textureRatioX",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",get_backgroundImageRenderer:"get_backgroundImageRenderer",set_background:"set_background",get_background:"get_background",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy",set_backgroundB:"set_backgroundB",get_backgroundB:"get_backgroundB",set_backgroundG:"set_backgroundG",get_backgroundG:"get_backgroundG",set_backgroundR:"set_backgroundR",get_backgroundR:"get_backgroundR",set_clearOnRender:"set_clearOnRender",get_clearOnRender:"get_clearOnRender",set_renderableSorter:"set_renderableSorter",get_renderableSorter:"get_renderableSorter",get_renderToTexture:"get_renderToTexture",set_viewHeight:"set_viewHeight",get_viewHeight:"get_viewHeight",set_viewWidth:"set_viewWidth",get_viewWidth:"get_viewWidth"}
};
away3d.core.render.DefaultRenderer = function() {
	away3d.core.render.RendererBase.call(this);
	this._skyboxProjection = new openfl.geom.Matrix3D();
	this._depthRenderer = new away3d.core.render.DepthRenderer();
	this._distanceRenderer = new away3d.core.render.DepthRenderer(false,true);
};
$hxClasses["away3d.core.render.DefaultRenderer"] = away3d.core.render.DefaultRenderer;
away3d.core.render.DefaultRenderer.__name__ = ["away3d","core","render","DefaultRenderer"];
away3d.core.render.DefaultRenderer.__super__ = away3d.core.render.RendererBase;
away3d.core.render.DefaultRenderer.prototype = $extend(away3d.core.render.RendererBase.prototype,{
	set_stage3DProxy: function(value) {
		away3d.core.render.RendererBase.prototype.set_stage3DProxy.call(this,value);
		this._distanceRenderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(value));
		return value;
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		this.updateLights(entityCollector);
		if(target != null) {
			this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,away3d.core.render.DefaultRenderer.RTT_PASSES);
			this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,away3d.core.render.DefaultRenderer.RTT_PASSES);
		}
		away3d.core.render.RendererBase.prototype.executeRender.call(this,entityCollector,target,scissorRect,surfaceSelector);
	}
	,updateLights: function(entityCollector) {
		var dirLights = entityCollector.get_directionalLights();
		var pointLights = entityCollector.get_pointLights();
		var len;
		var i;
		var light;
		var shadowMapper;
		len = dirLights.length;
		i = 0;
		while(i < len) {
			light = dirLights[i];
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._depthRenderer);
			++i;
		}
		len = pointLights.length;
		i = 0;
		while(i < len) {
			light = pointLights[i];
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._distanceRenderer);
			++i;
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(1,0);
		if(entityCollector.get_skyBox() != null) {
			if(this._activeMaterial != null) this._activeMaterial.deactivate(this._stage3DProxy);
			this._activeMaterial = null;
			this._context.setDepthTest(false,519);
			this.drawSkyBox(entityCollector);
		}
		this._context.setDepthTest(true,515);
		var which;
		if(target != null) which = away3d.core.render.DefaultRenderer.SCREEN_PASSES; else which = away3d.core.render.DefaultRenderer.ALL_PASSES;
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,which);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,which);
		this._context.setDepthTest(false,515);
		if(this._activeMaterial != null) this._activeMaterial.deactivate(this._stage3DProxy);
		this._activeMaterial = null;
	}
	,drawSkyBox: function(entityCollector) {
		var skyBox = entityCollector.get_skyBox();
		var material = skyBox.get_material();
		var camera = entityCollector.get_camera();
		this.updateSkyBoxProjection(camera);
		material.activatePass(0,this._stage3DProxy,camera);
		material.renderPass(0,skyBox,this._stage3DProxy,entityCollector,this._skyboxProjection);
		material.deactivatePass(0,this._stage3DProxy);
	}
	,updateSkyBoxProjection: function(camera) {
		var near = new openfl.geom.Vector3D();
		this._skyboxProjection.copyFrom(this._rttViewProjectionMatrix);
		this._skyboxProjection.copyRowTo(2,near);
		var camPos = camera.get_scenePosition();
		var cx = near.x;
		var cy = near.y;
		var cz = near.z;
		var cw = -(near.x * camPos.x + near.y * camPos.y + near.z * camPos.z + Math.sqrt(cx * cx + cy * cy + cz * cz));
		var signX;
		if(cx >= 0) signX = 1; else signX = -1;
		var signY;
		if(cy >= 0) signY = 1; else signY = -1;
		var p = new openfl.geom.Vector3D(signX,signY,1,1);
		var inverse = new openfl.geom.Matrix3D(openfl._Vector.Vector_Impl_.copy(this._skyboxProjection.rawData));
		inverse.invert();
		var q = inverse.transformVector(p);
		this._skyboxProjection.copyRowTo(3,p);
		var a = (q.x * p.x + q.y * p.y + q.z * p.z + q.w * p.w) / (cx * q.x + cy * q.y + cz * q.z + cw * q.w);
		this._skyboxProjection.copyRowFrom(2,new openfl.geom.Vector3D(cx * a,cy * a,cz * a,cw * a));
	}
	,drawRenderables: function(item,entityCollector,which) {
		var numPasses;
		var j;
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			this._activeMaterial.updateMaterial(this._context);
			numPasses = this._activeMaterial.get_numPasses();
			j = 0;
			do {
				item2 = item;
				var rttMask;
				if(this._activeMaterial.passRendersToTexture(j)) rttMask = 1; else rttMask = 2;
				if((rttMask & which) != 0) {
					this._activeMaterial.activatePass(j,this._stage3DProxy,camera);
					do {
						this._activeMaterial.renderPass(j,item2.renderable,this._stage3DProxy,entityCollector,this._rttViewProjectionMatrix);
						item2 = item2.next;
					} while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
					this._activeMaterial.deactivatePass(j,this._stage3DProxy);
				} else do item2 = item2.next; while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
			} while(++j < numPasses);
			item = item2;
		}
	}
	,dispose: function() {
		away3d.core.render.RendererBase.prototype.dispose.call(this);
		this._depthRenderer.dispose();
		this._distanceRenderer.dispose();
		this._depthRenderer = null;
		this._distanceRenderer = null;
	}
	,__class__: away3d.core.render.DefaultRenderer
});
away3d.core.render.DepthRenderer = function(renderBlended,distanceBased) {
	if(distanceBased == null) distanceBased = false;
	if(renderBlended == null) renderBlended = false;
	away3d.core.render.RendererBase.call(this);
	this._renderBlended = renderBlended;
	this._distanceBased = distanceBased;
	this._backgroundR = 1;
	this._backgroundG = 1;
	this._backgroundB = 1;
};
$hxClasses["away3d.core.render.DepthRenderer"] = away3d.core.render.DepthRenderer;
away3d.core.render.DepthRenderer.__name__ = ["away3d","core","render","DepthRenderer"];
away3d.core.render.DepthRenderer.__super__ = away3d.core.render.RendererBase;
away3d.core.render.DepthRenderer.prototype = $extend(away3d.core.render.RendererBase.prototype,{
	get_disableColor: function() {
		return this._disableColor;
	}
	,set_disableColor: function(value) {
		this._disableColor = value;
		return value;
	}
	,set_backgroundR: function(value) {
		return value;
	}
	,set_backgroundG: function(value) {
		return value;
	}
	,set_backgroundB: function(value) {
		return value;
	}
	,renderCascades: function(entityCollector,target,numCascades,scissorRects,cameras) {
		this._renderTarget = target;
		this._renderTargetSurface = 0;
		this._renderableSorter.sort(entityCollector);
		this._stage3DProxy.setRenderTarget(target,true,0);
		this._context.clear(1,1,1,1,1,0);
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		var head = entityCollector.get_opaqueRenderableHead();
		var first = true;
		var i = numCascades - 1;
		while(i >= 0) {
			this._stage3DProxy.set_scissorRect(scissorRects[i]);
			this.drawCascadeRenderables(head,cameras[i],first?null:cameras[i].get_frustumPlanes());
			first = false;
			--i;
		}
		if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		this._activeMaterial = null;
		this._context.setDepthTest(false,515);
		this._stage3DProxy.set_scissorRect(null);
	}
	,drawCascadeRenderables: function(item,camera,cullPlanes) {
		var material;
		while(item != null) {
			if(item.cascaded) {
				item = item.next;
				continue;
			}
			var renderable = item.renderable;
			var entity = renderable.get_sourceEntity();
			if(cullPlanes == null || entity.get_worldBounds().isInFrustum(cullPlanes,4)) {
				material = renderable.get_material();
				if(this._activeMaterial != material) {
					if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
					this._activeMaterial = material;
					this._activeMaterial.activateForDepth(this._stage3DProxy,camera,false);
				}
				this._activeMaterial.renderDepth(renderable,this._stage3DProxy,camera,camera.get_viewProjection());
			} else item.cascaded = true;
			item = item.next;
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector);
		if(this._disableColor) this._context.setColorMask(false,false,false,false);
		if(this._renderBlended) this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector);
		if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		if(this._disableColor) this._context.setColorMask(true,true,true,true);
		this._activeMaterial = null;
	}
	,drawRenderables: function(item,entityCollector) {
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			if(this._disableColor && this._activeMaterial.hasDepthAlphaThreshold()) {
				item2 = item;
				do item2 = item2.next; while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
			} else {
				this._activeMaterial.activateForDepth(this._stage3DProxy,camera,this._distanceBased);
				item2 = item;
				do {
					this._activeMaterial.renderDepth(item2.renderable,this._stage3DProxy,camera,this._rttViewProjectionMatrix);
					item2 = item2.next;
				} while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
				this._activeMaterial.deactivateForDepth(this._stage3DProxy);
			}
			item = item2;
		}
	}
	,__class__: away3d.core.render.DepthRenderer
	,__properties__: $extend(away3d.core.render.RendererBase.prototype.__properties__,{set_disableColor:"set_disableColor",get_disableColor:"get_disableColor"})
});
away3d.core.render.Filter3DRenderer = function(stage3DProxy) {
	this._filterSizesInvalid = true;
	this._stage3DProxy = stage3DProxy;
	this._rttManager = away3d.core.managers.RTTBufferManager.getInstance(stage3DProxy);
	this._rttManager.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.onRTTResize));
};
$hxClasses["away3d.core.render.Filter3DRenderer"] = away3d.core.render.Filter3DRenderer;
away3d.core.render.Filter3DRenderer.__name__ = ["away3d","core","render","Filter3DRenderer"];
away3d.core.render.Filter3DRenderer.prototype = {
	onRTTResize: function(event) {
		this._filterSizesInvalid = true;
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,getMainInputTexture: function(stage3DProxy) {
		if(this._filterTasksInvalid) this.updateFilterTasks(stage3DProxy);
		return this._mainInputTexture;
	}
	,get_filters: function() {
		return this._filters;
	}
	,set_filters: function(value) {
		this._filters = value;
		this._filterTasksInvalid = true;
		this._requireDepthRender = false;
		if(this._filters == null) return null;
		var i = 0;
		while(i < this._filters.length) {
			if(!this._requireDepthRender) this._requireDepthRender = js.Boot.__cast(this._filters[i].requireDepthRender != null , Bool);
			++i;
		}
		this._filterSizesInvalid = true;
		return value;
	}
	,updateFilterTasks: function(stage3DProxy) {
		var len;
		if(this._filterSizesInvalid) this.updateFilterSizes();
		if(this._filters == null) {
			this._tasks = null;
			return;
		}
		this._tasks = new Array();
		len = this._filters.length - 1;
		var filter;
		var i = 0;
		while(i <= len) {
			filter = this._filters[i];
			filter.setRenderTargets(i == len?null:(js.Boot.__cast(this._filters[i + 1] , away3d.filters.Filter3DBase)).getMainInputTexture(stage3DProxy),stage3DProxy);
			this._tasks = this._tasks.concat(filter.get_tasks());
			++i;
		}
		this._mainInputTexture = this._filters[0].getMainInputTexture(stage3DProxy);
	}
	,render: function(stage3DProxy,camera3D,depthTexture) {
		var len;
		var i;
		var task;
		var context = stage3DProxy.get_context3D();
		var indexBuffer = this._rttManager.get_indexBuffer();
		var vertexBuffer = this._rttManager.get_renderToTextureVertexBuffer();
		if(this._filters == null) return;
		if(this._filterSizesInvalid) this.updateFilterSizes();
		if(this._filterTasksInvalid) this.updateFilterTasks(stage3DProxy);
		len = this._filters.length;
		i = 0;
		while(i < len) {
			this._filters[i].update(stage3DProxy,camera3D);
			++i;
		}
		len = this._tasks.length;
		if(len > 1) {
			context.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
			context.setVertexBufferAt(1,vertexBuffer,2,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		}
		i = 0;
		while(i < len) {
			task = this._tasks[i];
			stage3DProxy.setRenderTarget(task.get_target());
			context.setProgram(task.getProgram3D(stage3DProxy));
			if(task.get_target() == null) {
				stage3DProxy.set_scissorRect(null);
				vertexBuffer = this._rttManager.get_renderToScreenVertexBuffer();
				context.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
				context.setVertexBufferAt(1,vertexBuffer,2,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
			}
			context.setTextureAt(0,task.getMainInputTexture(stage3DProxy));
			context.clear(0.0,0.0,0.0,0.0);
			task.activate(stage3DProxy,camera3D,depthTexture);
			context.setBlendFactors(1,0);
			context.drawTriangles(indexBuffer,0,2);
			task.deactivate(stage3DProxy);
			++i;
		}
		context.setTextureAt(0,null);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
	}
	,updateFilterSizes: function() {
		var i = 0;
		while(i < this._filters.length) {
			this._filters[i].textureWidth = this._rttManager.get_textureWidth();
			this._filters[i].textureHeight = this._rttManager.get_textureHeight();
			++i;
		}
		this._filterSizesInvalid = true;
	}
	,dispose: function() {
		this._rttManager.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this.onRTTResize));
		this._rttManager = null;
		this._stage3DProxy = null;
	}
	,__class__: away3d.core.render.Filter3DRenderer
	,__properties__: {set_filters:"set_filters",get_filters:"get_filters",get_requireDepthRender:"get_requireDepthRender"}
};
away3d.core.sort = {};
away3d.core.sort.IEntitySorter = function() { };
$hxClasses["away3d.core.sort.IEntitySorter"] = away3d.core.sort.IEntitySorter;
away3d.core.sort.IEntitySorter.__name__ = ["away3d","core","sort","IEntitySorter"];
away3d.core.sort.IEntitySorter.prototype = {
	__class__: away3d.core.sort.IEntitySorter
};
away3d.core.sort.RenderableMergeSort = function() {
};
$hxClasses["away3d.core.sort.RenderableMergeSort"] = away3d.core.sort.RenderableMergeSort;
away3d.core.sort.RenderableMergeSort.__name__ = ["away3d","core","sort","RenderableMergeSort"];
away3d.core.sort.RenderableMergeSort.__interfaces__ = [away3d.core.sort.IEntitySorter];
away3d.core.sort.RenderableMergeSort.prototype = {
	sort: function(collector) {
		collector.set_opaqueRenderableHead(this.mergeSortByMaterial(collector.get_opaqueRenderableHead()));
		collector.set_blendedRenderableHead(this.mergeSortByDepth(collector.get_blendedRenderableHead()));
	}
	,mergeSortByDepth: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) return head;
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByDepth(head);
		headB = this.mergeSortByDepth(headB);
		var result = null;
		var curr = null;
		var l = null;
		if(head == null) return headB;
		if(headB == null) return head;
		while(head != null && headB != null) {
			if(head.zIndex < headB.zIndex) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) result = l; else curr.next = l;
			curr = l;
		}
		if(head != null) curr.next = head; else if(headB != null) curr.next = headB;
		return result;
	}
	,mergeSortByMaterial: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) return head;
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByMaterial(head);
		headB = this.mergeSortByMaterial(headB);
		var result = null;
		var curr = null;
		var l = null;
		var cmp;
		if(head == null) return headB;
		if(headB == null) return head;
		while(head != null && headB != null && head != null && headB != null) {
			var aid = head.renderOrderId;
			var bid = headB.renderOrderId;
			if(aid == bid) {
				var ma = head.materialId;
				var mb = headB.materialId;
				if(ma == mb) {
					if(head.zIndex < headB.zIndex) cmp = 1; else cmp = -1;
				} else if(ma > mb) cmp = 1; else cmp = -1;
			} else if(aid > bid) cmp = 1; else cmp = -1;
			if(cmp < 0) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) {
				result = l;
				curr = l;
			} else {
				curr.next = l;
				curr = l;
			}
		}
		if(head != null) curr.next = head; else if(headB != null) curr.next = headB;
		return result;
	}
	,__class__: away3d.core.sort.RenderableMergeSort
};
away3d.core.traverse.ShadowCasterCollector = function() {
	away3d.core.traverse.EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.ShadowCasterCollector"] = away3d.core.traverse.ShadowCasterCollector;
away3d.core.traverse.ShadowCasterCollector.__name__ = ["away3d","core","traverse","ShadowCasterCollector"];
away3d.core.traverse.ShadowCasterCollector.__super__ = away3d.core.traverse.EntityCollector;
away3d.core.traverse.ShadowCasterCollector.prototype = $extend(away3d.core.traverse.EntityCollector.prototype,{
	applyRenderable: function(renderable) {
		var material = renderable.get_material();
		var entity = renderable.get_sourceEntity();
		if(renderable.get_castsShadows() && material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.next = this._opaqueRenderableHead;
			item.cascaded = false;
			var dx = this._entryPoint.x - entity.get_x();
			var dy = this._entryPoint.y - entity.get_y();
			var dz = this._entryPoint.z - entity.get_z();
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z;
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			item.renderOrderId = material._depthPassId;
			this._opaqueRenderableHead = item;
		}
	}
	,applyUnknownLight: function(light) {
	}
	,applyDirectionalLight: function(light) {
	}
	,applyPointLight: function(light) {
	}
	,applyLightProbe: function(light) {
	}
	,applySkyBox: function(renderable) {
	}
	,__class__: away3d.core.traverse.ShadowCasterCollector
});
away3d.debug = {};
away3d.debug.Debug = function() { };
$hxClasses["away3d.debug.Debug"] = away3d.debug.Debug;
away3d.debug.Debug.__name__ = ["away3d","debug","Debug"];
away3d.debug.Debug.clear = function() {
};
away3d.debug.Debug.delimiter = function() {
};
away3d.debug.Debug.trace = function(message) {
	if(away3d.debug.Debug.active) haxe.Log.trace(message,{ fileName : "Debug.hx", lineNumber : 20, className : "away3d.debug.Debug", methodName : "trace"});
};
away3d.debug.Debug.warning = function(message) {
	if(away3d.debug.Debug.warningsAsErrors) {
		away3d.debug.Debug.error(message);
		return;
	}
	haxe.Log.trace("WARNING: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 28, className : "away3d.debug.Debug", methodName : "warning"});
};
away3d.debug.Debug.error = function(message) {
	haxe.Log.trace("ERROR: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 32, className : "away3d.debug.Debug", methodName : "error"});
	throw new openfl.errors.Error(message);
};
away3d.entities.SegmentSet = function() {
	this._indexSegments = 0;
	this.LIMIT = 196605;
	away3d.entities.Entity.call(this);
	this._subSetCount = 0;
	this._subSets = new Array();
	this.addSubSet();
	this._segments = new haxe.ds.IntMap();
	this.set_material(new away3d.materials.SegmentMaterial());
};
$hxClasses["away3d.entities.SegmentSet"] = away3d.entities.SegmentSet;
away3d.entities.SegmentSet.__name__ = ["away3d","entities","SegmentSet"];
away3d.entities.SegmentSet.__interfaces__ = [away3d.core.base.IRenderable];
away3d.entities.SegmentSet.__super__ = away3d.entities.Entity;
away3d.entities.SegmentSet.prototype = $extend(away3d.entities.Entity.prototype,{
	addSegment: function(segment) {
		segment.set_segmentsBase(this);
		this._hasData = true;
		var subSetIndex = this._subSets.length - 1;
		var subSet = this._subSets[subSetIndex];
		if(subSet.vertices.length + 44 > this.LIMIT) {
			subSet = this.addSubSet();
			subSetIndex++;
		}
		segment.set_index(subSet.vertices.length);
		segment.set_subSetIndex(subSetIndex);
		this.updateSegment(segment);
		var index = subSet.lineCount << 2;
		subSet.indices.push(index);
		subSet.indices.push(index + 1);
		subSet.indices.push(index + 2);
		subSet.indices.push(index + 3);
		subSet.indices.push(index + 2);
		subSet.indices.push(index + 1);
		subSet.numVertices = subSet.vertices.length / 11 | 0;
		subSet.numIndices = subSet.indices.length;
		subSet.lineCount++;
		var segRef = new away3d.entities.SegRef();
		segRef.index = index;
		segRef.subSetIndex = subSetIndex;
		segRef.segment = segment;
		this._segments.set(this._indexSegments,segRef);
		this._indexSegments++;
	}
	,removeSegmentByIndex: function(index,dispose) {
		if(dispose == null) dispose = false;
		var segRef;
		if(index >= this._indexSegments) return;
		if(this._segments.exists(index)) segRef = this._segments.get(index); else return;
		var subSet;
		if(this._subSets[segRef.subSetIndex] == null) return;
		var subSetIndex = segRef.subSetIndex;
		subSet = this._subSets[segRef.subSetIndex];
		var segment = segRef.segment;
		var indices = subSet.indices;
		var ind = index * 6;
		var _g1 = ind;
		var _g = indices.length;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] -= 4;
		}
		subSet.indices.splice(index * 6,6);
		subSet.vertices.splice(index * 44,44);
		subSet.numVertices = subSet.vertices.length / 11 | 0;
		subSet.numIndices = indices.length;
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount--;
		if(dispose) {
			segment.dispose();
			segment = null;
		} else {
			segment.set_index(-1);
			segment.set_segmentsBase(null);
		}
		if(subSet.lineCount == 0) {
			if(subSetIndex == 0) this._hasData = false; else {
				subSet.dispose();
				this._subSets[subSetIndex] = null;
				this._subSets.splice(subSetIndex,1);
			}
		}
		this.reOrderIndices(subSetIndex,index);
		segRef = null;
		this._segments.remove(this._indexSegments);
		this._indexSegments--;
	}
	,removeSegment: function(segment,dispose) {
		if(dispose == null) dispose = false;
		if(segment.get_index() == -1) return;
		this.removeSegmentByIndex(Std["int"](segment.get_index() / 44));
	}
	,removeAllSegments: function() {
		var subSet;
		var _g1 = 0;
		var _g = this._subSetCount;
		while(_g1 < _g) {
			var i = _g1++;
			subSet = this._subSets[i];
			subSet.vertices = null;
			subSet.indices = null;
			if(subSet.vertexBuffer != null) subSet.vertexBuffer.dispose();
			if(subSet.indexBuffer != null) subSet.indexBuffer.dispose();
			subSet = null;
		}
		var iterator = this._segments.iterator();
		while( iterator.hasNext() ) {
			var segReg = iterator.next();
			segReg = null;
		}
		this._segments = null;
		this._subSetCount = 0;
		this._activeSubSet = null;
		this._indexSegments = 0;
		this._subSets = new Array();
		this._segments = new haxe.ds.IntMap();
		this.addSubSet();
		this._hasData = false;
	}
	,getSegment: function(index) {
		if(index > this._indexSegments - 1) return null;
		return this._segments.get(index).segment;
	}
	,get_segmentCount: function() {
		return this._indexSegments;
	}
	,get_subSetCount: function() {
		return this._subSetCount;
	}
	,updateSegment: function(segment) {
		var start = segment._start;
		var end = segment._end;
		var startX = start.x;
		var startY = start.y;
		var startZ = start.z;
		var endX = end.x;
		var endY = end.y;
		var endZ = end.z;
		var startR = segment._startR;
		var startG = segment._startG;
		var startB = segment._startB;
		var endR = segment._endR;
		var endG = segment._endG;
		var endB = segment._endB;
		var index = segment.get_index();
		var t = segment.get_thickness();
		var subSet = this._subSets[segment.get_subSetIndex()];
		var vertices = subSet.vertices;
		vertices[index++] = startX;
		vertices[index++] = startY;
		vertices[index++] = startZ;
		vertices[index++] = endX;
		vertices[index++] = endY;
		vertices[index++] = endZ;
		vertices[index++] = t;
		vertices[index++] = startR;
		vertices[index++] = startG;
		vertices[index++] = startB;
		vertices[index++] = 1;
		vertices[index++] = endX;
		vertices[index++] = endY;
		vertices[index++] = endZ;
		vertices[index++] = startX;
		vertices[index++] = startY;
		vertices[index++] = startZ;
		vertices[index++] = -t;
		vertices[index++] = endR;
		vertices[index++] = endG;
		vertices[index++] = endB;
		vertices[index++] = 1;
		vertices[index++] = startX;
		vertices[index++] = startY;
		vertices[index++] = startZ;
		vertices[index++] = endX;
		vertices[index++] = endY;
		vertices[index++] = endZ;
		vertices[index++] = -t;
		vertices[index++] = startR;
		vertices[index++] = startG;
		vertices[index++] = startB;
		vertices[index++] = 1;
		vertices[index++] = endX;
		vertices[index++] = endY;
		vertices[index++] = endZ;
		vertices[index++] = startX;
		vertices[index++] = startY;
		vertices[index++] = startZ;
		vertices[index++] = t;
		vertices[index++] = endR;
		vertices[index++] = endG;
		vertices[index++] = endB;
		vertices[index++] = 1;
		subSet.vertexBufferDirty = true;
		this.invalidateBounds();
	}
	,get_hasData: function() {
		return this._hasData;
	}
	,getIndexBuffer: function(stage3DProxy) {
		if(this._activeSubSet.indexContext3D != stage3DProxy.get_context3D() || this._activeSubSet.indexBufferDirty) {
			this._activeSubSet.indexBuffer = stage3DProxy._context3D.createIndexBuffer(this._activeSubSet.numIndices);
			this._activeSubSet.indexBuffer.uploadFromVector((function($this) {
				var $r;
				var a = $this._activeSubSet.indices;
				var vectorData = new openfl.VectorData();
				vectorData.length = a.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(a.length);
					vec = this1;
					var _g1 = 0;
					var _g = a.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = a[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)),0,this._activeSubSet.numIndices);
			this._activeSubSet.indexBufferDirty = false;
			this._activeSubSet.indexContext3D = stage3DProxy.get_context3D();
		}
		return this._activeSubSet.indexBuffer;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var subSet = this._subSets[index];
		this._activeSubSet = subSet;
		this._numIndices = subSet.numIndices;
		if(subSet.vertexContext3D != stage3DProxy.get_context3D() || subSet.vertexBufferDirty) {
			subSet.vertexBuffer = stage3DProxy._context3D.createVertexBuffer(subSet.numVertices,11);
			subSet.vertexBuffer.uploadFromVector(subSet.vertices,0,subSet.numVertices);
			subSet.vertexBufferDirty = false;
			subSet.vertexContext3D = stage3DProxy.get_context3D();
		}
		var vertexBuffer = subSet.vertexBuffer;
		var context3d = stage3DProxy._context3D;
		context3d.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
		context3d.setVertexBufferAt(1,vertexBuffer,3,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
		context3d.setVertexBufferAt(2,vertexBuffer,6,openfl.display3D.Context3DVertexBufferFormat.FLOAT_1);
		context3d.setVertexBufferAt(3,vertexBuffer,7,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
	}
	,reOrderIndices: function(subSetIndex,index) {
		var segRef;
		var _g1 = index;
		var _g = this._indexSegments - 1;
		while(_g1 < _g) {
			var i = _g1++;
			segRef = this._segments.get(i + 1);
			segRef.index = i;
			if(segRef.subSetIndex == subSetIndex) {
				var _g2 = segRef.segment;
				_g2.set_index(_g2.get_index() - 44);
			}
			this._segments.set(i,segRef);
		}
	}
	,addSubSet: function() {
		var subSet = new away3d.entities.SubSet();
		this._subSets.push(subSet);
		subSet.vertices = new Array();
		subSet.numVertices = 0;
		subSet.indices = new Array();
		subSet.numIndices = 0;
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount = 0;
		this._subSetCount++;
		return subSet;
	}
	,dispose: function() {
		away3d.entities.Entity.prototype.dispose.call(this);
		this.removeAllSegments();
		this._segments = null;
		this._material = null;
		var subSet = this._subSets[0];
		subSet.vertices = null;
		subSet.indices = null;
		this._subSets = null;
	}
	,get_mouseEnabled: function() {
		return false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.BoundingSphere();
	}
	,updateBounds: function() {
		var subSet;
		var len;
		var v;
		var index;
		var minX = Math.POSITIVE_INFINITY;
		var minY = Math.POSITIVE_INFINITY;
		var minZ = Math.POSITIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var maxZ = Math.NEGATIVE_INFINITY;
		var vertices;
		var i = 0;
		while(i < this._subSetCount) {
			subSet = this._subSets[i];
			index = 0;
			vertices = subSet.vertices;
			len = vertices.length;
			if(len == 0) {
				++i;
				continue;
			}
			while(index < len) {
				v = vertices[index++];
				if(v < minX) minX = v; else if(v > maxX) maxX = v;
				v = vertices[index++];
				if(v < minY) minY = v; else if(v > maxY) maxY = v;
				v = vertices[index++];
				if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
				index += 8;
			}
			++i;
		}
		if(minX != Math.POSITIVE_INFINITY) this._bounds.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ); else {
			var min = .5;
			this._bounds.fromExtremes(-min,-min,-min,min,min,min);
		}
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.RenderableNode(this);
	}
	,get_numTriangles: function() {
		return this._numIndices * 0.3333333 | 0;
	}
	,get_sourceEntity: function() {
		return this;
	}
	,get_castsShadows: function() {
		return false;
	}
	,get_material: function() {
		return this._material;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_material: function(value) {
		if(value == this._material) return value;
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_uvTransform: function() {
		return null;
	}
	,get_vertexData: function() {
		return null;
	}
	,get_indexData: function() {
		return null;
	}
	,get_UVData: function() {
		return null;
	}
	,get_numVertices: function() {
		return 0;
	}
	,get_vertexStride: function() {
		return 11;
	}
	,get_vertexNormalData: function() {
		return null;
	}
	,get_vertexTangentData: function() {
		return null;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.SEGMENT_SET;
	}
	,getRenderSceneTransform: function(camera) {
		return this._sceneTransform;
	}
	,__class__: away3d.entities.SegmentSet
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexStride:"get_vertexStride",get_numVertices:"get_numVertices",get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexData:"get_vertexData",get_uvTransform:"get_uvTransform",get_animator:"get_animator",set_material:"set_material",get_material:"get_material",get_castsShadows:"get_castsShadows",get_sourceEntity:"get_sourceEntity",get_numTriangles:"get_numTriangles",get_hasData:"get_hasData",get_subSetCount:"get_subSetCount",get_segmentCount:"get_segmentCount"})
});
away3d.entities.SegRef = function() {
};
$hxClasses["away3d.entities.SegRef"] = away3d.entities.SegRef;
away3d.entities.SegRef.__name__ = ["away3d","entities","SegRef"];
away3d.entities.SegRef.prototype = {
	__class__: away3d.entities.SegRef
};
away3d.entities.SubSet = function() {
};
$hxClasses["away3d.entities.SubSet"] = away3d.entities.SubSet;
away3d.entities.SubSet.__name__ = ["away3d","entities","SubSet"];
away3d.entities.SubSet.prototype = {
	dispose: function() {
		this.vertices = null;
		if(this.vertexBuffer != null) this.vertexBuffer.dispose();
		if(this.indexBuffer != null) this.indexBuffer.dispose();
	}
	,__class__: away3d.entities.SubSet
};
openfl.errors = {};
openfl.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl.errors.Error;
openfl.errors.Error.__name__ = ["openfl","errors","Error"];
openfl.errors.Error.prototype = {
	getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl.errors.Error
};
away3d.errors = {};
away3d.errors.AbstractMethodError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "An abstract method was called! Either an instance of an abstract class was created, or an abstract method was not overridden by the subclass.";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["away3d.errors.AbstractMethodError"] = away3d.errors.AbstractMethodError;
away3d.errors.AbstractMethodError.__name__ = ["away3d","errors","AbstractMethodError"];
away3d.errors.AbstractMethodError.__super__ = openfl.errors.Error;
away3d.errors.AbstractMethodError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: away3d.errors.AbstractMethodError
});
away3d.errors.AnimationSetError = function(message) {
	openfl.errors.Error.call(this,message);
};
$hxClasses["away3d.errors.AnimationSetError"] = away3d.errors.AnimationSetError;
away3d.errors.AnimationSetError.__name__ = ["away3d","errors","AnimationSetError"];
away3d.errors.AnimationSetError.__super__ = openfl.errors.Error;
away3d.errors.AnimationSetError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: away3d.errors.AnimationSetError
});
away3d.errors.CastError = function(message) {
	openfl.errors.Error.call(this,message);
};
$hxClasses["away3d.errors.CastError"] = away3d.errors.CastError;
away3d.errors.CastError.__name__ = ["away3d","errors","CastError"];
away3d.errors.CastError.__super__ = openfl.errors.Error;
away3d.errors.CastError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: away3d.errors.CastError
});
away3d.events.AnimatorEvent = function(type,animator) {
	openfl.events.Event.call(this,type,false,false);
	this._animator = animator;
};
$hxClasses["away3d.events.AnimatorEvent"] = away3d.events.AnimatorEvent;
away3d.events.AnimatorEvent.__name__ = ["away3d","events","AnimatorEvent"];
away3d.events.AnimatorEvent.__super__ = openfl.events.Event;
away3d.events.AnimatorEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_animator: function() {
		return this._animator;
	}
	,clone: function() {
		return new away3d.events.AnimatorEvent(this.type,this._animator);
	}
	,__class__: away3d.events.AnimatorEvent
	,__properties__: {get_animator:"get_animator"}
});
away3d.events.Asset3DEvent = function(type,asset,prevName) {
	openfl.events.Event.call(this,type);
	this._asset = asset;
	if(prevName != null) this._prevName = prevName; else if(this._asset != null) this._prevName = this._asset.get_name(); else this._prevName = null;
};
$hxClasses["away3d.events.Asset3DEvent"] = away3d.events.Asset3DEvent;
away3d.events.Asset3DEvent.__name__ = ["away3d","events","Asset3DEvent"];
away3d.events.Asset3DEvent.__super__ = openfl.events.Event;
away3d.events.Asset3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_asset: function() {
		return this._asset;
	}
	,get_assetPrevName: function() {
		return this._prevName;
	}
	,clone: function() {
		var a = new away3d.events.Asset3DEvent(this.type,this.get_asset(),this.get_assetPrevName());
		return a;
	}
	,__class__: away3d.events.Asset3DEvent
	,__properties__: {get_assetPrevName:"get_assetPrevName",get_asset:"get_asset"}
});
away3d.events.CameraEvent = function(type,camera,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._camera = camera;
};
$hxClasses["away3d.events.CameraEvent"] = away3d.events.CameraEvent;
away3d.events.CameraEvent.__name__ = ["away3d","events","CameraEvent"];
away3d.events.CameraEvent.__super__ = openfl.events.Event;
away3d.events.CameraEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_camera: function() {
		return this._camera;
	}
	,clone: function() {
		return new away3d.events.CameraEvent(this.type,this._camera,this.bubbles,this.cancelable);
	}
	,__class__: away3d.events.CameraEvent
	,__properties__: {get_camera:"get_camera"}
});
away3d.events.GeometryEvent = function(type,subGeometry) {
	openfl.events.Event.call(this,type,false,false);
	this._subGeometry = subGeometry;
};
$hxClasses["away3d.events.GeometryEvent"] = away3d.events.GeometryEvent;
away3d.events.GeometryEvent.__name__ = ["away3d","events","GeometryEvent"];
away3d.events.GeometryEvent.__super__ = openfl.events.Event;
away3d.events.GeometryEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_subGeometry: function() {
		return this._subGeometry;
	}
	,clone: function() {
		return new away3d.events.GeometryEvent(this.type,this._subGeometry);
	}
	,__class__: away3d.events.GeometryEvent
	,__properties__: {get_subGeometry:"get_subGeometry"}
});
away3d.events.LensEvent = function(type,lens,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._lens = lens;
};
$hxClasses["away3d.events.LensEvent"] = away3d.events.LensEvent;
away3d.events.LensEvent.__name__ = ["away3d","events","LensEvent"];
away3d.events.LensEvent.__super__ = openfl.events.Event;
away3d.events.LensEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_lens: function() {
		return this._lens;
	}
	,clone: function() {
		return new away3d.events.LensEvent(this.type,this._lens,this.bubbles,this.cancelable);
	}
	,__class__: away3d.events.LensEvent
	,__properties__: {get_lens:"get_lens"}
});
away3d.events.LightEvent = function(type) {
	openfl.events.Event.call(this,type);
};
$hxClasses["away3d.events.LightEvent"] = away3d.events.LightEvent;
away3d.events.LightEvent.__name__ = ["away3d","events","LightEvent"];
away3d.events.LightEvent.__super__ = openfl.events.Event;
away3d.events.LightEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new away3d.events.LightEvent(this.type);
	}
	,__class__: away3d.events.LightEvent
});
away3d.events.Object3DEvent = function(type,object) {
	openfl.events.Event.call(this,type);
	this.object = object;
};
$hxClasses["away3d.events.Object3DEvent"] = away3d.events.Object3DEvent;
away3d.events.Object3DEvent.__name__ = ["away3d","events","Object3DEvent"];
away3d.events.Object3DEvent.__super__ = openfl.events.Event;
away3d.events.Object3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new away3d.events.Object3DEvent(this.type,this.object);
	}
	,__class__: away3d.events.Object3DEvent
});
away3d.events.Scene3DEvent = function(type,objectContainer) {
	this.objectContainer3D = objectContainer;
	openfl.events.Event.call(this,type);
};
$hxClasses["away3d.events.Scene3DEvent"] = away3d.events.Scene3DEvent;
away3d.events.Scene3DEvent.__name__ = ["away3d","events","Scene3DEvent"];
away3d.events.Scene3DEvent.__super__ = openfl.events.Event;
away3d.events.Scene3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new away3d.events.Scene3DEvent(this.type,this.objectContainer3D);
	}
	,__class__: away3d.events.Scene3DEvent
});
away3d.events.ShadingMethodEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.ShadingMethodEvent"] = away3d.events.ShadingMethodEvent;
away3d.events.ShadingMethodEvent.__name__ = ["away3d","events","ShadingMethodEvent"];
away3d.events.ShadingMethodEvent.__super__ = openfl.events.Event;
away3d.events.ShadingMethodEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: away3d.events.ShadingMethodEvent
});
away3d.events.Stage3DEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.Stage3DEvent"] = away3d.events.Stage3DEvent;
away3d.events.Stage3DEvent.__name__ = ["away3d","events","Stage3DEvent"];
away3d.events.Stage3DEvent.__super__ = openfl.events.Event;
away3d.events.Stage3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: away3d.events.Stage3DEvent
});
away3d.events.TouchEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl.events.Event.call(this,type,true,true);
};
$hxClasses["away3d.events.TouchEvent3D"] = away3d.events.TouchEvent3D;
away3d.events.TouchEvent3D.__name__ = ["away3d","events","TouchEvent3D"];
away3d.events.TouchEvent3D.__super__ = openfl.events.Event;
away3d.events.TouchEvent3D.prototype = $extend(openfl.events.Event.prototype,{
	stopPropagation: function() {
		openfl.events.Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent._allowedToPropagate = false;
	}
	,stopImmediatePropagation: function() {
		openfl.events.Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent._allowedToPropagate = false;
	}
	,clone: function() {
		var result = new away3d.events.TouchEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		return result;
	}
	,get_scenePosition: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) return (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().transformVector(this.localPosition); else return this.localPosition;
	}
	,get_sceneNormal: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) {
			var sceneNormal = (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().deltaTransformVector(this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else return this.localNormal;
	}
	,__class__: away3d.events.TouchEvent3D
	,__properties__: {get_sceneNormal:"get_sceneNormal",get_scenePosition:"get_scenePosition"}
});
away3d.filters = {};
away3d.filters.Filter3DBase = function() {
	this._tasks = new Array();
};
$hxClasses["away3d.filters.Filter3DBase"] = away3d.filters.Filter3DBase;
away3d.filters.Filter3DBase.__name__ = ["away3d","filters","Filter3DBase"];
away3d.filters.Filter3DBase.prototype = {
	get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,addTask: function(filter) {
		this._tasks.push(filter);
		if(!this._requireDepthRender) this._requireDepthRender = filter.get_requireDepthRender();
	}
	,get_tasks: function() {
		return this._tasks;
	}
	,getMainInputTexture: function(stage3DProxy) {
		return this._tasks[0].getMainInputTexture(stage3DProxy);
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		this._textureWidth = value;
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks[i].set_textureWidth(value);
			++i;
		}
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		this._textureHeight = value;
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks[i].set_textureHeight(value);
			++i;
		}
		return value;
	}
	,setRenderTargets: function(mainTarget,stage3DProxy) {
		this._tasks[this._tasks.length - 1].set_target(mainTarget);
	}
	,dispose: function() {
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks[i].dispose();
			++i;
		}
	}
	,update: function(stage,camera) {
	}
	,__class__: away3d.filters.Filter3DBase
	,__properties__: {set_textureHeight:"set_textureHeight",get_textureHeight:"get_textureHeight",set_textureWidth:"set_textureWidth",get_textureWidth:"get_textureWidth",get_tasks:"get_tasks",get_requireDepthRender:"get_requireDepthRender"}
};
away3d.filters.tasks = {};
away3d.filters.tasks.Filter3DTaskBase = function(requireDepthRender) {
	if(requireDepthRender == null) requireDepthRender = false;
	this._scaledTextureWidth = -1;
	this._scaledTextureHeight = -1;
	this._textureWidth = -1;
	this._textureHeight = -1;
	this._textureDimensionsInvalid = true;
	this._program3DInvalid = true;
	this._textureScale = 0;
	this._requireDepthRender = requireDepthRender;
};
$hxClasses["away3d.filters.tasks.Filter3DTaskBase"] = away3d.filters.tasks.Filter3DTaskBase;
away3d.filters.tasks.Filter3DTaskBase.__name__ = ["away3d","filters","tasks","Filter3DTaskBase"];
away3d.filters.tasks.Filter3DTaskBase.prototype = {
	get_textureScale: function() {
		return this._textureScale;
	}
	,set_textureScale: function(value) {
		if(this._textureScale == value) return value;
		this._textureScale = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_target: function() {
		return this._target;
	}
	,set_target: function(value) {
		this._target = value;
		return value;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		if(this._textureWidth == value) return value;
		this._textureWidth = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		if(this._textureHeight == value) return value;
		this._textureHeight = value;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,getMainInputTexture: function(stage) {
		if(this._textureDimensionsInvalid) this.updateTextures(stage);
		return this._mainInputTexture;
	}
	,dispose: function() {
		if(this._mainInputTexture != null) this._mainInputTexture.dispose();
		if(this._program3D != null) this._program3D.dispose();
	}
	,invalidateProgram3D: function() {
		this._program3DInvalid = true;
	}
	,updateProgram3D: function(stage) {
		if(this._program3D != null) this._program3D.dispose();
		this._program3D = stage.get_context3D().createProgram();
		this._program3D.upload(openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,this.getVertexCode()),openfl.display3D.shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,this.getFragmentCode()));
		this._program3DInvalid = false;
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1\n";
	}
	,getFragmentCode: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,updateTextures: function(stage) {
		if(this._mainInputTexture != null) this._mainInputTexture.dispose();
		this._mainInputTexture = stage.get_context3D().createTexture(this._scaledTextureWidth,this._scaledTextureHeight,openfl.display3D.Context3DTextureFormat.BGRA,true);
		this._textureDimensionsInvalid = false;
	}
	,getProgram3D: function(stage3DProxy) {
		if(this._program3DInvalid) this.updateProgram3D(stage3DProxy);
		return this._program3D;
	}
	,activate: function(stage3DProxy,camera,depthTexture) {
	}
	,deactivate: function(stage3DProxy) {
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,__class__: away3d.filters.tasks.Filter3DTaskBase
	,__properties__: {get_requireDepthRender:"get_requireDepthRender",set_textureHeight:"set_textureHeight",get_textureHeight:"get_textureHeight",set_textureWidth:"set_textureWidth",get_textureWidth:"get_textureWidth",set_target:"set_target",get_target:"get_target",set_textureScale:"set_textureScale",get_textureScale:"get_textureScale"}
};
away3d.library.assets.Asset3DType = function() { };
$hxClasses["away3d.library.assets.Asset3DType"] = away3d.library.assets.Asset3DType;
away3d.library.assets.Asset3DType.__name__ = ["away3d","library","assets","Asset3DType"];
away3d.lights = {};
away3d.lights.LightBase = function() {
	this._color = 16777215;
	this._colorR = 1;
	this._colorG = 1;
	this._colorB = 1;
	this._ambientColor = 16777215;
	this._ambient = 0;
	this._ambientR = 0;
	this._ambientG = 0;
	this._ambientB = 0;
	this._specular = 1;
	this._specularR = 1;
	this._specularG = 1;
	this._specularB = 1;
	this._diffuse = 1;
	this._diffuseR = 1;
	this._diffuseG = 1;
	this._diffuseB = 1;
	away3d.entities.Entity.call(this);
};
$hxClasses["away3d.lights.LightBase"] = away3d.lights.LightBase;
away3d.lights.LightBase.__name__ = ["away3d","lights","LightBase"];
away3d.lights.LightBase.__super__ = away3d.entities.Entity;
away3d.lights.LightBase.prototype = $extend(away3d.entities.Entity.prototype,{
	get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		if(this._castsShadows == value) return value;
		this._castsShadows = value;
		if(value) {
			if(this._shadowMapper == null) this._shadowMapper = this.createShadowMapper();
			this._shadowMapper.set_light(this);
		} else {
			if(this._shadowMapper != null) this._shadowMapper.dispose();
			this._shadowMapper = null;
		}
		this.dispatchEvent(new away3d.events.LightEvent(away3d.events.LightEvent.CASTS_SHADOW_CHANGE));
		return value;
	}
	,createShadowMapper: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value < 0) value = 0;
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_diffuse: function() {
		return this._diffuse;
	}
	,set_diffuse: function(value) {
		if(value < 0) value = 0;
		this._diffuse = value;
		this.updateDiffuse();
		return value;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		this._colorR = (this._color >> 16 & 255) / 255;
		this._colorG = (this._color >> 8 & 255) / 255;
		this._colorB = (this._color & 255) / 255;
		this.updateDiffuse();
		this.updateSpecular();
		return value;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		this._ambient = value;
		this.updateAmbient();
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		this.updateAmbient();
		return value;
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient;
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.LightNode(this);
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.LIGHT;
	}
	,updateSpecular: function() {
		this._specularR = this._colorR * this._specular;
		this._specularG = this._colorG * this._specular;
		this._specularB = this._colorB * this._specular;
	}
	,updateDiffuse: function() {
		this._diffuseR = this._colorR * this._diffuse;
		this._diffuseG = this._colorG * this._diffuse;
		this._diffuseB = this._colorB * this._diffuse;
	}
	,get_shadowMapper: function() {
		return this._shadowMapper;
	}
	,set_shadowMapper: function(value) {
		this._shadowMapper = value;
		this._shadowMapper.set_light(this);
		return value;
	}
	,__class__: away3d.lights.LightBase
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{set_shadowMapper:"set_shadowMapper",get_shadowMapper:"get_shadowMapper",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_ambient:"set_ambient",get_ambient:"get_ambient",set_color:"set_color",get_color:"get_color",set_diffuse:"set_diffuse",get_diffuse:"get_diffuse",set_specular:"set_specular",get_specular:"get_specular",set_castsShadows:"set_castsShadows",get_castsShadows:"get_castsShadows"})
});
away3d.lights.DirectionalLight = function(xDir,yDir,zDir) {
	if(zDir == null) zDir = 1;
	if(yDir == null) yDir = -1;
	if(xDir == null) xDir = 0;
	away3d.lights.LightBase.call(this);
	this.set_direction(new openfl.geom.Vector3D(xDir,yDir,zDir));
	this._sceneDirection = new openfl.geom.Vector3D();
};
$hxClasses["away3d.lights.DirectionalLight"] = away3d.lights.DirectionalLight;
away3d.lights.DirectionalLight.__name__ = ["away3d","lights","DirectionalLight"];
away3d.lights.DirectionalLight.__super__ = away3d.lights.LightBase;
away3d.lights.DirectionalLight.prototype = $extend(away3d.lights.LightBase.prototype,{
	createEntityPartitionNode: function() {
		return new away3d.core.partition.DirectionalLightNode(this);
	}
	,get_sceneDirection: function() {
		if(this._sceneTransformDirty) this.updateSceneTransform();
		return this._sceneDirection;
	}
	,get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		if(this._tmpLookAt == null) this._tmpLookAt = new openfl.geom.Vector3D();
		this._tmpLookAt.x = this.get_x() + this._direction.x;
		this._tmpLookAt.y = this.get_y() + this._direction.y;
		this._tmpLookAt.z = this.get_z() + this._direction.z;
		this.lookAt(this._tmpLookAt);
		return value;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,updateBounds: function() {
	}
	,updateSceneTransform: function() {
		away3d.lights.LightBase.prototype.updateSceneTransform.call(this);
		this.get_sceneTransform().copyColumnTo(2,this._sceneDirection);
		this._sceneDirection.normalize();
	}
	,createShadowMapper: function() {
		return new away3d.lights.shadowmaps.DirectionalShadowMapper();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl.geom.Matrix3D();
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this.get_inverseSceneTransform());
		if(this._projAABBPoints == null) this._projAABBPoints = openfl._Vector.Vector_Impl_._new(24);
		m.transformVectors(bounds.get_aabbPoints(),this._projAABBPoints);
		var xMin = Math.POSITIVE_INFINITY;
		var xMax = Math.NEGATIVE_INFINITY;
		var yMin = Math.POSITIVE_INFINITY;
		var yMax = Math.NEGATIVE_INFINITY;
		var zMin = Math.POSITIVE_INFINITY;
		var zMax = Math.NEGATIVE_INFINITY;
		var d;
		var i = 0;
		while(i < 24) {
			var key = i++;
			d = this._projAABBPoints.data[key];
			if(d < xMin) xMin = d;
			if(d > xMax) xMax = d;
			var key1 = i++;
			d = this._projAABBPoints.data[key1];
			if(d < yMin) yMin = d;
			if(d > yMax) yMax = d;
			var key2 = i++;
			d = this._projAABBPoints.data[key2];
			if(d < zMin) zMin = d;
			if(d > zMax) zMax = d;
		}
		var invXRange = 1 / (xMax - xMin);
		var invYRange = 1 / (yMax - yMin);
		var invZRange = 1 / (zMax - zMin);
		if(0 >= raw.length && !raw.fixed) raw.length = 1;
		raw.data[0] = 2 * invXRange;
		if(5 >= raw.length && !raw.fixed) raw.length = 6;
		raw.data[5] = 2 * invYRange;
		if(10 >= raw.length && !raw.fixed) raw.length = 11;
		raw.data[10] = invZRange;
		if(12 >= raw.length && !raw.fixed) raw.length = 13;
		raw.data[12] = -(xMax + xMin) * invXRange;
		if(13 >= raw.length && !raw.fixed) raw.length = 14;
		raw.data[13] = -(yMax + yMin) * invYRange;
		if(14 >= raw.length && !raw.fixed) raw.length = 15;
		raw.data[14] = -zMin * invZRange;
		var value;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		if(11 >= raw.length && !raw.fixed) raw.length = 12;
		value7 = raw.data[11] = 0;
		if(9 >= raw.length && !raw.fixed) raw.length = 10;
		value6 = raw.data[9] = value7;
		if(8 >= raw.length && !raw.fixed) raw.length = 9;
		value5 = raw.data[8] = value6;
		if(7 >= raw.length && !raw.fixed) raw.length = 8;
		value4 = raw.data[7] = value5;
		if(6 >= raw.length && !raw.fixed) raw.length = 7;
		value3 = raw.data[6] = value4;
		if(4 >= raw.length && !raw.fixed) raw.length = 5;
		value2 = raw.data[4] = value3;
		if(3 >= raw.length && !raw.fixed) raw.length = 4;
		value1 = raw.data[3] = value2;
		if(2 >= raw.length && !raw.fixed) raw.length = 3;
		value = raw.data[2] = value1;
		if(1 >= raw.length && !raw.fixed) raw.length = 2;
		raw.data[1] = value;
		if(15 >= raw.length && !raw.fixed) raw.length = 16;
		raw.data[15] = 1;
		if(target == null) target = new openfl.geom.Matrix3D();
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d.lights.DirectionalLight
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_direction:"set_direction",get_direction:"get_direction",get_sceneDirection:"get_sceneDirection"})
});
away3d.lights.LightProbe = function(diffuseMap,specularMap) {
	away3d.lights.LightBase.call(this);
	this._diffuseMap = diffuseMap;
	this._specularMap = specularMap;
};
$hxClasses["away3d.lights.LightProbe"] = away3d.lights.LightProbe;
away3d.lights.LightProbe.__name__ = ["away3d","lights","LightProbe"];
away3d.lights.LightProbe.__super__ = away3d.lights.LightBase;
away3d.lights.LightProbe.prototype = $extend(away3d.lights.LightBase.prototype,{
	createEntityPartitionNode: function() {
		return new away3d.core.partition.LightProbeNode(this);
	}
	,get_diffuseMap: function() {
		return this._diffuseMap;
	}
	,set_diffuseMap: function(value) {
		this._diffuseMap = value;
		return value;
	}
	,get_specularMap: function() {
		return this._specularMap;
	}
	,set_specularMap: function(value) {
		this._specularMap = value;
		return value;
	}
	,updateBounds: function() {
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		throw new openfl.errors.Error("Object projection matrices are not supported for LightProbe objects!");
		return null;
	}
	,__class__: away3d.lights.LightProbe
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_specularMap:"set_specularMap",get_specularMap:"get_specularMap",set_diffuseMap:"set_diffuseMap",get_diffuseMap:"get_diffuseMap"})
});
away3d.lights.PointLight = function() {
	this._radius = 90000;
	this._fallOff = 100000;
	away3d.lights.LightBase.call(this);
	this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
};
$hxClasses["away3d.lights.PointLight"] = away3d.lights.PointLight;
away3d.lights.PointLight.__name__ = ["away3d","lights","PointLight"];
away3d.lights.PointLight.__super__ = away3d.lights.LightBase;
away3d.lights.PointLight.prototype = $extend(away3d.lights.LightBase.prototype,{
	createShadowMapper: function() {
		return new away3d.lights.shadowmaps.CubeMapShadowMapper();
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.PointLightNode(this);
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		this._radius = value;
		if(this._radius < 0) this._radius = 0; else if(this._radius > this._fallOff) {
			this._fallOff = this._radius;
			this.invalidateBounds();
		}
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		return value;
	}
	,fallOffFactor: function() {
		return this._fallOffFactor;
	}
	,get_fallOff: function() {
		return this._fallOff;
	}
	,set_fallOff: function(value) {
		this._fallOff = value;
		if(this._fallOff < 0) this._fallOff = 0;
		if(this._fallOff < this._radius) this._radius = this._fallOff;
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		this.invalidateBounds();
		return value;
	}
	,updateBounds: function() {
		this._bounds.fromSphere(new openfl.geom.Vector3D(),this._fallOff);
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.BoundingSphere();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl.geom.Matrix3D();
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this._parent.get_inverseSceneTransform());
		this.lookAt(new openfl.geom.Vector3D(m.rawData.data[12],m.rawData.data[13],m.rawData.data[14]));
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this.get_inverseSceneTransform());
		m.copyColumnTo(3,this._pos);
		var v1 = m.deltaTransformVector(bounds.get_min());
		var v2 = m.deltaTransformVector(bounds.get_max());
		var z = this._pos.z;
		var d1 = v1.x * v1.x + v1.y * v1.y + v1.z * v1.z;
		var d2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
		var d = Math.sqrt(d1 > d2?d1:d2);
		var zMin;
		var zMax;
		zMin = z - d;
		zMax = z + d;
		var value;
		if(0 >= raw.length && !raw.fixed) raw.length = 1;
		value = raw.data[0] = zMin / d;
		if(5 >= raw.length && !raw.fixed) raw.length = 6;
		raw.data[5] = value;
		if(10 >= raw.length && !raw.fixed) raw.length = 11;
		raw.data[10] = zMax / (zMax - zMin);
		if(11 >= raw.length && !raw.fixed) raw.length = 12;
		raw.data[11] = 1;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		var value8;
		var value9;
		var value10;
		if(15 >= raw.length && !raw.fixed) raw.length = 16;
		value10 = raw.data[15] = 0;
		if(13 >= raw.length && !raw.fixed) raw.length = 14;
		value9 = raw.data[13] = value10;
		if(12 >= raw.length && !raw.fixed) raw.length = 13;
		value8 = raw.data[12] = value9;
		if(9 >= raw.length && !raw.fixed) raw.length = 10;
		value7 = raw.data[9] = value8;
		if(8 >= raw.length && !raw.fixed) raw.length = 9;
		value6 = raw.data[8] = value7;
		if(7 >= raw.length && !raw.fixed) raw.length = 8;
		value5 = raw.data[7] = value6;
		if(6 >= raw.length && !raw.fixed) raw.length = 7;
		value4 = raw.data[6] = value5;
		if(4 >= raw.length && !raw.fixed) raw.length = 5;
		value3 = raw.data[4] = value4;
		if(3 >= raw.length && !raw.fixed) raw.length = 4;
		value2 = raw.data[3] = value3;
		if(2 >= raw.length && !raw.fixed) raw.length = 3;
		value1 = raw.data[2] = value2;
		if(1 >= raw.length && !raw.fixed) raw.length = 2;
		raw.data[1] = value1;
		if(14 >= raw.length && !raw.fixed) raw.length = 15;
		raw.data[14] = -zMin * raw.data[10];
		if(target == null) target = new openfl.geom.Matrix3D();
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d.lights.PointLight
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_fallOff:"set_fallOff",get_fallOff:"get_fallOff",set_radius:"set_radius",get_radius:"get_radius"})
});
away3d.lights.shadowmaps = {};
away3d.lights.shadowmaps.ShadowMapperBase = function() {
	this._depthMapSize = 2048;
	this._autoUpdateShadows = true;
	this._casterCollector = this.createCasterCollector();
};
$hxClasses["away3d.lights.shadowmaps.ShadowMapperBase"] = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.ShadowMapperBase.__name__ = ["away3d","lights","shadowmaps","ShadowMapperBase"];
away3d.lights.shadowmaps.ShadowMapperBase.prototype = {
	createCasterCollector: function() {
		return new away3d.core.traverse.ShadowCasterCollector();
	}
	,get_autoUpdateShadows: function() {
		return this._autoUpdateShadows;
	}
	,set_autoUpdateShadows: function(value) {
		this._autoUpdateShadows = value;
		return value;
	}
	,updateShadows: function() {
		this._shadowsInvalid = true;
	}
	,setDepthMap: function(depthMap) {
		if(this._depthMap == depthMap) return;
		if(this._depthMap != null && !this._explicitDepthMap) this._depthMap.dispose();
		this._depthMap = depthMap;
		if(this._depthMap != null) {
			this._explicitDepthMap = true;
			this._depthMapSize = this._depthMap.get_width();
		} else this._explicitDepthMap = false;
	}
	,get_light: function() {
		return this._light;
	}
	,set_light: function(value) {
		this._light = value;
		return value;
	}
	,get_depthMap: function() {
		if(this._depthMap == null) this._depthMap = this.createDepthTexture();
		return this._depthMap;
	}
	,get_depthMapSize: function() {
		return this._depthMapSize;
	}
	,set_depthMapSize: function(value) {
		if(value == this._depthMapSize) return value;
		this._depthMapSize = value;
		if(this._explicitDepthMap) throw new openfl.errors.Error("Cannot set depth map size for the current renderer."); else if(this._depthMap != null) {
			this._depthMap.dispose();
			this._depthMap = null;
		}
		return value;
	}
	,dispose: function() {
		this._casterCollector = null;
		if(this._depthMap != null && !this._explicitDepthMap) this._depthMap.dispose();
		this._depthMap = null;
	}
	,createDepthTexture: function() {
		return new away3d.textures.RenderTexture(this._depthMapSize,this._depthMapSize);
	}
	,renderDepthMap: function(stage3DProxy,entityCollector,renderer) {
		this._shadowsInvalid = false;
		this.updateDepthProjection(entityCollector.get_camera());
		if(this._depthMap == null) this._depthMap = this.createDepthTexture();
		this.drawDepthMap(this._depthMap.getTextureForStage3D(stage3DProxy),entityCollector.scene,renderer);
	}
	,updateDepthProjection: function(viewCamera) {
		throw new away3d.errors.AbstractMethodError();
	}
	,drawDepthMap: function(target,scene,renderer) {
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.lights.shadowmaps.ShadowMapperBase
	,__properties__: {set_depthMapSize:"set_depthMapSize",get_depthMapSize:"get_depthMapSize",get_depthMap:"get_depthMap",set_light:"set_light",get_light:"get_light",set_autoUpdateShadows:"set_autoUpdateShadows",get_autoUpdateShadows:"get_autoUpdateShadows"}
};
away3d.lights.shadowmaps.CubeMapShadowMapper = function() {
	away3d.lights.shadowmaps.ShadowMapperBase.call(this);
	this._depthMapSize = 512;
	this._needsRender = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),6,false);
	this.initCameras();
};
$hxClasses["away3d.lights.shadowmaps.CubeMapShadowMapper"] = away3d.lights.shadowmaps.CubeMapShadowMapper;
away3d.lights.shadowmaps.CubeMapShadowMapper.__name__ = ["away3d","lights","shadowmaps","CubeMapShadowMapper"];
away3d.lights.shadowmaps.CubeMapShadowMapper.__super__ = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.CubeMapShadowMapper.prototype = $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype,{
	initCameras: function() {
		this._depthCameras = new Array();
		this._lenses = new Array();
		this.addCamera(0,90,0);
		this.addCamera(0,-90,0);
		this.addCamera(-90,0,0);
		this.addCamera(90,0,0);
		this.addCamera(0,0,0);
		this.addCamera(0,180,0);
	}
	,addCamera: function(rotationX,rotationY,rotationZ) {
		var cam = new away3d.cameras.Camera3D();
		cam.set_rotationX(rotationX);
		cam.set_rotationY(rotationY);
		cam.set_rotationZ(rotationZ);
		cam.get_lens().set_near(.01);
		(js.Boot.__cast(cam.get_lens() , away3d.cameras.lenses.PerspectiveLens)).set_fieldOfView(90);
		this._lenses.push(js.Boot.__cast(cam.get_lens() , away3d.cameras.lenses.PerspectiveLens));
		cam.get_lens().set_aspectRatio(1);
		this._depthCameras.push(cam);
	}
	,createDepthTexture: function() {
		return new away3d.textures.RenderCubeTexture(this._depthMapSize);
	}
	,updateDepthProjection: function(viewCamera) {
		var maxDistance = (js.Boot.__cast(this._light , away3d.lights.PointLight))._fallOff;
		var pos = this._light.get_scenePosition();
		var i = 0;
		while(i < 6) {
			this._lenses[i].set_far(maxDistance);
			this._depthCameras[i].set_position(pos);
			this._needsRender[i] = true;
			++i;
		}
	}
	,drawDepthMap: function(target,scene,renderer) {
		var i = 0;
		while(i < 6) {
			if(this._needsRender[i]) {
				this._casterCollector.set_camera(this._depthCameras[i]);
				this._casterCollector.clear();
				scene.traversePartitions(this._casterCollector);
				renderer.render(this._casterCollector,target,null,i);
				this._casterCollector.cleanUp();
			}
			++i;
		}
	}
	,__class__: away3d.lights.shadowmaps.CubeMapShadowMapper
});
away3d.lights.shadowmaps.DirectionalShadowMapper = function() {
	this._lightOffset = 10000;
	this._snap = 64;
	away3d.lights.shadowmaps.ShadowMapperBase.call(this);
	this._cullPlanes = new Array();
	this._overallDepthLens = new away3d.cameras.lenses.FreeMatrixLens();
	this._overallDepthCamera = new away3d.cameras.Camera3D(this._overallDepthLens);
	this._localFrustum = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(openfl._Vector.Vector_Impl_._new(24)),24,0);
	this._matrix = new openfl.geom.Matrix3D();
};
$hxClasses["away3d.lights.shadowmaps.DirectionalShadowMapper"] = away3d.lights.shadowmaps.DirectionalShadowMapper;
away3d.lights.shadowmaps.DirectionalShadowMapper.__name__ = ["away3d","lights","shadowmaps","DirectionalShadowMapper"];
away3d.lights.shadowmaps.DirectionalShadowMapper.__super__ = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.DirectionalShadowMapper.prototype = $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype,{
	get_snap: function() {
		return this._snap;
	}
	,set_snap: function(value) {
		this._snap = value;
		return value;
	}
	,get_lightOffset: function() {
		return this._lightOffset;
	}
	,set_lightOffset: function(value) {
		this._lightOffset = value;
		return value;
	}
	,get_depthProjection: function() {
		return this._overallDepthCamera.get_viewProjection();
	}
	,get_depth: function() {
		return this._maxZ - this._minZ;
	}
	,drawDepthMap: function(target,scene,renderer) {
		this._casterCollector.set_camera(this._overallDepthCamera);
		this._casterCollector.set_cullPlanes(this._cullPlanes);
		this._casterCollector.clear();
		scene.traversePartitions(this._casterCollector);
		renderer.render(this._casterCollector,target);
		this._casterCollector.cleanUp();
	}
	,updateCullPlanes: function(viewCamera) {
		var lightFrustumPlanes = this._overallDepthCamera.get_frustumPlanes();
		var viewFrustumPlanes = viewCamera.get_frustumPlanes();
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._cullPlanes),4);
		this._cullPlanes[0] = lightFrustumPlanes[0];
		this._cullPlanes[1] = lightFrustumPlanes[1];
		this._cullPlanes[2] = lightFrustumPlanes[2];
		this._cullPlanes[3] = lightFrustumPlanes[3];
		var dir = (js.Boot.__cast(this._light , away3d.lights.DirectionalLight)).get_sceneDirection();
		var dirX = dir.x;
		var dirY = dir.y;
		var dirZ = dir.z;
		var j = 4;
		var i = 0;
		while(i < 6) {
			var plane = viewFrustumPlanes[i];
			if(plane.a * dirX + plane.b * dirY + plane.c * dirZ < 0) this._cullPlanes[j++] = plane;
			++i;
		}
	}
	,updateDepthProjection: function(viewCamera) {
		this.updateProjectionFromFrustumCorners(viewCamera,(function($this) {
			var $r;
			var value = viewCamera.get_lens().get_frustumCorners();
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)),this._matrix);
		this._overallDepthLens.set_matrix(this._matrix);
		this.updateCullPlanes(viewCamera);
	}
	,updateProjectionFromFrustumCorners: function(viewCamera,corners,matrix) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var dir;
		var x;
		var y;
		var z;
		var minX;
		var minY;
		var maxX;
		var maxY;
		var i;
		dir = (js.Boot.__cast(this._light , away3d.lights.DirectionalLight)).get_sceneDirection();
		this._overallDepthCamera.set_transform(this._light.get_sceneTransform());
		x = (viewCamera.get_x() - dir.x * this._lightOffset) / this._snap * this._snap;
		y = (viewCamera.get_y() - dir.y * this._lightOffset) / this._snap * this._snap;
		z = (viewCamera.get_z() - dir.z * this._lightOffset) / this._snap * this._snap;
		this._overallDepthCamera.set_x(x);
		this._overallDepthCamera.set_y(y);
		this._overallDepthCamera.set_z(z);
		this._matrix.copyFrom(this._overallDepthCamera.get_inverseSceneTransform());
		this._matrix.prepend(viewCamera.get_sceneTransform());
		this._matrix.transformVectors(corners,this._localFrustum);
		minX = maxX = this._localFrustum.data[0];
		minY = maxY = this._localFrustum.data[1];
		this._maxZ = this._localFrustum.data[2];
		i = 3;
		while(i < 24) {
			x = this._localFrustum.data[i];
			y = this._localFrustum.data[i + 1];
			z = this._localFrustum.data[i + 2];
			if(x < minX) minX = x;
			if(x > maxX) maxX = x;
			if(y < minY) minY = y;
			if(y > maxY) maxY = y;
			if(z > this._maxZ) this._maxZ = z;
			i += 3;
		}
		this._minZ = 1;
		var w = maxX - minX;
		var h = maxY - minY;
		var d = 1 / (this._maxZ - this._minZ);
		if(minX < 0) minX -= this._snap;
		if(minY < 0) minY -= this._snap;
		minX = minX / this._snap * this._snap;
		minY = minY / this._snap * this._snap;
		var snap2 = 2 * this._snap;
		w = (w / snap2 + 2) * snap2;
		h = (h / snap2 + 2) * snap2;
		maxX = minX + w;
		maxY = minY + h;
		w = 1 / w;
		h = 1 / h;
		if(0 >= raw.length && !raw.fixed) raw.length = 1;
		raw.data[0] = 2 * w;
		if(5 >= raw.length && !raw.fixed) raw.length = 6;
		raw.data[5] = 2 * h;
		if(10 >= raw.length && !raw.fixed) raw.length = 11;
		raw.data[10] = d;
		if(12 >= raw.length && !raw.fixed) raw.length = 13;
		raw.data[12] = -(maxX + minX) * w;
		if(13 >= raw.length && !raw.fixed) raw.length = 14;
		raw.data[13] = -(maxY + minY) * h;
		if(14 >= raw.length && !raw.fixed) raw.length = 15;
		raw.data[14] = -this._minZ * d;
		if(15 >= raw.length && !raw.fixed) raw.length = 16;
		raw.data[15] = 1;
		var value;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		if(11 >= raw.length && !raw.fixed) raw.length = 12;
		value7 = raw.data[11] = 0;
		if(9 >= raw.length && !raw.fixed) raw.length = 10;
		value6 = raw.data[9] = value7;
		if(8 >= raw.length && !raw.fixed) raw.length = 9;
		value5 = raw.data[8] = value6;
		if(7 >= raw.length && !raw.fixed) raw.length = 8;
		value4 = raw.data[7] = value5;
		if(6 >= raw.length && !raw.fixed) raw.length = 7;
		value3 = raw.data[6] = value4;
		if(4 >= raw.length && !raw.fixed) raw.length = 5;
		value2 = raw.data[4] = value3;
		if(3 >= raw.length && !raw.fixed) raw.length = 4;
		value1 = raw.data[3] = value2;
		if(2 >= raw.length && !raw.fixed) raw.length = 3;
		value = raw.data[2] = value1;
		if(1 >= raw.length && !raw.fixed) raw.length = 2;
		raw.data[1] = value;
		matrix.copyRawDataFrom(raw);
	}
	,__class__: away3d.lights.shadowmaps.DirectionalShadowMapper
	,__properties__: $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype.__properties__,{get_depth:"get_depth",get_depthProjection:"get_depthProjection",set_lightOffset:"set_lightOffset",get_lightOffset:"get_lightOffset",set_snap:"set_snap",get_snap:"get_snap"})
});
away3d.materials.MaterialBase = function() {
	this._blendMode = openfl.display.BlendMode.NORMAL;
	this._mipmap = true;
	this._smooth = true;
	this._depthCompareMode = 515;
	this._owners = new Array();
	this._passes = new Array();
	this._depthPass = new away3d.materials.passes.DepthMapPass();
	this._distancePass = new away3d.materials.passes.DistanceMapPass();
	this._depthPass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDepthPassChange));
	this._distancePass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDistancePassChange));
	this.set_alphaPremultiplied(false);
	this._uniqueId = away3d.materials.MaterialBase.MATERIAL_ID_COUNT++;
	this._depthPassId = 0;
	this._numPasses = 0;
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.MaterialBase"] = away3d.materials.MaterialBase;
away3d.materials.MaterialBase.__name__ = ["away3d","materials","MaterialBase"];
away3d.materials.MaterialBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.MaterialBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.MaterialBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.MATERIAL;
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(value != this._lightPicker) {
			this._lightPicker = value;
			var len = this._passes.length;
			var i = 0;
			while(i < len) {
				this._passes[i].set_lightPicker(this._lightPicker);
				++i;
			}
		}
		return value;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		this._mipmap = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_mipmap(value);
			++i;
		}
		return value;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		this._smooth = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_smooth(value);
			++i;
		}
		return value;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return value;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		this._repeat = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_repeat(value);
			++i;
		}
		return value;
	}
	,dispose: function() {
		var i = 0;
		i = 0;
		while(i < this._numPasses) {
			this._passes[i].dispose();
			++i;
		}
		this._depthPass.dispose();
		this._distancePass.dispose();
		this._depthPass.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDepthPassChange));
		this._distancePass.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDistancePassChange));
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_bothSides(value);
			++i;
		}
		this._depthPass.set_bothSides(value);
		this._distancePass.set_bothSides(value);
		return value;
	}
	,get_blendMode: function() {
		return this._blendMode;
	}
	,set_blendMode: function(value) {
		this._blendMode = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_alphaPremultiplied(value);
			++i;
		}
		return value;
	}
	,get_requiresBlending: function() {
		return this._blendMode != openfl.display.BlendMode.NORMAL;
	}
	,get_uniqueId: function() {
		return this._uniqueId;
	}
	,get_numPasses: function() {
		return this._numPasses;
	}
	,hasDepthAlphaThreshold: function() {
		return this._depthPass.get_alphaThreshold() > 0;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) distanceBased = false;
		this._distanceBasedDepthRender = distanceBased;
		if(distanceBased) this._distancePass.activate(stage3DProxy,camera); else this._depthPass.activate(stage3DProxy,camera);
	}
	,deactivateForDepth: function(stage3DProxy) {
		if(this._distanceBasedDepthRender) this._distancePass.deactivate(stage3DProxy); else this._depthPass.deactivate(stage3DProxy);
	}
	,renderDepth: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._distanceBasedDepthRender) {
			if(renderable.get_animator() != null) this._distancePass.updateAnimationState(renderable,stage3DProxy,camera);
			this._distancePass.render(renderable,stage3DProxy,camera,viewProjection);
		} else {
			if(renderable.get_animator() != null) this._depthPass.updateAnimationState(renderable,stage3DProxy,camera);
			this._depthPass.render(renderable,stage3DProxy,camera,viewProjection);
		}
	}
	,passRendersToTexture: function(index) {
		return this._passes[index].get_renderToTexture();
	}
	,activatePass: function(index,stage3DProxy,camera) {
		this._passes[index].activate(stage3DProxy,camera);
	}
	,deactivatePass: function(index,stage3DProxy) {
		this._passes[index].deactivate(stage3DProxy);
	}
	,renderPass: function(index,renderable,stage3DProxy,entityCollector,viewProjection) {
		if(this._lightPicker != null) this._lightPicker.collectLights(renderable,entityCollector);
		var pass = this._passes[index];
		if(renderable.get_animator() != null) pass.updateAnimationState(renderable,stage3DProxy,entityCollector.get_camera());
		pass.render(renderable,stage3DProxy,entityCollector.get_camera(),viewProjection);
	}
	,addOwner: function(owner) {
		this._owners.push(owner);
		if(owner.get_animator() != null) {
			if(this._animationSet != null && owner.get_animator().get_animationSet() != this._animationSet) throw new openfl.errors.Error("A Material instance cannot be shared across renderables with different animator libraries"); else if(this._animationSet != owner.get_animator().get_animationSet()) {
				this._animationSet = owner.get_animator().get_animationSet();
				var i = 0;
				while(i < this._numPasses) {
					this._passes[i].set_animationSet(this._animationSet);
					++i;
				}
				this._depthPass.set_animationSet(this._animationSet);
				this._distancePass.set_animationSet(this._animationSet);
				this.invalidatePasses(null);
			}
		}
	}
	,removeOwner: function(owner) {
		this._owners.splice(Lambda.indexOf(this._owners,owner),1);
		if(this._owners.length == 0) {
			this._animationSet = null;
			var i = 0;
			while(i < this._numPasses) {
				this._passes[i].set_animationSet(this._animationSet);
				++i;
			}
			this._depthPass.set_animationSet(this._animationSet);
			this._distancePass.set_animationSet(this._animationSet);
			this.invalidatePasses(null);
		}
	}
	,get_owners: function() {
		return this._owners;
	}
	,updateMaterial: function(context) {
	}
	,deactivate: function(stage3DProxy) {
		this._passes[this._numPasses - 1].deactivate(stage3DProxy);
	}
	,invalidatePasses: function(triggerPass) {
		var _g = this;
		var owner;
		this._depthPass.invalidateShaderProgram();
		this._distancePass.invalidateShaderProgram();
		if(this._animationSet != null) {
			this._animationSet.resetGPUCompatibility();
			Lambda.foreach(this._owners,function(owner1) {
				if(owner1.get_animator() != null) {
					owner1.get_animator().testGPUCompatibility(_g._depthPass);
					owner1.get_animator().testGPUCompatibility(_g._distancePass);
				}
				return true;
			});
		}
		var i;
		var _g1 = 0;
		var _g2 = this._numPasses;
		while(_g1 < _g2) {
			var i1 = [_g1++];
			if(this._passes[i1[0]] != triggerPass) this._passes[i1[0]].invalidateShaderProgram(false);
			if(this._animationSet != null) Lambda.foreach(this._owners,(function(i1) {
				return function(owner2) {
					if(owner2.get_animator() != null) owner2.get_animator().testGPUCompatibility(_g._passes[i1[0]]);
					return true;
				};
			})(i1));
		}
	}
	,removePass: function(pass) {
		this._passes.splice(HxOverrides.indexOf(this._passes,pass,0),1);
		--this._numPasses;
	}
	,clearPasses: function() {
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onPassChange));
			++i;
		}
		this._passes = [];
		this._numPasses = 0;
	}
	,addPass: function(pass) {
		this._passes[this._numPasses++] = pass;
		pass.set_animationSet(this._animationSet);
		pass.set_alphaPremultiplied(this._alphaPremultiplied);
		pass.set_mipmap(this._mipmap);
		pass.set_smooth(this._smooth);
		pass.set_repeat(this._repeat);
		pass.set_lightPicker(this._lightPicker);
		pass.set_bothSides(this._bothSides);
		pass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onPassChange));
		this.invalidatePasses(null);
	}
	,onPassChange: function(event) {
		var mult = 1;
		var ids;
		var len;
		this._renderOrderId = 0;
		var i = 0;
		while(i < this._numPasses) {
			ids = this._passes[i]._program3Dids;
			len = ids.length;
			var j = 0;
			while(j < len) {
				if(ids[j] != -1) {
					this._renderOrderId += mult * ids[j] | 0;
					j = len;
				}
				++j;
			}
			mult *= 1000;
			++i;
		}
	}
	,onDistancePassChange: function(event) {
		var ids = this._distancePass._program3Dids;
		var len = ids.length;
		this._depthPassId = 0;
		var j = 0;
		while(j < len) {
			if(ids[j] != -1) {
				this._depthPassId += ids[j];
				j = len;
			}
			++j;
		}
	}
	,onDepthPassChange: function(event) {
		var ids = this._depthPass._program3Dids;
		var len = ids.length;
		this._depthPassId = 0;
		var j = 0;
		while(j < len) {
			if(ids[j] != -1) {
				this._depthPassId += ids[j];
				j = len;
			}
			++j;
		}
	}
	,__class__: away3d.materials.MaterialBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_owners:"get_owners",get_numPasses:"get_numPasses",get_uniqueId:"get_uniqueId",get_requiresBlending:"get_requiresBlending",set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_bothSides:"set_bothSides",get_bothSides:"get_bothSides",set_repeat:"set_repeat",get_repeat:"get_repeat",set_depthCompareMode:"set_depthCompareMode",get_depthCompareMode:"get_depthCompareMode",set_smooth:"set_smooth",get_smooth:"get_smooth",set_mipmap:"set_mipmap",get_mipmap:"get_mipmap",set_lightPicker:"set_lightPicker",get_lightPicker:"get_lightPicker",get_assetType:"get_assetType"})
});
away3d.materials.SinglePassMaterialBase = function() {
	away3d.materials.MaterialBase.call(this);
	this.addPass(this._screenPass = new away3d.materials.passes.SuperShaderPass(this));
};
$hxClasses["away3d.materials.SinglePassMaterialBase"] = away3d.materials.SinglePassMaterialBase;
away3d.materials.SinglePassMaterialBase.__name__ = ["away3d","materials","SinglePassMaterialBase"];
away3d.materials.SinglePassMaterialBase.__super__ = away3d.materials.MaterialBase;
away3d.materials.SinglePassMaterialBase.prototype = $extend(away3d.materials.MaterialBase.prototype,{
	get_enableLightFallOff: function() {
		return this._screenPass.get_enableLightFallOff();
	}
	,set_enableLightFallOff: function(value) {
		this._screenPass.set_enableLightFallOff(value);
		return value;
	}
	,get_alphaThreshold: function() {
		return this._screenPass.get_diffuseMethod().get_alphaThreshold();
	}
	,set_alphaThreshold: function(value) {
		this._screenPass.get_diffuseMethod().set_alphaThreshold(value);
		this._depthPass.set_alphaThreshold(value);
		this._distancePass.set_alphaThreshold(value);
		return value;
	}
	,set_blendMode: function(value) {
		away3d.materials.MaterialBase.prototype.set_blendMode.call(this,value);
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,set_depthCompareMode: function(value) {
		away3d.materials.MaterialBase.prototype.set_depthCompareMode.call(this,value);
		this._screenPass.set_depthCompareMode(value);
		return value;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) distanceBased = false;
		if(distanceBased) this._distancePass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture()); else this._depthPass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture());
		away3d.materials.MaterialBase.prototype.activateForDepth.call(this,stage3DProxy,camera,distanceBased);
	}
	,get_specularLightSources: function() {
		return this._screenPass.get_specularLightSources();
	}
	,set_specularLightSources: function(value) {
		this._screenPass.set_specularLightSources(value);
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._screenPass.get_diffuseLightSources();
	}
	,set_diffuseLightSources: function(value) {
		this._screenPass.set_diffuseLightSources(value);
		return value;
	}
	,get_requiresBlending: function() {
		return away3d.materials.MaterialBase.prototype.get_requiresBlending.call(this) || this._alphaBlending || this._screenPass.get_colorTransform() != null && this._screenPass.get_colorTransform().alphaMultiplier < 1;
	}
	,get_colorTransform: function() {
		return this._screenPass.get_colorTransform();
	}
	,set_colorTransform: function(value) {
		this._screenPass.set_colorTransform(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._screenPass.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._screenPass.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._screenPass.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._screenPass.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._screenPass.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._screenPass.set_diffuseMethod(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._screenPass.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._screenPass.set_normalMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._screenPass.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._screenPass.set_specularMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._screenPass.addMethod(method);
	}
	,get_numMethods: function() {
		return this._screenPass.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._screenPass.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._screenPass.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._screenPass.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._screenPass.removeMethod(method);
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return value;
		away3d.materials.MaterialBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._screenPass.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._screenPass.set_normalMap(value);
		return value;
	}
	,get_specularMap: function() {
		return this._screenPass.get_specularMethod().get_texture();
	}
	,set_specularMap: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_texture(value); else throw new openfl.errors.Error("No specular method was set to assign the specularGlossMap to");
		return value;
	}
	,get_gloss: function() {
		if(this._screenPass.get_specularMethod() != null) return this._screenPass.get_specularMethod().get_gloss(); else return 0;
	}
	,set_gloss: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_gloss(value);
		return value;
	}
	,get_ambient: function() {
		return this._screenPass.get_ambientMethod().get_ambient();
	}
	,set_ambient: function(value) {
		this._screenPass.get_ambientMethod().set_ambient(value);
		return value;
	}
	,get_specular: function() {
		if(this._screenPass.get_specularMethod() != null) return this._screenPass.get_specularMethod().get_specular(); else return 0;
	}
	,set_specular: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_specular(value);
		return value;
	}
	,get_ambientColor: function() {
		return this._screenPass.get_ambientMethod().get_ambientColor();
	}
	,set_ambientColor: function(value) {
		this._screenPass.get_ambientMethod().set_ambientColor(value);
		return value;
	}
	,get_specularColor: function() {
		return this._screenPass.get_specularMethod().get_specularColor();
	}
	,set_specularColor: function(value) {
		this._screenPass.get_specularMethod().set_specularColor(value);
		return value;
	}
	,get_alphaBlending: function() {
		return this._alphaBlending;
	}
	,set_alphaBlending: function(value) {
		this._alphaBlending = value;
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		return value;
	}
	,updateMaterial: function(context) {
		if(this._screenPass._passesDirty) {
			this.clearPasses();
			if(this._screenPass._passes != null) {
				var len = this._screenPass._passes.length;
				var i = 0;
				while(i < len) {
					this.addPass(this._screenPass._passes[i]);
					++i;
				}
			}
			this.addPass(this._screenPass);
			this._screenPass._passesDirty = false;
		}
	}
	,set_lightPicker: function(value) {
		away3d.materials.MaterialBase.prototype.set_lightPicker.call(this,value);
		this._screenPass.set_lightPicker(value);
		return value;
	}
	,__class__: away3d.materials.SinglePassMaterialBase
	,__properties__: $extend(away3d.materials.MaterialBase.prototype.__properties__,{set_alphaBlending:"set_alphaBlending",get_alphaBlending:"get_alphaBlending",set_specularColor:"set_specularColor",get_specularColor:"get_specularColor",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_specular:"set_specular",get_specular:"get_specular",set_ambient:"set_ambient",get_ambient:"get_ambient",set_gloss:"set_gloss",get_gloss:"get_gloss",set_specularMap:"set_specularMap",get_specularMap:"get_specularMap",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",get_numMethods:"get_numMethods",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"})
});
away3d.materials.ColorMaterial = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 13421772;
	this._diffuseAlpha = 1;
	away3d.materials.SinglePassMaterialBase.call(this);
	this.set_color(color);
	this.set_alpha(alpha);
};
$hxClasses["away3d.materials.ColorMaterial"] = away3d.materials.ColorMaterial;
away3d.materials.ColorMaterial.__name__ = ["away3d","materials","ColorMaterial"];
away3d.materials.ColorMaterial.__super__ = away3d.materials.SinglePassMaterialBase;
away3d.materials.ColorMaterial.prototype = $extend(away3d.materials.SinglePassMaterialBase.prototype,{
	get_alpha: function() {
		return this._screenPass.get_diffuseMethod().get_diffuseAlpha();
	}
	,set_alpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		this._screenPass.get_diffuseMethod().set_diffuseAlpha(this._diffuseAlpha = value);
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,get_color: function() {
		return this._screenPass.get_diffuseMethod().get_diffuseColor();
	}
	,set_color: function(value) {
		this._screenPass.get_diffuseMethod().set_diffuseColor(value);
		return value;
	}
	,get_requiresBlending: function() {
		return away3d.materials.SinglePassMaterialBase.prototype.get_requiresBlending.call(this) || this._diffuseAlpha < 1;
	}
	,__class__: away3d.materials.ColorMaterial
	,__properties__: $extend(away3d.materials.SinglePassMaterialBase.prototype.__properties__,{set_color:"set_color",get_color:"get_color",set_alpha:"set_alpha",get_alpha:"get_alpha"})
});
away3d.materials.LightSources = function() { };
$hxClasses["away3d.materials.LightSources"] = away3d.materials.LightSources;
away3d.materials.LightSources.__name__ = ["away3d","materials","LightSources"];
away3d.materials.SegmentMaterial = function(thickness) {
	if(thickness == null) thickness = 1.25;
	away3d.materials.MaterialBase.call(this);
	this.set_bothSides(true);
	this.addPass(this._screenPass = new away3d.materials.passes.SegmentPass(thickness));
	this._screenPass.set_material(this);
};
$hxClasses["away3d.materials.SegmentMaterial"] = away3d.materials.SegmentMaterial;
away3d.materials.SegmentMaterial.__name__ = ["away3d","materials","SegmentMaterial"];
away3d.materials.SegmentMaterial.__super__ = away3d.materials.MaterialBase;
away3d.materials.SegmentMaterial.prototype = $extend(away3d.materials.MaterialBase.prototype,{
	__class__: away3d.materials.SegmentMaterial
});
away3d.materials.TextureMaterial = function(texture,smooth,repeat,mipmap) {
	if(mipmap == null) mipmap = true;
	if(repeat == null) repeat = false;
	if(smooth == null) smooth = true;
	away3d.materials.SinglePassMaterialBase.call(this);
	this.set_texture(texture);
	this.set_smooth(smooth);
	this.set_repeat(repeat);
	this.set_mipmap(mipmap);
};
$hxClasses["away3d.materials.TextureMaterial"] = away3d.materials.TextureMaterial;
away3d.materials.TextureMaterial.__name__ = ["away3d","materials","TextureMaterial"];
away3d.materials.TextureMaterial.__super__ = away3d.materials.SinglePassMaterialBase;
away3d.materials.TextureMaterial.prototype = $extend(away3d.materials.SinglePassMaterialBase.prototype,{
	get_animateUVs: function() {
		return this._screenPass.get_animateUVs();
	}
	,set_animateUVs: function(value) {
		this._screenPass.set_animateUVs(value);
		return value;
	}
	,get_alpha: function() {
		if(this._screenPass.get_colorTransform() != null) return this._screenPass.get_colorTransform().alphaMultiplier; else return 1;
	}
	,set_alpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		if(this.get_colorTransform() == null) this.set_colorTransform(new openfl.geom.ColorTransform());
		this.get_colorTransform().alphaMultiplier = value;
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,get_texture: function() {
		return this._screenPass.get_diffuseMethod().get_texture();
	}
	,set_texture: function(value) {
		this._screenPass.get_diffuseMethod().set_texture(value);
		return value;
	}
	,get_ambientTexture: function() {
		return this._screenPass.get_ambientMethod().get_texture();
	}
	,set_ambientTexture: function(value) {
		this._screenPass.get_ambientMethod().set_texture(value);
		this._screenPass.get_diffuseMethod().set_useAmbientTexture(js.Boot.__cast(value != null , Bool));
		return value;
	}
	,__class__: away3d.materials.TextureMaterial
	,__properties__: $extend(away3d.materials.SinglePassMaterialBase.prototype.__properties__,{set_ambientTexture:"set_ambientTexture",get_ambientTexture:"get_ambientTexture",set_texture:"set_texture",get_texture:"get_texture",set_alpha:"set_alpha",get_alpha:"get_alpha",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs"})
});
away3d.materials.compilation.MethodDependencyCounter = function() {
	this._usesGlobalPosFragment = false;
};
$hxClasses["away3d.materials.compilation.MethodDependencyCounter"] = away3d.materials.compilation.MethodDependencyCounter;
away3d.materials.compilation.MethodDependencyCounter.__name__ = ["away3d","materials","compilation","MethodDependencyCounter"];
away3d.materials.compilation.MethodDependencyCounter.prototype = {
	reset: function() {
		this._projectionDependencies = 0;
		this._normalDependencies = 0;
		this._viewDirDependencies = 0;
		this._uvDependencies = 0;
		this._secondaryUVDependencies = 0;
		this._globalPosDependencies = 0;
		this._tangentDependencies = 0;
		this._usesGlobalPosFragment = false;
	}
	,setPositionedLights: function(numPointLights,lightSourceMask) {
		this._numPointLights = numPointLights;
		this._lightSourceMask = lightSourceMask;
	}
	,includeMethodVO: function(methodVO) {
		if(methodVO.needsProjection) ++this._projectionDependencies;
		if(methodVO.needsGlobalVertexPos) {
			++this._globalPosDependencies;
			if(methodVO.needsGlobalFragmentPos) this._usesGlobalPosFragment = true;
		} else if(methodVO.needsGlobalFragmentPos) {
			++this._globalPosDependencies;
			this._usesGlobalPosFragment = true;
		}
		if(methodVO.needsNormals) ++this._normalDependencies;
		if(methodVO.needsTangents) ++this._tangentDependencies;
		if(methodVO.needsView) ++this._viewDirDependencies;
		if(methodVO.needsUV) ++this._uvDependencies;
		if(methodVO.needsSecondaryUV) ++this._secondaryUVDependencies;
	}
	,get_tangentDependencies: function() {
		return this._tangentDependencies;
	}
	,get_usesGlobalPosFragment: function() {
		return this._usesGlobalPosFragment;
	}
	,get_projectionDependencies: function() {
		return this._projectionDependencies;
	}
	,get_normalDependencies: function() {
		return this._normalDependencies;
	}
	,get_viewDirDependencies: function() {
		return this._viewDirDependencies;
	}
	,get_uvDependencies: function() {
		return this._uvDependencies;
	}
	,get_secondaryUVDependencies: function() {
		return this._secondaryUVDependencies;
	}
	,get_globalPosDependencies: function() {
		return this._globalPosDependencies;
	}
	,addWorldSpaceDependencies: function(fragmentLights) {
		if(this._viewDirDependencies > 0) ++this._globalPosDependencies;
		if(this._numPointLights > 0 && (this._lightSourceMask & away3d.materials.LightSources.LIGHTS) == 1) {
			++this._globalPosDependencies;
			if(fragmentLights) this._usesGlobalPosFragment = true;
		}
	}
	,__class__: away3d.materials.compilation.MethodDependencyCounter
	,__properties__: {get_globalPosDependencies:"get_globalPosDependencies",get_secondaryUVDependencies:"get_secondaryUVDependencies",get_uvDependencies:"get_uvDependencies",get_viewDirDependencies:"get_viewDirDependencies",get_normalDependencies:"get_normalDependencies",get_projectionDependencies:"get_projectionDependencies",get_usesGlobalPosFragment:"get_usesGlobalPosFragment",get_tangentDependencies:"get_tangentDependencies"}
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,__class__: haxe.ds.StringMap
};
away3d.materials.compilation.RegisterPool = function(regName,regCount,persistent) {
	if(persistent == null) persistent = true;
	this._regName = regName;
	this._regCount = regCount;
	this._persistent = persistent;
	this.initRegisters(regName,regCount);
};
$hxClasses["away3d.materials.compilation.RegisterPool"] = away3d.materials.compilation.RegisterPool;
away3d.materials.compilation.RegisterPool.__name__ = ["away3d","materials","compilation","RegisterPool"];
away3d.materials.compilation.RegisterPool._initPool = function(regName,regCount) {
	var hash = regName + regCount;
	if(away3d.materials.compilation.RegisterPool._regPool.get(hash) != null) return hash;
	var vectorRegisters = new Array();
	away3d.materials.compilation.RegisterPool._regPool.set(hash,vectorRegisters);
	var registerComponents = new Array();
	away3d.materials.compilation.RegisterPool._regCompsPool.set(hash,registerComponents);
	var i;
	var _g = 0;
	while(_g < regCount) {
		var i1 = _g++;
		vectorRegisters[i1] = new away3d.materials.compilation.ShaderRegisterElement(regName,i1);
		var j;
		var _g1 = 0;
		while(_g1 < 4) {
			var j1 = _g1++;
			if(registerComponents[j1] == null) registerComponents[j1] = new Array();
			registerComponents[j1][i1] = new away3d.materials.compilation.ShaderRegisterElement(regName,i1,j1);
		}
	}
	return hash;
};
away3d.materials.compilation.RegisterPool.prototype = {
	requestFreeVectorReg: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(!this.isRegisterUsed(i1)) {
				if(this._persistent) this._usedVectorCount[i1]++;
				return this._vectorRegisters[i1];
			}
		}
		throw new openfl.errors.Error("Register overflow!");
		return null;
	}
	,requestFreeRegComponent: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if((function($this) {
				var $r;
				var a = $this._usedVectorCount[i1];
				var aNeg = a < 0;
				var bNeg = 0 < 0;
				$r = aNeg != bNeg?aNeg:a > 0;
				return $r;
			}(this))) continue;
			var j;
			var _g2 = 0;
			while(_g2 < 4) {
				var j1 = _g2++;
				if((function($this) {
					var $r;
					var $int = $this._usedSingleCount[j1][i1];
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					if(this._persistent) this._usedSingleCount[j1][i1]++;
					return this._registerComponents[j1][i1];
				}
			}
		}
		throw new openfl.errors.Error("Register overflow!");
		return null;
	}
	,addUsage: function(register,usageCount) {
		if(register._component > -1) {
			var a = this._usedSingleCount[register._component][register.get_index()];
			this._usedSingleCount[register._component][register.get_index()] = a + usageCount;
		} else {
			var a1 = this._usedVectorCount[register.get_index()];
			this._usedVectorCount[register.get_index()] = a1 + usageCount;
		}
	}
	,removeUsage: function(register) {
		if(register._component > -1) {
			if((function($this) {
				var $r;
				var a = --$this._usedSingleCount[register._component][register.get_index()];
				$r = (function($this) {
					var $r;
					var aNeg = 0 < 0;
					var bNeg = a < 0;
					$r = aNeg != bNeg?aNeg:0 > a;
					return $r;
				}($this));
				return $r;
			}(this))) throw new openfl.errors.Error("More usages removed than exist!");
		} else if((function($this) {
			var $r;
			var a1 = --$this._usedVectorCount[register.get_index()];
			$r = (function($this) {
				var $r;
				var aNeg1 = 0 < 0;
				var bNeg1 = a1 < 0;
				$r = aNeg1 != bNeg1?aNeg1:0 > a1;
				return $r;
			}($this));
			return $r;
		}(this))) throw new openfl.errors.Error("More usages removed than exist!");
	}
	,dispose: function() {
		this._vectorRegisters = null;
		this._registerComponents = null;
		this._usedSingleCount = null;
		this._usedVectorCount = null;
	}
	,hasRegisteredRegs: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(this.isRegisterUsed(i1)) return true;
		}
		return false;
	}
	,initRegisters: function(regName,regCount) {
		var hash = away3d.materials.compilation.RegisterPool._initPool(regName,regCount);
		this._vectorRegisters = away3d.materials.compilation.RegisterPool._regPool.get(hash);
		this._registerComponents = away3d.materials.compilation.RegisterPool._regCompsPool.get(hash);
		this._usedVectorCount = new Array();
		this._usedSingleCount = new Array();
		this._usedSingleCount[0] = new Array();
		this._usedSingleCount[1] = new Array();
		this._usedSingleCount[2] = new Array();
		this._usedSingleCount[3] = new Array();
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedVectorCount),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[0]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[1]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[2]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[3]),regCount,0);
	}
	,isRegisterUsed: function(index) {
		if((function($this) {
			var $r;
			var a = $this._usedVectorCount[index];
			var aNeg = a < 0;
			var bNeg = 0 < 0;
			$r = aNeg != bNeg?aNeg:a > 0;
			return $r;
		}(this))) return true;
		var i;
		var _g = 0;
		while(_g < 4) {
			var i1 = _g++;
			if((function($this) {
				var $r;
				var a1 = $this._usedSingleCount[i1][index];
				var aNeg1 = a1 < 0;
				var bNeg1 = 0 < 0;
				$r = aNeg1 != bNeg1?aNeg1:a1 > 0;
				return $r;
			}(this))) return true;
		}
		return false;
	}
	,__class__: away3d.materials.compilation.RegisterPool
};
away3d.materials.compilation.ShaderCompiler = function(profile) {
	this._preserveAlpha = true;
	this._commonsDataIndex = -1;
	this._uvBufferIndex = -1;
	this._uvTransformIndex = -1;
	this._secondaryUVBufferIndex = -1;
	this._normalBufferIndex = -1;
	this._tangentBufferIndex = -1;
	this._lightFragmentConstantIndex = -1;
	this._sceneMatrixIndex = -1;
	this._sceneNormalMatrixIndex = -1;
	this._cameraPositionIndex = -1;
	this._probeWeightsIndex = -1;
	this._sharedRegisters = new away3d.materials.compilation.ShaderRegisterData();
	this._dependencyCounter = new away3d.materials.compilation.MethodDependencyCounter();
	this._profile = profile;
	this.initRegisterCache(profile);
};
$hxClasses["away3d.materials.compilation.ShaderCompiler"] = away3d.materials.compilation.ShaderCompiler;
away3d.materials.compilation.ShaderCompiler.__name__ = ["away3d","materials","compilation","ShaderCompiler"];
away3d.materials.compilation.ShaderCompiler.prototype = {
	get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		this._enableLightFallOff = value;
		return value;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,get_UVTarget: function() {
		return this._UVTarget;
	}
	,get_UVSource: function() {
		return this._UVSource;
	}
	,get_forceSeperateMVP: function() {
		return this._forceSeperateMVP;
	}
	,set_forceSeperateMVP: function(value) {
		this._forceSeperateMVP = value;
		return value;
	}
	,initRegisterCache: function(profile) {
		this._registerCache = new away3d.materials.compilation.ShaderRegisterCache(profile);
		this._registerCache.set_vertexAttributesOffset(1);
		this._registerCache.reset();
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		this._animateUVs = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		return value;
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		this._preserveAlpha = value;
		return value;
	}
	,setTextureSampling: function(smooth,repeat,mipmap) {
		this._smooth = smooth;
		this._repeat = repeat;
		this._mipmap = mipmap;
	}
	,setConstantDataBuffers: function(vertexConstantData,fragmentConstantData) {
		this._vertexConstantData = vertexConstantData;
		this._fragmentConstantData = fragmentConstantData;
	}
	,get_methodSetup: function() {
		return this._methodSetup;
	}
	,set_methodSetup: function(value) {
		this._methodSetup = value;
		return value;
	}
	,compile: function() {
		this.initRegisterIndices();
		this.initLightData();
		this._animatableAttributes = ["va0"];
		this._animationTargetRegisters = ["vt0"];
		this._vertexCode = "";
		this._fragmentCode = "";
		this._sharedRegisters.localPosition = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.localPosition,1);
		this.createCommons();
		this.calculateDependencies();
		this.updateMethodRegisters();
		var i = 0;
		while(i < 4) {
			this._registerCache.getFreeVertexConstant();
			++i;
		}
		this.createNormalRegisters();
		if(this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP) this.compileGlobalPositionCode();
		this.compileProjectionCode();
		this.compileMethodsCode();
		this.compileFragmentOutput();
		this._fragmentPostLightCode = this.get_fragmentCode();
	}
	,createNormalRegisters: function() {
	}
	,compileMethodsCode: function() {
		if(this._dependencyCounter.get_uvDependencies() > 0) this.compileUVCode();
		if(this._dependencyCounter.get_secondaryUVDependencies() > 0) this.compileSecondaryUVCode();
		if(this._dependencyCounter.get_normalDependencies() > 0) this.compileNormalCode();
		if(this._dependencyCounter.get_viewDirDependencies() > 0) this.compileViewDirCode();
		this.compileLightingCode();
		this._fragmentLightCode = this._fragmentCode;
		this._fragmentCode = "";
		this.compileMethods();
	}
	,compileLightingCode: function() {
	}
	,compileViewDirCode: function() {
	}
	,compileNormalCode: function() {
	}
	,compileUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._uvBufferIndex = uvAttributeReg.get_index();
		var varying = this._registerCache.getFreeVarying();
		this._sharedRegisters.uvVarying = varying;
		if(this.get_animateUVs()) {
			var uvTransform1 = this._registerCache.getFreeVertexConstant();
			var uvTransform2 = this._registerCache.getFreeVertexConstant();
			this._uvTransformIndex = uvTransform1.get_index() * 4;
			this._vertexCode += "dp4 " + Std.string(varying) + ".x, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform1) + "\n" + "dp4 " + Std.string(varying) + ".y, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform2) + "\n" + "mov " + Std.string(varying) + ".zw, " + Std.string(uvAttributeReg) + ".zw \n";
		} else {
			this._uvTransformIndex = -1;
			this._needUVAnimation = true;
			this._UVTarget = varying.toString();
			this._UVSource = uvAttributeReg.toString();
		}
	}
	,compileSecondaryUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._secondaryUVBufferIndex = uvAttributeReg.get_index();
		this._sharedRegisters.secondaryUVVarying = this._registerCache.getFreeVarying();
		this._vertexCode += "mov " + Std.string(this._sharedRegisters.secondaryUVVarying) + ", " + Std.string(uvAttributeReg) + "\n";
	}
	,compileGlobalPositionCode: function() {
		this._sharedRegisters.globalPositionVertex = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.globalPositionVertex,this._dependencyCounter.get_globalPosDependencies());
		var positionMatrixReg = this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._sceneMatrixIndex = positionMatrixReg.get_index() * 4;
		this._vertexCode += "m44 " + Std.string(this._sharedRegisters.globalPositionVertex) + ", " + Std.string(this._sharedRegisters.localPosition) + ", " + Std.string(positionMatrixReg) + "\n";
		if(this._dependencyCounter.get_usesGlobalPosFragment()) {
			this._sharedRegisters.globalPositionVarying = this._registerCache.getFreeVarying();
			this._vertexCode += "mov " + Std.string(this._sharedRegisters.globalPositionVarying) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		}
	}
	,compileProjectionCode: function() {
		var pos;
		if(this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP) pos = this._sharedRegisters.globalPositionVertex.toString(); else pos = this._animationTargetRegisters[0];
		var code;
		if(this._dependencyCounter.get_projectionDependencies() > 0) {
			this._sharedRegisters.projectionFragment = this._registerCache.getFreeVarying();
			code = "m44 vt5, " + pos + ", vc0\t\t\n" + "mov " + Std.string(this._sharedRegisters.projectionFragment) + ", vt5\n" + "mov op, vt5\n";
		} else code = "m44 op, " + pos + ", vc0\t\t\n";
		this._vertexCode += code;
	}
	,compileFragmentOutput: function() {
		this._fragmentCode += "mov " + Std.string(this._registerCache.get_fragmentOutputRegister()) + ", " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		this._registerCache.removeFragmentTempUsage(this._sharedRegisters.shadedTarget);
	}
	,initRegisterIndices: function() {
		this._commonsDataIndex = -1;
		this._cameraPositionIndex = -1;
		this._uvBufferIndex = -1;
		this._uvTransformIndex = -1;
		this._secondaryUVBufferIndex = -1;
		this._normalBufferIndex = -1;
		this._tangentBufferIndex = -1;
		this._lightFragmentConstantIndex = -1;
		this._sceneMatrixIndex = -1;
		this._sceneNormalMatrixIndex = -1;
		this._probeWeightsIndex = -1;
	}
	,initLightData: function() {
		this._numLights = this._numPointLights + this._numDirectionalLights;
		this._numProbeRegisters = Math.ceil(this._numLightProbes / 4);
		if(this._methodSetup._specularMethod != null) this._combinedLightSources = this._specularLightSources | this._diffuseLightSources; else this._combinedLightSources = this._diffuseLightSources;
		this._usingSpecularMethod = js.Boot.__cast(this._methodSetup._specularMethod != null && (this.usesLightsForSpecular() || this.usesProbesForSpecular()) , Bool);
	}
	,createCommons: function() {
		this._sharedRegisters.commons = this._registerCache.getFreeFragmentConstant();
		this._commonsDataIndex = this._sharedRegisters.commons.get_index() * 4;
	}
	,calculateDependencies: function() {
		this._dependencyCounter.reset();
		var methods = this._methodSetup._methods;
		var len;
		this.setupAndCountMethodDependencies(this._methodSetup._diffuseMethod,this._methodSetup._diffuseMethodVO);
		if(this._methodSetup._shadowMethod != null) this.setupAndCountMethodDependencies(this._methodSetup._shadowMethod,this._methodSetup._shadowMethodVO);
		this.setupAndCountMethodDependencies(this._methodSetup._ambientMethod,this._methodSetup._ambientMethodVO);
		if(this._usingSpecularMethod) this.setupAndCountMethodDependencies(this._methodSetup._specularMethod,this._methodSetup._specularMethodVO);
		if(this._methodSetup._colorTransformMethod != null) this.setupAndCountMethodDependencies(this._methodSetup._colorTransformMethod,this._methodSetup._colorTransformMethodVO);
		len = methods.length;
		var i = 0;
		while(i < len) {
			this.setupAndCountMethodDependencies(methods[i].method,methods[i].data);
			++i;
		}
		if(this.get_usesNormals()) this.setupAndCountMethodDependencies(this._methodSetup._normalMethod,this._methodSetup._normalMethodVO);
		this._dependencyCounter.setPositionedLights(this._numPointLights,this._combinedLightSources);
	}
	,setupAndCountMethodDependencies: function(method,methodVO) {
		this.setupMethod(method,methodVO);
		this._dependencyCounter.includeMethodVO(methodVO);
	}
	,setupMethod: function(method,methodVO) {
		method.reset();
		methodVO.reset();
		methodVO.vertexData = this._vertexConstantData;
		methodVO.fragmentData = this._fragmentConstantData;
		methodVO.useSmoothTextures = this._smooth;
		methodVO.repeatTextures = this._repeat;
		methodVO.useMipmapping = this._mipmap;
		methodVO.useLightFallOff = this._enableLightFallOff && this._profile != "baselineConstrained";
		methodVO.numLights = this._numLights + this._numLightProbes;
		method.initVO(methodVO);
	}
	,get_commonsDataIndex: function() {
		return this._commonsDataIndex;
	}
	,updateMethodRegisters: function() {
		this._methodSetup._normalMethod.set_sharedRegisters(this._sharedRegisters);
		this._methodSetup._diffuseMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.set_sharedRegisters(this._sharedRegisters);
		this._methodSetup._ambientMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._specularMethod != null) this._methodSetup._specularMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.set_sharedRegisters(this._sharedRegisters);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		while(i < len) {
			methods[i].method.set_sharedRegisters(this._sharedRegisters);
			++i;
		}
	}
	,get_numUsedVertexConstants: function() {
		return this._registerCache.get_numUsedVertexConstants();
	}
	,get_numUsedFragmentConstants: function() {
		return this._registerCache.get_numUsedFragmentConstants();
	}
	,get_numUsedStreams: function() {
		return this._registerCache.get_numUsedStreams();
	}
	,get_numUsedTextures: function() {
		return this._registerCache.get_numUsedTextures();
	}
	,get_numUsedVaryings: function() {
		return this._registerCache.get_numUsedVaryings();
	}
	,usesLightsForSpecular: function() {
		return this._numLights > 0 && (this._specularLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,usesLightsForDiffuse: function() {
		return this._numLights > 0 && (this._diffuseLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,dispose: function() {
		this.cleanUpMethods();
		this._registerCache.dispose();
		this._registerCache = null;
		this._sharedRegisters = null;
	}
	,cleanUpMethods: function() {
		if(this._methodSetup._normalMethod != null) this._methodSetup._normalMethod.cleanCompilationData();
		if(this._methodSetup._diffuseMethod != null) this._methodSetup._diffuseMethod.cleanCompilationData();
		if(this._methodSetup._ambientMethod != null) this._methodSetup._ambientMethod.cleanCompilationData();
		if(this._methodSetup._specularMethod != null) this._methodSetup._specularMethod.cleanCompilationData();
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.cleanCompilationData();
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.cleanCompilationData();
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		while(i < len) {
			methods[i].method.cleanCompilationData();
			++i;
		}
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,usesProbesForSpecular: function() {
		return this._numLightProbes > 0 && (this._specularLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbesForDiffuse: function() {
		return this._numLightProbes > 0 && (this._diffuseLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbes: function() {
		return this._numLightProbes > 0 && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.PROBES) != 0;
	}
	,get_uvBufferIndex: function() {
		return this._uvBufferIndex;
	}
	,get_uvTransformIndex: function() {
		return this._uvTransformIndex;
	}
	,get_secondaryUVBufferIndex: function() {
		return this._secondaryUVBufferIndex;
	}
	,get_normalBufferIndex: function() {
		return this._normalBufferIndex;
	}
	,get_tangentBufferIndex: function() {
		return this._tangentBufferIndex;
	}
	,get_lightFragmentConstantIndex: function() {
		return this._lightFragmentConstantIndex;
	}
	,get_cameraPositionIndex: function() {
		return this._cameraPositionIndex;
	}
	,get_sceneMatrixIndex: function() {
		return this._sceneMatrixIndex;
	}
	,get_sceneNormalMatrixIndex: function() {
		return this._sceneNormalMatrixIndex;
	}
	,get_probeWeightsIndex: function() {
		return this._probeWeightsIndex;
	}
	,get_vertexCode: function() {
		return this._vertexCode;
	}
	,get_fragmentCode: function() {
		return this._fragmentCode;
	}
	,get_fragmentLightCode: function() {
		return this._fragmentLightCode;
	}
	,get_fragmentPostLightCode: function() {
		return this._fragmentPostLightCode;
	}
	,get_shadedTarget: function() {
		return this._sharedRegisters.shadedTarget.toString();
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,set_numPointLights: function(numPointLights) {
		this._numPointLights = numPointLights;
		return numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,set_numDirectionalLights: function(value) {
		this._numDirectionalLights = value;
		return value;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,set_numLightProbes: function(value) {
		this._numLightProbes = value;
		return value;
	}
	,get_usingSpecularMethod: function() {
		return this._usingSpecularMethod;
	}
	,get_animatableAttributes: function() {
		return this._animatableAttributes;
	}
	,get_animationTargetRegisters: function() {
		return this._animationTargetRegisters;
	}
	,get_usesNormals: function() {
		return this._dependencyCounter.get_normalDependencies() > 0 && this._methodSetup._normalMethod.get_hasOutput();
	}
	,usesLights: function() {
		return this._numLights > 0 && (this._combinedLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,compileMethods: function() {
		var methods = this._methodSetup._methods;
		var numMethods = methods.length;
		var method;
		var data;
		var alphaReg = null;
		if(this._preserveAlpha) {
			alphaReg = this._registerCache.getFreeFragmentSingleTemp();
			this._registerCache.addFragmentTempUsages(alphaReg,1);
			this._fragmentCode += "mov " + Std.string(alphaReg) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n";
		}
		var i = 0;
		while(i < numMethods) {
			method = methods[i].method;
			data = methods[i].data;
			this._vertexCode += method.getVertexCode(data,this._registerCache);
			if(data.needsGlobalVertexPos || data.needsGlobalFragmentPos) this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
			this._fragmentCode += method.getFragmentCode(data,this._registerCache,this._sharedRegisters.shadedTarget);
			if(data.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			if(data.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
			++i;
		}
		if(this._preserveAlpha) {
			this._fragmentCode += "mov " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(alphaReg) + "\n";
			this._registerCache.removeFragmentTempUsage(alphaReg);
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this._vertexCode += this._methodSetup._colorTransformMethod.getVertexCode(this._methodSetup._colorTransformMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._colorTransformMethod.getFragmentCode(this._methodSetup._colorTransformMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		}
	}
	,get_lightProbeDiffuseIndices: function() {
		return this._lightProbeDiffuseIndices;
	}
	,get_lightProbeSpecularIndices: function() {
		return this._lightProbeSpecularIndices;
	}
	,__class__: away3d.materials.compilation.ShaderCompiler
	,__properties__: {get_lightProbeSpecularIndices:"get_lightProbeSpecularIndices",get_lightProbeDiffuseIndices:"get_lightProbeDiffuseIndices",get_usesNormals:"get_usesNormals",get_animationTargetRegisters:"get_animationTargetRegisters",get_animatableAttributes:"get_animatableAttributes",get_usingSpecularMethod:"get_usingSpecularMethod",set_numLightProbes:"set_numLightProbes",get_numLightProbes:"get_numLightProbes",set_numDirectionalLights:"set_numDirectionalLights",get_numDirectionalLights:"get_numDirectionalLights",set_numPointLights:"set_numPointLights",get_numPointLights:"get_numPointLights",get_shadedTarget:"get_shadedTarget",get_fragmentPostLightCode:"get_fragmentPostLightCode",get_fragmentLightCode:"get_fragmentLightCode",get_fragmentCode:"get_fragmentCode",get_vertexCode:"get_vertexCode",get_probeWeightsIndex:"get_probeWeightsIndex",get_sceneNormalMatrixIndex:"get_sceneNormalMatrixIndex",get_sceneMatrixIndex:"get_sceneMatrixIndex",get_cameraPositionIndex:"get_cameraPositionIndex",get_lightFragmentConstantIndex:"get_lightFragmentConstantIndex",get_tangentBufferIndex:"get_tangentBufferIndex",get_normalBufferIndex:"get_normalBufferIndex",get_secondaryUVBufferIndex:"get_secondaryUVBufferIndex",get_uvTransformIndex:"get_uvTransformIndex",get_uvBufferIndex:"get_uvBufferIndex",set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",get_numUsedVaryings:"get_numUsedVaryings",get_numUsedTextures:"get_numUsedTextures",get_numUsedStreams:"get_numUsedStreams",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_commonsDataIndex:"get_commonsDataIndex",set_methodSetup:"set_methodSetup",get_methodSetup:"get_methodSetup",set_preserveAlpha:"set_preserveAlpha",get_preserveAlpha:"get_preserveAlpha",set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs",set_forceSeperateMVP:"set_forceSeperateMVP",get_forceSeperateMVP:"get_forceSeperateMVP",get_UVSource:"get_UVSource",get_UVTarget:"get_UVTarget",get_needUVAnimation:"get_needUVAnimation",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"}
};
away3d.materials.compilation.ShaderRegisterData = function() {
};
$hxClasses["away3d.materials.compilation.ShaderRegisterData"] = away3d.materials.compilation.ShaderRegisterData;
away3d.materials.compilation.ShaderRegisterData.__name__ = ["away3d","materials","compilation","ShaderRegisterData"];
away3d.materials.compilation.ShaderRegisterData.prototype = {
	__class__: away3d.materials.compilation.ShaderRegisterData
};
away3d.materials.compilation.ShaderRegisterElement = function(regName,index,component) {
	if(component == null) component = -1;
	this._component = component;
	this._regName = regName;
	this._index = index;
	this._toStr = this._regName;
	if(this._index >= 0) this._toStr += this._index;
	if(component > -1) this._toStr += "." + away3d.materials.compilation.ShaderRegisterElement.COMPONENTS[component];
};
$hxClasses["away3d.materials.compilation.ShaderRegisterElement"] = away3d.materials.compilation.ShaderRegisterElement;
away3d.materials.compilation.ShaderRegisterElement.__name__ = ["away3d","materials","compilation","ShaderRegisterElement"];
away3d.materials.compilation.ShaderRegisterElement.prototype = {
	toString: function() {
		return this._toStr;
	}
	,get_regName: function() {
		return this._regName;
	}
	,get_index: function() {
		return this._index;
	}
	,__class__: away3d.materials.compilation.ShaderRegisterElement
	,__properties__: {get_index:"get_index",get_regName:"get_regName"}
};
away3d.materials.compilation.SuperShaderCompiler = function(profile) {
	away3d.materials.compilation.ShaderCompiler.call(this,profile);
};
$hxClasses["away3d.materials.compilation.SuperShaderCompiler"] = away3d.materials.compilation.SuperShaderCompiler;
away3d.materials.compilation.SuperShaderCompiler.__name__ = ["away3d","materials","compilation","SuperShaderCompiler"];
away3d.materials.compilation.SuperShaderCompiler.__super__ = away3d.materials.compilation.ShaderCompiler;
away3d.materials.compilation.SuperShaderCompiler.prototype = $extend(away3d.materials.compilation.ShaderCompiler.prototype,{
	initLightData: function() {
		away3d.materials.compilation.ShaderCompiler.prototype.initLightData.call(this);
		this._pointLightRegisters = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._numPointLights * 3);
		this._dirLightRegisters = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._numDirectionalLights * 3);
	}
	,calculateDependencies: function() {
		away3d.materials.compilation.ShaderCompiler.prototype.calculateDependencies.call(this);
		this._dependencyCounter.addWorldSpaceDependencies(true);
	}
	,compileNormalCode: function() {
		var normalMatrix = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),3);
		this._sharedRegisters.normalFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.normalFragment,this._dependencyCounter.get_normalDependencies());
		if(this._methodSetup._normalMethod.get_hasOutput() && !this._methodSetup._normalMethod.get_tangentSpace()) {
			this._vertexCode += this._methodSetup._normalMethod.getVertexCode(this._methodSetup._normalMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,this._sharedRegisters.normalFragment);
			return;
		}
		this._sharedRegisters.normalVarying = this._registerCache.getFreeVarying();
		normalMatrix[0] = this._registerCache.getFreeVertexConstant();
		normalMatrix[1] = this._registerCache.getFreeVertexConstant();
		normalMatrix[2] = this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._sceneNormalMatrixIndex = normalMatrix[0].get_index() * 4;
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this.compileTangentVertexCode(normalMatrix);
			this.compileTangentNormalMapFragmentCode();
		} else {
			this._vertexCode += "m33 " + Std.string(this._sharedRegisters.normalVarying) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(normalMatrix[0]) + "\n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.animatedNormal) + ".w\t\n";
			this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w, " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\n";
			if(this._dependencyCounter.get_tangentDependencies() > 0) {
				this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
				this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
				this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
				this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ", " + Std.string(this._sharedRegisters.tangentInput) + "\n";
			}
		}
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedNormal);
	}
	,createNormalRegisters: function() {
		if(this._dependencyCounter.get_normalDependencies() > 0) {
			this._sharedRegisters.normalInput = this._registerCache.getFreeVertexAttribute();
			this._normalBufferIndex = this._sharedRegisters.normalInput.get_index();
			this._sharedRegisters.animatedNormal = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedNormal,1);
			this._animatableAttributes.push(this._sharedRegisters.normalInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedNormal.toString());
		}
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
			this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
			this._sharedRegisters.animatedTangent = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedTangent,1);
			this._animatableAttributes.push(this._sharedRegisters.tangentInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedTangent.toString());
		}
	}
	,compileTangentVertexCode: function(matrix) {
		this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.bitangentVarying = this._registerCache.getFreeVarying();
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(matrix[0]) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + "\n";
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + ", " + Std.string(matrix[0]) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + "\n";
		var bitanTemp = this._registerCache.getFreeVertexVectorTemp();
		this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "crs " + Std.string(bitanTemp) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(this._sharedRegisters.animatedTangent) + "\n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".y, " + Std.string(bitanTemp) + ".x    \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".y, " + Std.string(bitanTemp) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".y, " + Std.string(bitanTemp) + ".z    \n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedTangent);
	}
	,compileTangentNormalMapFragmentCode: function() {
		var t;
		var b;
		var n;
		t = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(t,1);
		b = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(b,1);
		n = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(n,1);
		this._fragmentCode += "nrm " + Std.string(t) + ".xyz, " + Std.string(this._sharedRegisters.tangentVarying) + "\n" + "mov " + Std.string(t) + ".w, " + Std.string(this._sharedRegisters.tangentVarying) + ".w\t\n" + "nrm " + Std.string(b) + ".xyz, " + Std.string(this._sharedRegisters.bitangentVarying) + "\n" + "nrm " + Std.string(n) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n";
		var temp = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(temp,1);
		this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,temp) + "m33 " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(temp) + ", " + Std.string(t) + "\t\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w,   " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\t\n";
		this._registerCache.removeFragmentTempUsage(temp);
		if(this._methodSetup._normalMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._methodSetup._normalMethodVO.needsGlobalVertexPos || this._methodSetup._normalMethodVO.needsGlobalFragmentPos) this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
		this._registerCache.removeFragmentTempUsage(b);
		this._registerCache.removeFragmentTempUsage(t);
		this._registerCache.removeFragmentTempUsage(n);
	}
	,compileViewDirCode: function() {
		var cameraPositionReg = this._registerCache.getFreeVertexConstant();
		this._sharedRegisters.viewDirVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.viewDirFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.viewDirFragment,this._dependencyCounter.get_viewDirDependencies());
		this._cameraPositionIndex = cameraPositionReg.get_index() * 4;
		this._vertexCode += "sub " + Std.string(this._sharedRegisters.viewDirVarying) + ", " + Std.string(cameraPositionReg) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.viewDirFragment) + ".xyz, " + Std.string(this._sharedRegisters.viewDirVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.viewDirFragment) + ".w,   " + Std.string(this._sharedRegisters.viewDirVarying) + ".w \t\t\n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
	}
	,compileLightingCode: function() {
		var shadowReg = null;
		this._sharedRegisters.shadedTarget = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.shadedTarget,1);
		this._vertexCode += this._methodSetup._diffuseMethod.getVertexCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPreLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		if(this._usingSpecularMethod) {
			this._vertexCode += this._methodSetup._specularMethod.getVertexCode(this._methodSetup._specularMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPreLightingCode(this._methodSetup._specularMethodVO,this._registerCache);
		}
		if(this.usesLights()) {
			this.initLightRegisters();
			this.compileDirectionalLightCode();
			this.compilePointLightCode();
		}
		if(this.usesProbes()) this.compileLightProbeCode();
		this._vertexCode += this._methodSetup._ambientMethod.getVertexCode(this._methodSetup._ambientMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._ambientMethod.getFragmentCode(this._methodSetup._ambientMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._methodSetup._ambientMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		if(this._methodSetup._ambientMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._methodSetup._shadowMethod != null) {
			this._vertexCode += this._methodSetup._shadowMethod.getVertexCode(this._methodSetup._shadowMethodVO,this._registerCache);
			if(this._dependencyCounter.get_normalDependencies() == 0) {
				shadowReg = this._registerCache.getFreeFragmentVectorTemp();
				this._registerCache.addFragmentTempUsages(shadowReg,1);
			} else shadowReg = this._sharedRegisters.normalFragment;
			this._methodSetup._diffuseMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._shadowMethod.getFragmentCode(this._methodSetup._shadowMethodVO,this._registerCache,shadowReg);
		}
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPostLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._alphaPremultiplied) this._fragmentCode += "add " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "div " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n" + "sub " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "sat " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		if(this._methodSetup._diffuseMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		if(this._methodSetup._diffuseMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPostLightingCode(this._methodSetup._specularMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
			if(this._methodSetup._specularMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			if(this._methodSetup._specularMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		}
	}
	,initLightRegisters: function() {
		var i = 0;
		var len;
		len = this._dirLightRegisters.length;
		i = 0;
		while(i < len) {
			this._dirLightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = this._dirLightRegisters[i].get_index() * 4;
			++i;
		}
		len = this._pointLightRegisters.length;
		i = 0;
		while(i < len) {
			this._pointLightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = this._pointLightRegisters[i].get_index() * 4;
			++i;
		}
	}
	,compileDirectionalLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) return;
		var i = 0;
		while(i < this._numDirectionalLights) {
			lightDirReg = this._dirLightRegisters[regIndex++];
			diffuseColorReg = this._dirLightRegisters[regIndex++];
			specularColorReg = this._dirLightRegisters[regIndex++];
			if(addDiff) this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			if(addSpec) this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			++i;
		}
	}
	,compilePointLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightPosReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) return;
		var i = 0;
		while(i < this._numPointLights) {
			lightPosReg = this._pointLightRegisters[regIndex++];
			diffuseColorReg = this._pointLightRegisters[regIndex++];
			specularColorReg = this._pointLightRegisters[regIndex++];
			lightDirReg = this._registerCache.getFreeFragmentVectorTemp();
			this._registerCache.addFragmentTempUsages(lightDirReg,1);
			this._fragmentCode += "sub " + Std.string(lightDirReg) + ", " + Std.string(lightPosReg) + ", " + Std.string(this._sharedRegisters.globalPositionVarying) + "\n" + "dp3 " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ", " + Std.string(lightDirReg) + "\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(diffuseColorReg) + ".w\n" + "mul " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(specularColorReg) + ".w\n" + "sat " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightPosReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "nrm " + Std.string(lightDirReg) + ".xyz, " + Std.string(lightDirReg) + "\n";
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = lightPosReg.get_index() * 4;
			if(addDiff) this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			if(addSpec) this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			this._registerCache.removeFragmentTempUsage(lightDirReg);
			++i;
		}
	}
	,compileLightProbeCode: function() {
		var weightReg;
		var weightComponents = [".x",".y",".z",".w"];
		var weightRegisters = new Array();
		var i = 0;
		var texReg;
		var addSpec = this._usingSpecularMethod && this.usesProbesForSpecular();
		var addDiff = this.usesProbesForDiffuse();
		if(!(addSpec || addDiff)) return;
		if(addDiff) this._lightProbeDiffuseIndices = new Array();
		if(addSpec) this._lightProbeSpecularIndices = new Array();
		i = 0;
		while(i < this._numProbeRegisters) {
			weightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(i == 0) this._probeWeightsIndex = weightRegisters[i].get_index() * 4;
			++i;
		}
		i = 0;
		while(i < this._numLightProbes) {
			weightReg = weightRegisters[Math.floor(i / 4)].toString() + weightComponents[i % 4];
			if(addDiff) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeDiffuseIndices[i] = texReg.get_index();
				this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerProbe(this._methodSetup._diffuseMethodVO,texReg,weightReg,this._registerCache);
			}
			if(addSpec) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeSpecularIndices[i] = texReg.get_index();
				this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerProbe(this._methodSetup._specularMethodVO,texReg,weightReg,this._registerCache);
			}
			++i;
		}
	}
	,__class__: away3d.materials.compilation.SuperShaderCompiler
});
away3d.materials.lightpickers = {};
away3d.materials.lightpickers.LightPickerBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.lightpickers.LightPickerBase"] = away3d.materials.lightpickers.LightPickerBase;
away3d.materials.lightpickers.LightPickerBase.__name__ = ["away3d","materials","lightpickers","LightPickerBase"];
away3d.materials.lightpickers.LightPickerBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.lightpickers.LightPickerBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.lightpickers.LightPickerBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	dispose: function() {
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.LIGHT_PICKER;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numCastingDirectionalLights: function() {
		return this._numCastingDirectionalLights;
	}
	,get_numCastingPointLights: function() {
		return this._numCastingPointLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_castingPointLights: function() {
		return this._castingPointLights;
	}
	,get_castingDirectionalLights: function() {
		return this._castingDirectionalLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,get_lightProbeWeights: function() {
		return this._lightProbeWeights;
	}
	,get_allPickedLights: function() {
		return this._allPickedLights;
	}
	,collectLights: function(renderable,entityCollector) {
		this.updateProbeWeights(renderable);
	}
	,updateProbeWeights: function(renderable) {
		var objectPos = renderable.get_sourceEntity().get_scenePosition();
		var lightPos;
		var rx = objectPos.x;
		var ry = objectPos.y;
		var rz = objectPos.z;
		var dx;
		var dy;
		var dz;
		var w;
		var total = 0;
		var i;
		i = 0;
		while(i < this._numLightProbes) {
			lightPos = this._lightProbes[i].get_scenePosition();
			dx = rx - lightPos.x;
			dy = ry - lightPos.y;
			dz = rz - lightPos.z;
			w = dx * dx + dy * dy + dz * dz;
			if(w > .00001) w = 1 / w; else w = 50000000;
			this._lightProbeWeights[i] = w;
			total += w;
			++i;
		}
		total = 1 / total;
		i = 0;
		while(i < this._numLightProbes) {
			this._lightProbeWeights[i] *= total;
			++i;
		}
	}
	,__class__: away3d.materials.lightpickers.LightPickerBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_allPickedLights:"get_allPickedLights",get_lightProbeWeights:"get_lightProbeWeights",get_lightProbes:"get_lightProbes",get_castingDirectionalLights:"get_castingDirectionalLights",get_castingPointLights:"get_castingPointLights",get_directionalLights:"get_directionalLights",get_pointLights:"get_pointLights",get_numLightProbes:"get_numLightProbes",get_numCastingPointLights:"get_numCastingPointLights",get_numCastingDirectionalLights:"get_numCastingDirectionalLights",get_numPointLights:"get_numPointLights",get_numDirectionalLights:"get_numDirectionalLights",get_assetType:"get_assetType"})
});
away3d.materials.lightpickers.StaticLightPicker = function(lights) {
	this.set_lights(lights);
	away3d.materials.lightpickers.LightPickerBase.call(this);
};
$hxClasses["away3d.materials.lightpickers.StaticLightPicker"] = away3d.materials.lightpickers.StaticLightPicker;
away3d.materials.lightpickers.StaticLightPicker.__name__ = ["away3d","materials","lightpickers","StaticLightPicker"];
away3d.materials.lightpickers.StaticLightPicker.__super__ = away3d.materials.lightpickers.LightPickerBase;
away3d.materials.lightpickers.StaticLightPicker.prototype = $extend(away3d.materials.lightpickers.LightPickerBase.prototype,{
	get_lights: function() {
		return this._lights;
	}
	,set_lights: function(value) {
		var numPointLights = 0;
		var numDirectionalLights = 0;
		var numCastingPointLights = 0;
		var numCastingDirectionalLights = 0;
		var numLightProbes = 0;
		var light;
		if(this._lights != null) this.clearListeners();
		this._lights = value;
		this._allPickedLights = value;
		this._pointLights = new Array();
		this._castingPointLights = new Array();
		this._directionalLights = new Array();
		this._castingDirectionalLights = new Array();
		this._lightProbes = new Array();
		var len = value.length;
		var i = 0;
		while(i < len) {
			light = value[i];
			light.addEventListener(away3d.events.LightEvent.CASTS_SHADOW_CHANGE,$bind(this,this.onCastShadowChange));
			if(js.Boot.__instanceof(light,away3d.lights.PointLight)) {
				if(light.get_castsShadows()) this._castingPointLights[numCastingPointLights++] = js.Boot.__cast(light , away3d.lights.PointLight); else this._pointLights[numPointLights++] = js.Boot.__cast(light , away3d.lights.PointLight);
			} else if(js.Boot.__instanceof(light,away3d.lights.DirectionalLight)) {
				if(light.get_castsShadows()) this._castingDirectionalLights[numCastingDirectionalLights++] = js.Boot.__cast(light , away3d.lights.DirectionalLight); else this._directionalLights[numDirectionalLights++] = js.Boot.__cast(light , away3d.lights.DirectionalLight);
			} else if(js.Boot.__instanceof(light,away3d.lights.LightProbe)) this._lightProbes[numLightProbes++] = js.Boot.__cast(light , away3d.lights.LightProbe);
			++i;
		}
		if(this._numDirectionalLights == numDirectionalLights && this._numPointLights == numPointLights && this._numLightProbes == numLightProbes && this._numCastingPointLights == numCastingPointLights && this._numCastingDirectionalLights == numCastingDirectionalLights) return value;
		this._numDirectionalLights = numDirectionalLights;
		this._numCastingDirectionalLights = numCastingDirectionalLights;
		this._numPointLights = numPointLights;
		this._numCastingPointLights = numCastingPointLights;
		this._numLightProbes = numLightProbes;
		this._lightProbeWeights = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),Math.ceil(numLightProbes / 4) * 4,0);
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		return value;
	}
	,clearListeners: function() {
		var len = this._lights.length;
		var i = 0;
		while(i < len) {
			this._lights[i].removeEventListener(away3d.events.LightEvent.CASTS_SHADOW_CHANGE,$bind(this,this.onCastShadowChange));
			++i;
		}
	}
	,onCastShadowChange: function(event) {
		var light;
		light = js.Boot.__cast(event.target , away3d.lights.LightBase);
		if(js.Boot.__instanceof(light,away3d.lights.PointLight)) this.updatePointCasting(js.Boot.__cast(light , away3d.lights.PointLight)); else if(js.Boot.__instanceof(light,away3d.lights.DirectionalLight)) this.updateDirectionalCasting(js.Boot.__cast(light , away3d.lights.DirectionalLight));
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
	,updateDirectionalCasting: function(light) {
		if(light.get_castsShadows()) {
			--this._numDirectionalLights;
			++this._numCastingDirectionalLights;
			this._directionalLights.splice((function($this) {
				var $r;
				var x;
				x = js.Boot.__cast(light , away3d.lights.DirectionalLight);
				$r = HxOverrides.indexOf($this._directionalLights,x,0);
				return $r;
			}(this)),1);
			this._castingDirectionalLights.push(light);
		} else {
			++this._numDirectionalLights;
			--this._numCastingDirectionalLights;
			this._castingDirectionalLights.splice((function($this) {
				var $r;
				var x1;
				x1 = js.Boot.__cast(light , away3d.lights.DirectionalLight);
				$r = HxOverrides.indexOf($this._castingDirectionalLights,x1,0);
				return $r;
			}(this)),1);
			this._directionalLights.push(light);
		}
	}
	,updatePointCasting: function(light) {
		if(light.get_castsShadows()) {
			--this._numPointLights;
			++this._numCastingPointLights;
			this._pointLights.splice((function($this) {
				var $r;
				var x;
				x = js.Boot.__cast(light , away3d.lights.PointLight);
				$r = HxOverrides.indexOf($this._pointLights,x,0);
				return $r;
			}(this)),1);
			this._castingPointLights.push(light);
		} else {
			++this._numPointLights;
			--this._numCastingPointLights;
			this._castingPointLights.splice((function($this) {
				var $r;
				var x1;
				x1 = js.Boot.__cast(light , away3d.lights.PointLight);
				$r = HxOverrides.indexOf($this._castingPointLights,x1,0);
				return $r;
			}(this)),1);
			this._pointLights.push(light);
		}
	}
	,__class__: away3d.materials.lightpickers.StaticLightPicker
	,__properties__: $extend(away3d.materials.lightpickers.LightPickerBase.prototype.__properties__,{set_lights:"set_lights",get_lights:"get_lights"})
});
away3d.materials.methods = {};
away3d.materials.methods.ShadingMethodBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.methods.ShadingMethodBase"] = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.ShadingMethodBase.__name__ = ["away3d","materials","methods","ShadingMethodBase"];
away3d.materials.methods.ShadingMethodBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.methods.ShadingMethodBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	initVO: function(vo) {
	}
	,initConstants: function(vo) {
	}
	,get_sharedRegisters: function() {
		return this._sharedRegisters;
	}
	,set_sharedRegisters: function(value) {
		this._sharedRegisters = value;
		return value;
	}
	,get_passes: function() {
		return this._passes;
	}
	,dispose: function() {
	}
	,createMethodVO: function() {
		return new away3d.materials.methods.MethodVO();
	}
	,reset: function() {
		this.cleanCompilationData();
	}
	,cleanCompilationData: function() {
	}
	,getVertexCode: function(vo,regCache) {
		return "";
	}
	,activate: function(vo,stage3DProxy) {
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
	}
	,deactivate: function(vo,stage3DProxy) {
	}
	,getTex2DSampleCode: function(vo,targetReg,inputReg,texture,uvReg,forceWrap) {
		var wrap;
		if(vo.repeatTextures) wrap = "wrap"; else wrap = "clamp";
		if(forceWrap != null) wrap = forceWrap;
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) if(enableMipMaps) filter = "linear,miplinear"; else filter = "linear"; else if(enableMipMaps) filter = "nearest,mipnearest"; else filter = "nearest";
		if(uvReg == null) uvReg = this._sharedRegisters.uvVarying;
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <2d," + filter + "," + format + wrap + ">\n";
	}
	,getTexCubeSampleCode: function(vo,targetReg,inputReg,texture,uvReg) {
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) if(enableMipMaps) filter = "linear,miplinear"; else filter = "linear"; else if(enableMipMaps) filter = "nearest,mipnearest"; else filter = "nearest";
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <cube," + format + filter + ">\n";
	}
	,getFormatStringForTexture: function(texture) {
		var _sw0_ = texture.get_format();
		switch(_sw0_[1]) {
		case 1:
			return "dxt1,";
		case 2:
			return "dxt5,";
		default:
			return "";
		}
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d.events.ShadingMethodEvent(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED));
	}
	,copyFrom: function(method) {
	}
	,__class__: away3d.materials.methods.ShadingMethodBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_passes:"get_passes",set_sharedRegisters:"set_sharedRegisters",get_sharedRegisters:"get_sharedRegisters"})
});
away3d.materials.methods.BasicAmbientMethod = function() {
	this._ambientColor = 16777215;
	this._ambientR = 0;
	this._ambientG = 0;
	this._ambientB = 0;
	this._ambient = 1;
	this._lightAmbientR = 0;
	this._lightAmbientG = 0;
	this._lightAmbientB = 0;
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicAmbientMethod"] = away3d.materials.methods.BasicAmbientMethod;
away3d.materials.methods.BasicAmbientMethod.__name__ = ["away3d","materials","methods","BasicAmbientMethod"];
away3d.materials.methods.BasicAmbientMethod.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.BasicAmbientMethod.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	initVO: function(vo) {
		vo.needsUV = this._useTexture;
	}
	,initConstants: function(vo) {
		var this1 = vo.fragmentData;
		var key = vo.fragmentConstantsIndex + 3;
		if(key >= this1.length && !this1.fixed) this1.length = key + 1;
		this1.data[key] = 1;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		this._ambient = value;
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value , Bool);
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var diff;
		diff = js.Boot.__cast(method , away3d.materials.methods.BasicAmbientMethod);
		this.set_ambient(diff.get_ambient());
		this.set_ambientColor(diff.get_ambientColor());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._ambientInputRegister = null;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		if(this._useTexture) {
			this._ambientInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._ambientInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,targetReg,this._ambientInputRegister,this._texture) + "div " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".w\n";
		} else {
			this._ambientInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._ambientInputRegister.get_index() * 4;
			code += "mov " + Std.string(targetReg) + ", " + Std.string(this._ambientInputRegister) + "\n";
		}
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,vo.useSmoothTextures?openfl.display3D.Context3DTextureFilter.LINEAR:openfl.display3D.Context3DTextureFilter.NEAREST,vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient * this._lightAmbientR;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient * this._lightAmbientG;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient * this._lightAmbientB;
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
		this.updateAmbient();
		if(!this._useTexture) {
			var index = vo.fragmentConstantsIndex;
			var data = vo.fragmentData;
			if(index >= data.length && !data.fixed) data.length = index + 1;
			data.data[index] = this._ambientR;
			var key = index + 1;
			if(key >= data.length && !data.fixed) data.length = key + 1;
			data.data[key] = this._ambientG;
			var key1 = index + 2;
			if(key1 >= data.length && !data.fixed) data.length = key1 + 1;
			data.data[key1] = this._ambientB;
		}
	}
	,__class__: away3d.materials.methods.BasicAmbientMethod
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_texture:"set_texture",get_texture:"get_texture",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_ambient:"set_ambient",get_ambient:"get_ambient"})
});
away3d.materials.methods.LightingMethodBase = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.LightingMethodBase"] = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.LightingMethodBase.__name__ = ["away3d","materials","methods","LightingMethodBase"];
away3d.materials.methods.LightingMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.LightingMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	getFragmentPreLightingCode: function(vo,regCache) {
		return "";
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		return "";
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		return "";
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		return "";
	}
	,__class__: away3d.materials.methods.LightingMethodBase
});
away3d.materials.methods.BasicDiffuseMethod = function() {
	this._diffuseColor = 16777215;
	this._diffuseR = 1;
	this._diffuseG = 1;
	this._diffuseB = 1;
	this._diffuseA = 1;
	this._alphaThreshold = 0;
	away3d.materials.methods.LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicDiffuseMethod"] = away3d.materials.methods.BasicDiffuseMethod;
away3d.materials.methods.BasicDiffuseMethod.__name__ = ["away3d","materials","methods","BasicDiffuseMethod"];
away3d.materials.methods.BasicDiffuseMethod.__super__ = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.BasicDiffuseMethod.prototype = $extend(away3d.materials.methods.LightingMethodBase.prototype,{
	get_useAmbientTexture: function() {
		return this._useAmbientTexture;
	}
	,set_useAmbientTexture: function(value) {
		if(this._useAmbientTexture == value) return value;
		this._useAmbientTexture = value;
		this.invalidateShaderProgram();
		return value;
	}
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
	}
	,generateMip: function(stage3DProxy) {
		if(this._useTexture) this._texture.getTextureForStage3D(stage3DProxy);
	}
	,get_diffuseAlpha: function() {
		return this._diffuseA;
	}
	,set_diffuseAlpha: function(value) {
		this._diffuseA = value;
		return value;
	}
	,get_diffuseColor: function() {
		return this._diffuseColor;
	}
	,set_diffuseColor: function(diffuseColor) {
		this._diffuseColor = diffuseColor;
		this.updateDiffuse();
		return diffuseColor;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		return value;
	}
	,dispose: function() {
		this._texture = null;
	}
	,copyFrom: function(method) {
		var diff;
		diff = js.Boot.__cast(method , away3d.materials.methods.BasicDiffuseMethod);
		this.set_alphaThreshold(diff.get_alphaThreshold());
		this.set_texture(diff.get_texture());
		this.set_useAmbientTexture(diff.get_useAmbientTexture());
		this.set_diffuseAlpha(diff.get_diffuseAlpha());
		this.set_diffuseColor(diff.get_diffuseColor());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._diffuseInputRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "dp3 " + Std.string(t) + ".x, " + Std.string(lightDirReg) + ", " + Std.string(this._sharedRegisters.normalFragment) + "\n" + "max " + Std.string(t) + ".w, " + Std.string(t) + ".x, " + Std.string(this._sharedRegisters.commons) + ".y\n";
		if(vo.useLightFallOff) code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		code += "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(lightColReg) + "\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "tex " + Std.string(t) + ", " + Std.string(this._sharedRegisters.normalFragment) + ", " + Std.string(cubeMapReg) + " <cube,linear,miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ".xyz, " + weightRegister + "\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		var albedo;
		var cutOffReg;
		if(vo.numLights > 0) {
			if(this._shadowRegister != null) code += this.applyShadow(vo,regCache);
			albedo = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(albedo,1);
		} else albedo = targetReg;
		if(this._useTexture) {
			this._diffuseInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._diffuseInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,albedo,this._diffuseInputRegister,this._texture);
			if(this._alphaThreshold > 0) {
				cutOffReg = regCache.getFreeFragmentConstant();
				vo.fragmentConstantsIndex = cutOffReg.get_index() * 4;
				code += "sub " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n" + "kil " + Std.string(albedo) + ".w\n" + "add " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n";
			}
		} else {
			this._diffuseInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._diffuseInputRegister.get_index() * 4;
			code += "mov " + Std.string(albedo) + ", " + Std.string(this._diffuseInputRegister) + "\n";
		}
		if(vo.numLights == 0) return code;
		code += "sat " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		if(this._useAmbientTexture) code += "mul " + Std.string(albedo) + ".xyz, " + Std.string(albedo) + ", " + Std.string(this._totalLightColorReg) + "\n" + "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n"; else {
			code += "add " + Std.string(targetReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(targetReg) + "\n";
			if(this._useTexture) code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(albedo) + ".w\n"; else code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(this._diffuseInputRegister) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(this._diffuseInputRegister) + ".w\n";
		}
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		regCache.removeFragmentTempUsage(albedo);
		return code;
	}
	,applyShadow: function(vo,regCache) {
		return "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
			if(this._alphaThreshold > 0) {
				var this1 = vo.fragmentData;
				var key = vo.fragmentConstantsIndex;
				if(key >= this1.length && !this1.fixed) this1.length = key + 1;
				this1.data[key] = this._alphaThreshold;
			}
		} else {
			var index = vo.fragmentConstantsIndex;
			var data = vo.fragmentData;
			if(index >= data.length && !data.fixed) data.length = index + 1;
			data.data[index] = this._diffuseR;
			var key1 = index + 1;
			if(key1 >= data.length && !data.fixed) data.length = key1 + 1;
			data.data[key1] = this._diffuseG;
			var key2 = index + 2;
			if(key2 >= data.length && !data.fixed) data.length = key2 + 1;
			data.data[key2] = this._diffuseB;
			var key3 = index + 3;
			if(key3 >= data.length && !data.fixed) data.length = key3 + 1;
			data.data[key3] = this._diffuseA;
		}
	}
	,updateDiffuse: function() {
		this._diffuseR = (this._diffuseColor >> 16 & 255) / 255;
		this._diffuseG = (this._diffuseColor >> 8 & 255) / 255;
		this._diffuseB = (this._diffuseColor & 255) / 255;
	}
	,set_shadowRegister: function(value) {
		this._shadowRegister = value;
		return value;
	}
	,__class__: away3d.materials.methods.BasicDiffuseMethod
	,__properties__: $extend(away3d.materials.methods.LightingMethodBase.prototype.__properties__,{set_shadowRegister:"set_shadowRegister",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold",set_texture:"set_texture",get_texture:"get_texture",set_diffuseColor:"set_diffuseColor",get_diffuseColor:"get_diffuseColor",set_diffuseAlpha:"set_diffuseAlpha",get_diffuseAlpha:"get_diffuseAlpha",set_useAmbientTexture:"set_useAmbientTexture",get_useAmbientTexture:"get_useAmbientTexture"})
});
away3d.materials.methods.BasicNormalMethod = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicNormalMethod"] = away3d.materials.methods.BasicNormalMethod;
away3d.materials.methods.BasicNormalMethod.__name__ = ["away3d","materials","methods","BasicNormalMethod"];
away3d.materials.methods.BasicNormalMethod.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.BasicNormalMethod.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	initVO: function(vo) {
		vo.needsUV = js.Boot.__cast(this._texture != null , Bool);
	}
	,get_tangentSpace: function() {
		return true;
	}
	,get_hasOutput: function() {
		return this._useTexture;
	}
	,copyFrom: function(method) {
		this.set_normalMap((js.Boot.__cast(method , away3d.materials.methods.BasicNormalMethod)).get_normalMap());
	}
	,get_normalMap: function() {
		return this._texture;
	}
	,set_normalMap: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._normalTextureRegister = null;
	}
	,dispose: function() {
		if(this._texture != null) this._texture = null;
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.texturesIndex >= 0) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,vo.useSmoothTextures?openfl.display3D.Context3DTextureFilter.LINEAR:openfl.display3D.Context3DTextureFilter.NEAREST,vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		this._normalTextureRegister = regCache.getFreeTextureReg();
		vo.texturesIndex = this._normalTextureRegister.get_index();
		return this.getTex2DSampleCode(vo,targetReg,this._normalTextureRegister,this._texture) + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(this._sharedRegisters.commons) + ".xxx\t\n" + "nrm " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz\t\t\t\t\t\t\t\n";
	}
	,__class__: away3d.materials.methods.BasicNormalMethod
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",get_hasOutput:"get_hasOutput",get_tangentSpace:"get_tangentSpace"})
});
away3d.materials.methods.BasicSpecularMethod = function() {
	this._gloss = 50;
	this._specular = 1;
	this._specularColor = 16777215;
	this._specularR = 1;
	this._specularG = 1;
	this._specularB = 1;
	away3d.materials.methods.LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicSpecularMethod"] = away3d.materials.methods.BasicSpecularMethod;
away3d.materials.methods.BasicSpecularMethod.__name__ = ["away3d","materials","methods","BasicSpecularMethod"];
away3d.materials.methods.BasicSpecularMethod.__super__ = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.BasicSpecularMethod.prototype = $extend(away3d.materials.methods.LightingMethodBase.prototype,{
	initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
		vo.needsView = vo.numLights > 0;
	}
	,get_gloss: function() {
		return this._gloss;
	}
	,set_gloss: function(value) {
		this._gloss = value;
		return value;
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value == this._specular) return value;
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_specularColor: function() {
		return this._specularColor;
	}
	,set_specularColor: function(value) {
		if((function($this) {
			var $r;
			var $int = $this._specularColor;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == (function($this) {
			var $r;
			var int1 = value;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this))) return value;
		if((function($this) {
			var $r;
			var int2 = $this._specularColor;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			var int3 = value;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) == 0) this.invalidateShaderProgram();
		this._specularColor = value;
		this.updateSpecular();
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var spec;
		spec = js.Boot.__cast(method , away3d.materials.methods.BasicSpecularMethod);
		this.set_texture(spec.get_texture());
		this.set_specular(spec.get_specular());
		this.set_specularColor(spec.get_specularColor());
		this.set_gloss(spec.get_gloss());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._specularTextureRegister = null;
		this._specularTexData = null;
		this._specularDataRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._specularDataRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._specularDataRegister.get_index() * 4;
			if(this._useTexture) {
				this._specularTexData = regCache.getFreeFragmentVectorTemp();
				regCache.addFragmentTempUsages(this._specularTexData,1);
				this._specularTextureRegister = regCache.getFreeTextureReg();
				vo.texturesIndex = this._specularTextureRegister.get_index();
				code = this.getTex2DSampleCode(vo,this._specularTexData,this._specularTextureRegister,this._texture);
			} else this._specularTextureRegister = null;
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		var normalReg = this._sharedRegisters.normalFragment;
		code += "add " + Std.string(t) + ", " + Std.string(lightDirReg) + ", " + Std.string(viewDirReg) + "\n" + "nrm " + Std.string(t) + ".xyz, " + Std.string(t) + "\n" + "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(t) + "\n" + "sat " + Std.string(t) + ".w, " + Std.string(t) + ".w\n";
		if(this._useTexture) code += "mul " + Std.string(this._specularTexData) + ".w, " + Std.string(this._specularTexData) + ".y, " + Std.string(this._specularDataRegister) + ".w\n" + "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularTexData) + ".w\n"; else code += "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularDataRegister) + ".w\n";
		if(vo.useLightFallOff) code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		code += "mul " + Std.string(t) + ".xyz, " + Std.string(lightColReg) + ", " + Std.string(t) + ".w\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var normalReg = this._sharedRegisters.normalFragment;
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		code += "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(viewDirReg) + "\n" + "add " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(t) + ".w\n" + "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(normalReg) + "\n" + "sub " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(viewDirReg) + "\n" + "tex " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(cubeMapReg) + " <cube," + (vo.useSmoothTextures?"linear":"nearest") + ",miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ", " + weightRegister + "\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		if(vo.numLights == 0) return code;
		if(this._shadowRegister != null) code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
		if(this._useTexture) {
			code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularTexData) + ".x\n";
			regCache.removeFragmentTempUsage(this._specularTexData);
		}
		code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularDataRegister) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.numLights == 0) return;
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,vo.useSmoothTextures?openfl.display3D.Context3DTextureFilter.LINEAR:openfl.display3D.Context3DTextureFilter.NEAREST,vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		if(index >= data.length && !data.fixed) data.length = index + 1;
		data.data[index] = this._specularR;
		var key = index + 1;
		if(key >= data.length && !data.fixed) data.length = key + 1;
		data.data[key] = this._specularG;
		var key1 = index + 2;
		if(key1 >= data.length && !data.fixed) data.length = key1 + 1;
		data.data[key1] = this._specularB;
		var key2 = index + 3;
		if(key2 >= data.length && !data.fixed) data.length = key2 + 1;
		data.data[key2] = this._gloss;
	}
	,updateSpecular: function() {
		this._specularR = (function($this) {
			var $r;
			var $int = $this._specularColor >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) * this._specular;
		this._specularG = (function($this) {
			var $r;
			var int2 = $this._specularColor >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) * this._specular;
		this._specularB = (function($this) {
			var $r;
			var int4 = $this._specularColor & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)) * this._specular;
	}
	,set_shadowRegister: function(shadowReg) {
		this._shadowRegister = shadowReg;
		return shadowReg;
	}
	,__class__: away3d.materials.methods.BasicSpecularMethod
	,__properties__: $extend(away3d.materials.methods.LightingMethodBase.prototype.__properties__,{set_shadowRegister:"set_shadowRegister",set_texture:"set_texture",get_texture:"get_texture",set_specularColor:"set_specularColor",get_specularColor:"get_specularColor",set_specular:"set_specular",get_specular:"get_specular",set_gloss:"set_gloss",get_gloss:"get_gloss"})
});
away3d.materials.methods.CompositeDiffuseMethod = function(modulateMethod,baseDiffuseMethod) {
	this._baseMethod = baseDiffuseMethod;
	if(this._baseMethod == null) this._baseMethod = new away3d.materials.methods.BasicDiffuseMethod();
	this._baseMethod._modulateMethod = modulateMethod;
	this._baseMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	away3d.materials.methods.BasicDiffuseMethod.call(this);
};
$hxClasses["away3d.materials.methods.CompositeDiffuseMethod"] = away3d.materials.methods.CompositeDiffuseMethod;
away3d.materials.methods.CompositeDiffuseMethod.__name__ = ["away3d","materials","methods","CompositeDiffuseMethod"];
away3d.materials.methods.CompositeDiffuseMethod.__super__ = away3d.materials.methods.BasicDiffuseMethod;
away3d.materials.methods.CompositeDiffuseMethod.prototype = $extend(away3d.materials.methods.BasicDiffuseMethod.prototype,{
	get_baseMethod: function() {
		return this._baseMethod;
	}
	,set_baseMethod: function(value) {
		if(this._baseMethod == value) return value;
		this._baseMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._baseMethod = value;
		this._baseMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated),false,0,true);
		this.invalidateShaderProgram();
		return value;
	}
	,initVO: function(vo) {
		this._baseMethod.initVO(vo);
	}
	,initConstants: function(vo) {
		this._baseMethod.initConstants(vo);
	}
	,dispose: function() {
		this._baseMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._baseMethod.dispose();
	}
	,get_alphaThreshold: function() {
		return this._baseMethod.get_alphaThreshold();
	}
	,set_alphaThreshold: function(value) {
		this._baseMethod.set_alphaThreshold(value);
		return value;
	}
	,get_texture: function() {
		return this._baseMethod.get_texture();
	}
	,set_texture: function(value) {
		this._baseMethod.set_texture(value);
		return value;
	}
	,get_diffuseAlpha: function() {
		return this._baseMethod.get_diffuseAlpha();
	}
	,get_diffuseColor: function() {
		return this._baseMethod.get_diffuseColor();
	}
	,set_diffuseColor: function(diffuseColor) {
		this._baseMethod.set_diffuseColor(diffuseColor);
		return diffuseColor;
	}
	,set_diffuseAlpha: function(value) {
		this._baseMethod.set_diffuseAlpha(value);
		return value;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		return this._baseMethod.getFragmentPreLightingCode(vo,regCache);
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = this._baseMethod.getFragmentCodePerLight(vo,lightDirReg,lightColReg,regCache);
		this._totalLightColorReg = this._baseMethod._totalLightColorReg;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = this._baseMethod.getFragmentCodePerProbe(vo,cubeMapReg,weightRegister,regCache);
		this._totalLightColorReg = this._baseMethod._totalLightColorReg;
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		this._baseMethod.activate(vo,stage3DProxy);
	}
	,deactivate: function(vo,stage3DProxy) {
		this._baseMethod.deactivate(vo,stage3DProxy);
	}
	,getVertexCode: function(vo,regCache) {
		return this._baseMethod.getVertexCode(vo,regCache);
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		return this._baseMethod.getFragmentPostLightingCode(vo,regCache,targetReg);
	}
	,reset: function() {
		this._baseMethod.reset();
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.BasicDiffuseMethod.prototype.cleanCompilationData.call(this);
		this._baseMethod.cleanCompilationData();
	}
	,set_sharedRegisters: function(value) {
		away3d.materials.methods.BasicDiffuseMethod.prototype.set_sharedRegisters.call(this,this._baseMethod.set_sharedRegisters(value));
		return value;
	}
	,set_shadowRegister: function(value) {
		away3d.materials.methods.BasicDiffuseMethod.prototype.set_shadowRegister.call(this,value);
		this._baseMethod.set_shadowRegister(value);
		return value;
	}
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,__class__: away3d.materials.methods.CompositeDiffuseMethod
	,__properties__: $extend(away3d.materials.methods.BasicDiffuseMethod.prototype.__properties__,{set_baseMethod:"set_baseMethod",get_baseMethod:"get_baseMethod"})
});
away3d.materials.methods.CelDiffuseMethod = function(levels,baseDiffuseMethod) {
	if(levels == null) levels = 3;
	this._smoothness = .1;
	away3d.materials.methods.CompositeDiffuseMethod.call(this,$bind(this,this.clampDiffuse),baseDiffuseMethod);
	this._levels = levels;
};
$hxClasses["away3d.materials.methods.CelDiffuseMethod"] = away3d.materials.methods.CelDiffuseMethod;
away3d.materials.methods.CelDiffuseMethod.__name__ = ["away3d","materials","methods","CelDiffuseMethod"];
away3d.materials.methods.CelDiffuseMethod.__super__ = away3d.materials.methods.CompositeDiffuseMethod;
away3d.materials.methods.CelDiffuseMethod.prototype = $extend(away3d.materials.methods.CompositeDiffuseMethod.prototype,{
	initConstants: function(vo) {
		var data = vo.fragmentData;
		var index = vo.secondaryFragmentConstantsIndex;
		away3d.materials.methods.CompositeDiffuseMethod.prototype.initConstants.call(this,vo);
		var key = index + 1;
		if(key >= data.length && !data.fixed) data.length = key + 1;
		data.data[key] = 1;
		var key1 = index + 2;
		if(key1 >= data.length && !data.fixed) data.length = key1 + 1;
		data.data[key1] = 0;
	}
	,get_levels: function() {
		return this._levels;
	}
	,set_levels: function(value) {
		this._levels = value;
		return value;
	}
	,get_smoothness: function() {
		return this._smoothness;
	}
	,set_smoothness: function(value) {
		this._smoothness = value;
		return value;
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.CompositeDiffuseMethod.prototype.cleanCompilationData.call(this);
		this._dataReg = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		this._dataReg = regCache.getFreeFragmentConstant();
		vo.secondaryFragmentConstantsIndex = this._dataReg.get_index() * 4;
		return away3d.materials.methods.CompositeDiffuseMethod.prototype.getFragmentPreLightingCode.call(this,vo,regCache);
	}
	,activate: function(vo,stage3DProxy) {
		away3d.materials.methods.CompositeDiffuseMethod.prototype.activate.call(this,vo,stage3DProxy);
		var data = vo.fragmentData;
		var index = vo.secondaryFragmentConstantsIndex;
		if(index >= data.length && !data.fixed) data.length = index + 1;
		data.data[index] = this._levels;
		var key = index + 3;
		if(key >= data.length && !data.fixed) data.length = key + 1;
		data.data[key] = this._smoothness;
	}
	,clampDiffuse: function(vo,t,regCache,sharedRegisters) {
		return "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._dataReg) + ".x\n" + "frc " + Std.string(t) + ".z, " + Std.string(t) + ".w\n" + "sub " + Std.string(t) + ".y, " + Std.string(t) + ".w, " + Std.string(t) + ".z\n" + "mov " + Std.string(t) + ".x, " + Std.string(this._dataReg) + ".x\n" + "sub " + Std.string(t) + ".x, " + Std.string(t) + ".x, " + Std.string(this._dataReg) + ".y\n" + "rcp " + Std.string(t) + ".x," + Std.string(t) + ".x\n" + "mul " + Std.string(t) + ".w, " + Std.string(t) + ".y, " + Std.string(t) + ".x\n" + "sub " + Std.string(t) + ".y, " + Std.string(t) + ".w, " + Std.string(t) + ".x\n" + "div " + Std.string(t) + ".z, " + Std.string(t) + ".z, " + Std.string(this._dataReg) + ".w\n" + "sat " + Std.string(t) + ".z, " + Std.string(t) + ".z\n" + "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(t) + ".z\n" + "sub " + Std.string(t) + ".z, " + Std.string(this._dataReg) + ".y, " + Std.string(t) + ".z\n" + "mul " + Std.string(t) + ".y, " + Std.string(t) + ".y, " + Std.string(t) + ".z\n" + "add " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(t) + ".y\n" + "sat " + Std.string(t) + ".w, " + Std.string(t) + ".w\n";
	}
	,__class__: away3d.materials.methods.CelDiffuseMethod
	,__properties__: $extend(away3d.materials.methods.CompositeDiffuseMethod.prototype.__properties__,{set_smoothness:"set_smoothness",get_smoothness:"get_smoothness",set_levels:"set_levels",get_levels:"get_levels"})
});
away3d.materials.methods.CompositeSpecularMethod = function(modulateMethod,baseSpecularMethod) {
	away3d.materials.methods.BasicSpecularMethod.call(this);
	this._baseMethod = baseSpecularMethod;
	if(this._baseMethod == null) this._baseMethod = new away3d.materials.methods.BasicSpecularMethod();
	this._baseMethod._modulateMethod = modulateMethod;
	this._baseMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
};
$hxClasses["away3d.materials.methods.CompositeSpecularMethod"] = away3d.materials.methods.CompositeSpecularMethod;
away3d.materials.methods.CompositeSpecularMethod.__name__ = ["away3d","materials","methods","CompositeSpecularMethod"];
away3d.materials.methods.CompositeSpecularMethod.__super__ = away3d.materials.methods.BasicSpecularMethod;
away3d.materials.methods.CompositeSpecularMethod.prototype = $extend(away3d.materials.methods.BasicSpecularMethod.prototype,{
	initVO: function(vo) {
		this._baseMethod.initVO(vo);
	}
	,initConstants: function(vo) {
		this._baseMethod.initConstants(vo);
	}
	,get_baseMethod: function() {
		return this._baseMethod;
	}
	,set_baseMethod: function(value) {
		if(this._baseMethod == value) return value;
		this._baseMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._baseMethod = value;
		this._baseMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated),false,0,true);
		this.invalidateShaderProgram();
		return value;
	}
	,get_gloss: function() {
		return this._baseMethod.get_gloss();
	}
	,set_gloss: function(value) {
		this._baseMethod.set_gloss(value);
		return value;
	}
	,get_specular: function() {
		return this._baseMethod.get_specular();
	}
	,set_specular: function(value) {
		this._baseMethod.set_specular(value);
		return value;
	}
	,get_passes: function() {
		return this._baseMethod.get_passes();
	}
	,dispose: function() {
		this._baseMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._baseMethod.dispose();
	}
	,get_texture: function() {
		return this._baseMethod.get_texture();
	}
	,set_texture: function(value) {
		this._baseMethod.set_texture(value);
		return value;
	}
	,activate: function(vo,stage3DProxy) {
		this._baseMethod.activate(vo,stage3DProxy);
	}
	,deactivate: function(vo,stage3DProxy) {
		this._baseMethod.deactivate(vo,stage3DProxy);
	}
	,set_sharedRegisters: function(value) {
		away3d.materials.methods.BasicSpecularMethod.prototype.set_sharedRegisters.call(this,this._baseMethod.set_sharedRegisters(value));
		return value;
	}
	,getVertexCode: function(vo,regCache) {
		return this._baseMethod.getVertexCode(vo,regCache);
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		return this._baseMethod.getFragmentPreLightingCode(vo,regCache);
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		return this._baseMethod.getFragmentCodePerLight(vo,lightDirReg,lightColReg,regCache);
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		return this._baseMethod.getFragmentCodePerProbe(vo,cubeMapReg,weightRegister,regCache);
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		return this._baseMethod.getFragmentPostLightingCode(vo,regCache,targetReg);
	}
	,reset: function() {
		this._baseMethod.reset();
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.BasicSpecularMethod.prototype.cleanCompilationData.call(this);
		this._baseMethod.cleanCompilationData();
	}
	,set_shadowRegister: function(value) {
		away3d.materials.methods.BasicSpecularMethod.prototype.set_shadowRegister.call(this,value);
		this._baseMethod.set_shadowRegister(value);
		return value;
	}
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,__class__: away3d.materials.methods.CompositeSpecularMethod
	,__properties__: $extend(away3d.materials.methods.BasicSpecularMethod.prototype.__properties__,{set_baseMethod:"set_baseMethod",get_baseMethod:"get_baseMethod"})
});
away3d.materials.methods.CelSpecularMethod = function(specularCutOff,baseSpecularMethod) {
	if(specularCutOff == null) specularCutOff = .5;
	this._smoothness = .1;
	this._specularCutOff = .1;
	away3d.materials.methods.CompositeSpecularMethod.call(this,$bind(this,this.clampSpecular),baseSpecularMethod);
	this._specularCutOff = specularCutOff;
};
$hxClasses["away3d.materials.methods.CelSpecularMethod"] = away3d.materials.methods.CelSpecularMethod;
away3d.materials.methods.CelSpecularMethod.__name__ = ["away3d","materials","methods","CelSpecularMethod"];
away3d.materials.methods.CelSpecularMethod.__super__ = away3d.materials.methods.CompositeSpecularMethod;
away3d.materials.methods.CelSpecularMethod.prototype = $extend(away3d.materials.methods.CompositeSpecularMethod.prototype,{
	get_smoothness: function() {
		return this._smoothness;
	}
	,set_smoothness: function(value) {
		this._smoothness = value;
		return value;
	}
	,get_specularCutOff: function() {
		return this._specularCutOff;
	}
	,set_specularCutOff: function(value) {
		this._specularCutOff = value;
		return value;
	}
	,activate: function(vo,stage3DProxy) {
		away3d.materials.methods.CompositeSpecularMethod.prototype.activate.call(this,vo,stage3DProxy);
		var index = vo.secondaryFragmentConstantsIndex;
		var data = vo.fragmentData;
		if(index >= data.length && !data.fixed) data.length = index + 1;
		data.data[index] = this._smoothness;
		var key = index + 1;
		if(key >= data.length && !data.fixed) data.length = key + 1;
		data.data[key] = this._specularCutOff;
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.CompositeSpecularMethod.prototype.cleanCompilationData.call(this);
		this._dataReg = null;
	}
	,clampSpecular: function(methodVO,target,regCache,sharedRegisters) {
		return "sub " + Std.string(target) + ".y, " + Std.string(target) + ".w, " + Std.string(this._dataReg) + ".y\n" + "div " + Std.string(target) + ".y, " + Std.string(target) + ".y, " + Std.string(this._dataReg) + ".x\n" + "sat " + Std.string(target) + ".y, " + Std.string(target) + ".y\n" + "sge " + Std.string(target) + ".w, " + Std.string(target) + ".w, " + Std.string(this._dataReg) + ".y\n" + "mul " + Std.string(target) + ".w, " + Std.string(target) + ".w, " + Std.string(target) + ".y\n";
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		this._dataReg = regCache.getFreeFragmentConstant();
		vo.secondaryFragmentConstantsIndex = this._dataReg.get_index() * 4;
		return away3d.materials.methods.CompositeSpecularMethod.prototype.getFragmentPreLightingCode.call(this,vo,regCache);
	}
	,__class__: away3d.materials.methods.CelSpecularMethod
	,__properties__: $extend(away3d.materials.methods.CompositeSpecularMethod.prototype.__properties__,{set_specularCutOff:"set_specularCutOff",get_specularCutOff:"get_specularCutOff",set_smoothness:"set_smoothness",get_smoothness:"get_smoothness"})
});
away3d.materials.methods.EffectMethodBase = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.EffectMethodBase"] = away3d.materials.methods.EffectMethodBase;
away3d.materials.methods.EffectMethodBase.__name__ = ["away3d","materials","methods","EffectMethodBase"];
away3d.materials.methods.EffectMethodBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.methods.EffectMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.EffectMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.EFFECTS_METHOD;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,__class__: away3d.materials.methods.EffectMethodBase
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{get_assetType:"get_assetType"})
});
away3d.materials.methods.ColorTransformMethod = function() {
	away3d.materials.methods.EffectMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.ColorTransformMethod"] = away3d.materials.methods.ColorTransformMethod;
away3d.materials.methods.ColorTransformMethod.__name__ = ["away3d","materials","methods","ColorTransformMethod"];
away3d.materials.methods.ColorTransformMethod.__super__ = away3d.materials.methods.EffectMethodBase;
away3d.materials.methods.ColorTransformMethod.prototype = $extend(away3d.materials.methods.EffectMethodBase.prototype,{
	get_colorTransform: function() {
		return this._colorTransform;
	}
	,set_colorTransform: function(value) {
		this._colorTransform = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		var colorMultReg = regCache.getFreeFragmentConstant();
		var colorOffsReg = regCache.getFreeFragmentConstant();
		vo.fragmentConstantsIndex = colorMultReg.get_index() * 4;
		code += "mul " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorMultReg) + "\n" + "add " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorOffsReg) + "\n";
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		var inv = 0.00392156862745098;
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		if(index >= data.length && !data.fixed) data.length = index + 1;
		data.data[index] = this._colorTransform.redMultiplier;
		var key = index + 1;
		if(key >= data.length && !data.fixed) data.length = key + 1;
		data.data[key] = this._colorTransform.greenMultiplier;
		var key1 = index + 2;
		if(key1 >= data.length && !data.fixed) data.length = key1 + 1;
		data.data[key1] = this._colorTransform.blueMultiplier;
		var key2 = index + 3;
		if(key2 >= data.length && !data.fixed) data.length = key2 + 1;
		data.data[key2] = this._colorTransform.alphaMultiplier;
		var key3 = index + 4;
		if(key3 >= data.length && !data.fixed) data.length = key3 + 1;
		data.data[key3] = this._colorTransform.redOffset * inv;
		var key4 = index + 5;
		if(key4 >= data.length && !data.fixed) data.length = key4 + 1;
		data.data[key4] = this._colorTransform.greenOffset * inv;
		var key5 = index + 6;
		if(key5 >= data.length && !data.fixed) data.length = key5 + 1;
		data.data[key5] = this._colorTransform.blueOffset * inv;
		var key6 = index + 7;
		if(key6 >= data.length && !data.fixed) data.length = key6 + 1;
		data.data[key6] = this._colorTransform.alphaOffset * inv;
	}
	,__class__: away3d.materials.methods.ColorTransformMethod
	,__properties__: $extend(away3d.materials.methods.EffectMethodBase.prototype.__properties__,{set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"})
});
away3d.materials.methods.MethodVO = function() {
	this.useLightFallOff = true;
};
$hxClasses["away3d.materials.methods.MethodVO"] = away3d.materials.methods.MethodVO;
away3d.materials.methods.MethodVO.__name__ = ["away3d","materials","methods","MethodVO"];
away3d.materials.methods.MethodVO.prototype = {
	reset: function() {
		this.texturesIndex = -1;
		this.vertexConstantsIndex = -1;
		this.fragmentConstantsIndex = -1;
		this.useMipmapping = true;
		this.useSmoothTextures = true;
		this.repeatTextures = false;
		this.needsProjection = false;
		this.needsView = false;
		this.needsNormals = false;
		this.needsTangents = false;
		this.needsUV = false;
		this.needsSecondaryUV = false;
		this.needsGlobalVertexPos = false;
		this.needsGlobalFragmentPos = false;
		this.numLights = 0;
		this.useLightFallOff = true;
	}
	,__class__: away3d.materials.methods.MethodVO
};
away3d.materials.methods.MethodVOSet = function(method) {
	this.method = method;
	this.data = method.createMethodVO();
};
$hxClasses["away3d.materials.methods.MethodVOSet"] = away3d.materials.methods.MethodVOSet;
away3d.materials.methods.MethodVOSet.__name__ = ["away3d","materials","methods","MethodVOSet"];
away3d.materials.methods.MethodVOSet.prototype = {
	__class__: away3d.materials.methods.MethodVOSet
};
away3d.materials.methods.ShaderMethodSetup = function() {
	this._methods = new Array();
	this._normalMethod = new away3d.materials.methods.BasicNormalMethod();
	this._ambientMethod = new away3d.materials.methods.BasicAmbientMethod();
	this._diffuseMethod = new away3d.materials.methods.BasicDiffuseMethod();
	this._specularMethod = new away3d.materials.methods.BasicSpecularMethod();
	this._normalMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._diffuseMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._specularMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._ambientMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._normalMethodVO = this._normalMethod.createMethodVO();
	this._ambientMethodVO = this._ambientMethod.createMethodVO();
	this._diffuseMethodVO = this._diffuseMethod.createMethodVO();
	this._specularMethodVO = this._specularMethod.createMethodVO();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.materials.methods.ShaderMethodSetup"] = away3d.materials.methods.ShaderMethodSetup;
away3d.materials.methods.ShaderMethodSetup.__name__ = ["away3d","materials","methods","ShaderMethodSetup"];
away3d.materials.methods.ShaderMethodSetup.__super__ = openfl.events.EventDispatcher;
away3d.materials.methods.ShaderMethodSetup.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d.events.ShadingMethodEvent(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED));
	}
	,get_normalMethod: function() {
		return this._normalMethod;
	}
	,set_normalMethod: function(value) {
		if(this._normalMethod != null) this._normalMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._normalMethod != null) value.copyFrom(this._normalMethod);
			this._normalMethodVO = value.createMethodVO();
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		}
		this._normalMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_ambientMethod: function() {
		return this._ambientMethod;
	}
	,set_ambientMethod: function(value) {
		if(this._ambientMethod != null) this._ambientMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._ambientMethod != null) value.copyFrom(this._ambientMethod);
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._ambientMethodVO = value.createMethodVO();
		}
		this._ambientMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_shadowMethod: function() {
		return this._shadowMethod;
	}
	,set_shadowMethod: function(value) {
		if(this._shadowMethod != null) this._shadowMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._shadowMethod = value;
		if(this._shadowMethod != null) {
			this._shadowMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._shadowMethodVO = this._shadowMethod.createMethodVO();
		} else this._shadowMethodVO = null;
		this.invalidateShaderProgram();
		return value;
	}
	,get_diffuseMethod: function() {
		return this._diffuseMethod;
	}
	,set_diffuseMethod: function(value) {
		if(this._diffuseMethod != null) this._diffuseMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._diffuseMethod != null) value.copyFrom(this._diffuseMethod);
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._diffuseMethodVO = value.createMethodVO();
		}
		this._diffuseMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_specularMethod: function() {
		return this._specularMethod;
	}
	,set_specularMethod: function(value) {
		if(this._specularMethod != null) {
			this._specularMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			if(value != null) value.copyFrom(this._specularMethod);
		}
		this._specularMethod = value;
		if(this._specularMethod != null) {
			this._specularMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._specularMethodVO = this._specularMethod.createMethodVO();
		} else this._specularMethodVO = null;
		this.invalidateShaderProgram();
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._colorTransformMethod;
	}
	,set_colorTransformMethod: function(value) {
		if(this._colorTransformMethod == value) return value;
		if(this._colorTransformMethod != null) this._colorTransformMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(this._colorTransformMethod == null || value == null) this.invalidateShaderProgram();
		this._colorTransformMethod = value;
		if(this._colorTransformMethod != null) {
			this._colorTransformMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._colorTransformMethodVO = this._colorTransformMethod.createMethodVO();
		} else this._colorTransformMethodVO = null;
		return value;
	}
	,dispose: function() {
		this.clearListeners(this._normalMethod);
		this.clearListeners(this._diffuseMethod);
		this.clearListeners(this._shadowMethod);
		this.clearListeners(this._ambientMethod);
		this.clearListeners(this._specularMethod);
		var i = 0;
		while(i < this._methods.length) {
			this.clearListeners(this._methods[i].method);
			++i;
		}
		this._methods = null;
	}
	,clearListeners: function(method) {
		if(method != null) method.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	}
	,addMethod: function(method) {
		this._methods.push(new away3d.materials.methods.MethodVOSet(method));
		method.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,hasMethod: function(method) {
		return this.getMethodSetForMethod(method) != null;
	}
	,addMethodAt: function(method,index) {
		var x = new away3d.materials.methods.MethodVOSet(method);
		this._methods.splice(index,0,x);
		method.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,getMethodAt: function(index) {
		if(index > this._methods.length - 1) return null;
		return this._methods[index].method;
	}
	,get_numMethods: function() {
		return this._methods.length;
	}
	,removeMethod: function(method) {
		var methodSet = this.getMethodSetForMethod(method);
		if(methodSet != null) {
			var index = Lambda.indexOf(this._methods,methodSet);
			this._methods.splice(index,1);
			method.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this.invalidateShaderProgram();
		}
	}
	,getMethodSetForMethod: function(method) {
		var len = this._methods.length;
		var i = 0;
		while(i < len) {
			if(this._methods[i].method == method) return this._methods[i];
			++i;
		}
		return null;
	}
	,__class__: away3d.materials.methods.ShaderMethodSetup
	,__properties__: {get_numMethods:"get_numMethods",set_colorTransformMethod:"set_colorTransformMethod",get_colorTransformMethod:"get_colorTransformMethod",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod"}
});
away3d.materials.methods.ShadowMapMethodBase = function(castingLight) {
	this._epsilon = .02;
	this._alpha = 1;
	away3d.materials.methods.ShadingMethodBase.call(this);
	this._castingLight = castingLight;
	castingLight.set_castsShadows(true);
	this._shadowMapper = castingLight.get_shadowMapper();
};
$hxClasses["away3d.materials.methods.ShadowMapMethodBase"] = away3d.materials.methods.ShadowMapMethodBase;
away3d.materials.methods.ShadowMapMethodBase.__name__ = ["away3d","materials","methods","ShadowMapMethodBase"];
away3d.materials.methods.ShadowMapMethodBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.methods.ShadowMapMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.ShadowMapMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.SHADOW_MAP_METHOD;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		this._alpha = value;
		return value;
	}
	,get_castingLight: function() {
		return this._castingLight;
	}
	,get_epsilon: function() {
		return this._epsilon;
	}
	,set_epsilon: function(value) {
		this._epsilon = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,__class__: away3d.materials.methods.ShadowMapMethodBase
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_epsilon:"set_epsilon",get_epsilon:"get_epsilon",get_castingLight:"get_castingLight",set_alpha:"set_alpha",get_alpha:"get_alpha",get_assetType:"get_assetType"})
});
away3d.materials.passes = {};
away3d.materials.passes.MaterialPassBase = function(renderToTexture) {
	if(renderToTexture == null) renderToTexture = false;
	openfl.events.EventDispatcher.call(this);
	this._program3Ds = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._program3Dids = [-1,-1,-1,-1,-1,-1,-1,-1];
	this._context3Ds = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._smooth = true;
	this._repeat = false;
	this._mipmap = true;
	this._depthCompareMode = 515;
	this._blendFactorSource = 1;
	this._blendFactorDest = 0;
	this._animatableAttributes = ["va0"];
	this._animationTargetRegisters = ["vt0"];
	this._shadedTarget = "ft0";
	this._defaultCulling = 1028;
	this._writeDepth = true;
	this._renderToTexture = renderToTexture;
	this._numUsedStreams = 1;
	this._numUsedVertexConstants = 5;
};
$hxClasses["away3d.materials.passes.MaterialPassBase"] = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.MaterialPassBase.__name__ = ["away3d","materials","passes","MaterialPassBase"];
away3d.materials.passes.MaterialPassBase.__super__ = openfl.events.EventDispatcher;
away3d.materials.passes.MaterialPassBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		this._material = value;
		return this._material;
	}
	,get_writeDepth: function() {
		return this._writeDepth;
	}
	,set_writeDepth: function(value) {
		this._writeDepth = value;
		return this._writeDepth;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return this._mipmap;
		this._mipmap = value;
		this.invalidateShaderProgram();
		return this._mipmap;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		if(this._smooth == value) return this._smooth;
		this._smooth = value;
		this.invalidateShaderProgram();
		return this._smooth;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		if(this._repeat == value) return this._repeat;
		this._repeat = value;
		this.invalidateShaderProgram();
		return this._repeat;
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		return this._bothSides;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return this._depthCompareMode;
	}
	,get_animationSet: function() {
		return this._animationSet;
	}
	,set_animationSet: function(value) {
		if(this._animationSet == value) return this._animationSet;
		this._animationSet = value;
		this.invalidateShaderProgram();
		return this._animationSet;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,dispose: function() {
		if(this._lightPicker != null) this._lightPicker.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		var i = 0;
		var _g = 0;
		while(_g < 8) {
			var i1 = _g++;
			if(this._program3Ds[i1] != null) {
				away3d.core.managers.AGALProgram3DCache.getInstanceFromIndex(i1).freeProgram3D(this._program3Dids[i1]);
				this._program3Ds[i1] = null;
			}
		}
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_needFragmentAnimation: function() {
		return this._needFragmentAnimation;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,updateAnimationState: function(renderable,stage3DProxy,camera) {
		renderable.get_animator().setRenderState(stage3DProxy,renderable,this._numUsedVertexConstants,this._numUsedStreams,camera);
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		throw new away3d.errors.AbstractMethodError();
	}
	,getVertexCode: function() {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,getFragmentCode: function(fragmentAnimatorCode) {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,setBlendMode: function(value) {
		switch(value[1]) {
		case 10:
			this._blendFactorSource = 1;
			this._blendFactorDest = 0;
			this._enableBlending = false;
			break;
		case 7:
			this._blendFactorSource = 770;
			this._blendFactorDest = 771;
			this._enableBlending = true;
			break;
		case 9:
			this._blendFactorSource = 0;
			this._blendFactorDest = 768;
			this._enableBlending = true;
			break;
		case 0:
			this._blendFactorSource = 770;
			this._blendFactorDest = 1;
			this._enableBlending = true;
			break;
		case 1:
			this._blendFactorSource = 0;
			this._blendFactorDest = 770;
			this._enableBlending = true;
			break;
		default:
			throw new openfl.errors.Error("Unsupported blend mode!");
		}
	}
	,activate: function(stage3DProxy,camera) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		context.setDepthTest(this._writeDepth && !this._enableBlending,this._depthCompareMode);
		if(this._enableBlending) context.setBlendFactors(this._blendFactorSource,this._blendFactorDest);
		if(this._context3Ds[contextIndex] != context || this._program3Ds[contextIndex] == null) {
			this._context3Ds[contextIndex] = context;
			this.updateProgram(stage3DProxy);
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		}
		var prevUsed = away3d.materials.passes.MaterialPassBase._previousUsedStreams[contextIndex];
		var _g = this._numUsedStreams;
		while(_g < prevUsed) {
			var i = _g++;
			context.setVertexBufferAt(i,null);
		}
		prevUsed = away3d.materials.passes.MaterialPassBase._previousUsedTexs[contextIndex];
		var _g1 = this._numUsedTextures;
		while(_g1 < prevUsed) {
			var i1 = _g1++;
			context.setTextureAt(i1,null);
		}
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) this._animationSet.activate(stage3DProxy,this);
		context.setProgram(this._program3Ds[contextIndex]);
		context.setCulling(this._bothSides?0:this._defaultCulling);
		if(this._renderToTexture) {
			this._oldTarget = stage3DProxy.get_renderTarget();
			this._oldSurface = stage3DProxy.get_renderSurfaceSelector();
			this._oldDepthStencil = stage3DProxy.get_enableDepthAndStencil();
			this._oldRect = stage3DProxy.get_scissorRect();
		}
	}
	,deactivate: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		away3d.materials.passes.MaterialPassBase._previousUsedStreams[index] = this._numUsedStreams;
		away3d.materials.passes.MaterialPassBase._previousUsedTexs[index] = this._numUsedTextures;
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) this._animationSet.deactivate(stage3DProxy,this);
		if(this._renderToTexture) {
			stage3DProxy.setRenderTarget(this._oldTarget,this._oldDepthStencil,this._oldSurface);
			stage3DProxy.set_scissorRect(this._oldRect);
		}
		stage3DProxy._context3D.setDepthTest(true,515);
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) updateMaterial = true;
		var i = 0;
		var _g = 0;
		while(_g < 8) {
			var i1 = _g++;
			this._program3Ds[i1] = null;
		}
		if(this._material != null && updateMaterial) this._material.invalidatePasses(this);
	}
	,updateProgram: function(stage3DProxy) {
		var animatorCode = "";
		var UVAnimatorCode = "";
		var fragmentAnimatorCode = "";
		var vertexCode = this.getVertexCode();
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) {
			animatorCode = this._animationSet.getAGALVertexCode(this,this._animatableAttributes,this._animationTargetRegisters,stage3DProxy.get_profile());
			if(this._needFragmentAnimation) fragmentAnimatorCode = this._animationSet.getAGALFragmentCode(this,this._shadedTarget,stage3DProxy.get_profile());
			if(this._needUVAnimation) UVAnimatorCode = this._animationSet.getAGALUVCode(this,this._UVSource,this._UVTarget);
			this._animationSet.doneAGALCode(this);
		} else {
			var len = this._animatableAttributes.length;
			var i = 0;
			var _g = 0;
			while(_g < len) {
				var i1 = _g++;
				animatorCode += "mov " + this._animationTargetRegisters[i1] + ", " + this._animatableAttributes[i1] + "\n";
			}
			if(this._needUVAnimation) UVAnimatorCode = "mov " + this._UVTarget + "," + this._UVSource + "\n";
		}
		vertexCode = animatorCode + UVAnimatorCode + vertexCode;
		var fragmentCode = this.getFragmentCode(fragmentAnimatorCode);
		if(away3d.debug.Debug.active) {
			haxe.Log.trace("Compiling AGAL Code:",{ fileName : "MaterialPassBase.hx", lineNumber : 526, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 527, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace(vertexCode,{ fileName : "MaterialPassBase.hx", lineNumber : 528, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 529, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace(fragmentCode,{ fileName : "MaterialPassBase.hx", lineNumber : 530, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
		}
		away3d.core.managers.AGALProgram3DCache.getInstance(stage3DProxy).setProgram3D(this,vertexCode,fragmentCode);
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(this._lightPicker != null) this._lightPicker.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		this._lightPicker = value;
		if(this._lightPicker != null) this._lightPicker.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		this.updateLights();
		return this._lightPicker;
	}
	,onLightsChange: function(event) {
		this.updateLights();
	}
	,updateLights: function() {
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		this.invalidateShaderProgram(false);
		return this._alphaPremultiplied;
	}
	,__class__: away3d.materials.passes.MaterialPassBase
	,__properties__: {set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_lightPicker:"set_lightPicker",get_lightPicker:"get_lightPicker",get_needUVAnimation:"get_needUVAnimation",get_needFragmentAnimation:"get_needFragmentAnimation",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVaryings:"get_numUsedVaryings",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_numUsedStreams:"get_numUsedStreams",get_renderToTexture:"get_renderToTexture",set_animationSet:"set_animationSet",get_animationSet:"get_animationSet",set_depthCompareMode:"set_depthCompareMode",get_depthCompareMode:"get_depthCompareMode",set_bothSides:"set_bothSides",get_bothSides:"get_bothSides",set_repeat:"set_repeat",get_repeat:"get_repeat",set_smooth:"set_smooth",get_smooth:"get_smooth",set_mipmap:"set_mipmap",get_mipmap:"get_mipmap",set_writeDepth:"set_writeDepth",get_writeDepth:"get_writeDepth",set_material:"set_material",get_material:"get_material"}
});
away3d.materials.passes.CompiledPass = function(material) {
	this._numDirectionalLights = 0;
	this._numPointLights = 0;
	this._numLightProbes = 0;
	this._specularLightSources = 1;
	this._diffuseLightSources = 3;
	this._vertexConstantData = openfl._Vector.Vector_Impl_._new();
	this._fragmentConstantData = openfl._Vector.Vector_Impl_._new();
	this._preserveAlpha = true;
	this._enableLightFallOff = true;
	this._material = material;
	this.init();
	away3d.materials.passes.MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.CompiledPass"] = away3d.materials.passes.CompiledPass;
away3d.materials.passes.CompiledPass.__name__ = ["away3d","materials","passes","CompiledPass"];
away3d.materials.passes.CompiledPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.CompiledPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		if(value != this._enableLightFallOff) this.invalidateShaderProgram(true);
		this._enableLightFallOff = value;
		return value;
	}
	,get_forceSeparateMVP: function() {
		return this._forceSeparateMVP;
	}
	,set_forceSeparateMVP: function(value) {
		this._forceSeparateMVP = value;
		return value;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,updateProgram: function(stage3DProxy) {
		this.reset(stage3DProxy.get_profile());
		away3d.materials.passes.MaterialPassBase.prototype.updateProgram.call(this,stage3DProxy);
	}
	,reset: function(profile) {
		this.initCompiler(profile);
		this.updateShaderProperties();
		this.initConstantData();
		this.cleanUp();
	}
	,updateUsedOffsets: function() {
		this._numUsedVertexConstants = this._compiler.get_numUsedVertexConstants();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
		this._numUsedStreams = this._compiler.get_numUsedStreams();
		this._numUsedTextures = this._compiler.get_numUsedTextures();
		this._numUsedVaryings = this._compiler.get_numUsedVaryings();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
	}
	,initConstantData: function() {
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._vertexConstantData),this._numUsedVertexConstants * 4,0);
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._fragmentConstantData),this._numUsedFragmentConstants * 4,0);
		this.initCommonsData();
		if(this._uvTransformIndex >= 0) this.initUVTransformData();
		if(this._cameraPositionIndex >= 0) {
			var this1 = this._vertexConstantData;
			var key = this._cameraPositionIndex + 3;
			if(key >= this1.length && !this1.fixed) this1.length = key + 1;
			this1.data[key] = 1;
		}
		this.updateMethodConstants();
	}
	,initCompiler: function(profile) {
		this._compiler = this.createCompiler(profile);
		this._compiler.set_forceSeperateMVP(this._forceSeparateMVP);
		this._compiler.set_numPointLights(this._numPointLights);
		this._compiler.set_numDirectionalLights(this._numDirectionalLights);
		this._compiler.set_numLightProbes(this._numLightProbes);
		this._compiler.set_methodSetup(this._methodSetup);
		this._compiler.set_diffuseLightSources(this._diffuseLightSources);
		this._compiler.set_specularLightSources(this._specularLightSources);
		this._compiler.setTextureSampling(this._smooth,this._repeat,this._mipmap);
		this._compiler.setConstantDataBuffers(this._vertexConstantData,this._fragmentConstantData);
		this._compiler.set_animateUVs(this._animateUVs);
		this._compiler.set_alphaPremultiplied(this._alphaPremultiplied && this._enableBlending);
		this._compiler.set_preserveAlpha(this._preserveAlpha && this._enableBlending);
		this._compiler.set_enableLightFallOff(this._enableLightFallOff);
		this._compiler.compile();
	}
	,createCompiler: function(profile) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,updateShaderProperties: function() {
		this._animatableAttributes = this._compiler.get_animatableAttributes();
		this._animationTargetRegisters = this._compiler.get_animationTargetRegisters();
		this._vertexCode = this._compiler.get_vertexCode();
		this._fragmentLightCode = this._compiler.get_fragmentLightCode();
		this._framentPostLightCode = this._compiler.get_fragmentPostLightCode();
		this._shadedTarget = this._compiler.get_shadedTarget();
		this._usingSpecularMethod = this._compiler.get_usingSpecularMethod();
		this._usesNormals = this._compiler.get_usesNormals();
		this._needUVAnimation = this._compiler.get_needUVAnimation();
		this._UVSource = this._compiler.get_UVSource();
		this._UVTarget = this._compiler.get_UVTarget();
		this.updateRegisterIndices();
		this.updateUsedOffsets();
	}
	,updateRegisterIndices: function() {
		this._uvBufferIndex = this._compiler.get_uvBufferIndex();
		this._uvTransformIndex = this._compiler.get_uvTransformIndex();
		this._secondaryUVBufferIndex = this._compiler.get_secondaryUVBufferIndex();
		this._normalBufferIndex = this._compiler.get_normalBufferIndex();
		this._tangentBufferIndex = this._compiler.get_tangentBufferIndex();
		this._lightFragmentConstantIndex = this._compiler.get_lightFragmentConstantIndex();
		this._cameraPositionIndex = this._compiler.get_cameraPositionIndex();
		this._commonsDataIndex = this._compiler.get_commonsDataIndex();
		this._sceneMatrixIndex = this._compiler.get_sceneMatrixIndex();
		this._sceneNormalMatrixIndex = this._compiler.get_sceneNormalMatrixIndex();
		this._probeWeightsIndex = this._compiler.get_probeWeightsIndex();
		this._lightProbeDiffuseIndices = this._compiler.get_lightProbeDiffuseIndices();
		this._lightProbeSpecularIndices = this._compiler.get_lightProbeSpecularIndices();
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		if(this._preserveAlpha == value) return value;
		this._preserveAlpha = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		if(this._animateUVs == value) return value;
		this._animateUVs = value;
		this.invalidateShaderProgram();
		return value;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return value;
		away3d.materials.passes.MaterialPassBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._methodSetup._normalMethod.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._methodSetup._normalMethod.set_normalMap(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._methodSetup.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._methodSetup.set_normalMethod(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._methodSetup.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._methodSetup.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._methodSetup.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._methodSetup.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._methodSetup.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._methodSetup.set_diffuseMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._methodSetup.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._methodSetup.set_specularMethod(value);
		return value;
	}
	,init: function() {
		this._methodSetup = new away3d.materials.methods.ShaderMethodSetup();
		this._methodSetup.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	}
	,dispose: function() {
		away3d.materials.passes.MaterialPassBase.prototype.dispose.call(this);
		this._methodSetup.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._methodSetup.dispose();
		this._methodSetup = null;
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) updateMaterial = true;
		var oldPasses = this._passes;
		this._passes = new Array();
		if(this._methodSetup != null) this.addPassesFromMethods();
		if(oldPasses == null || this._passes.length != oldPasses.length) {
			this._passesDirty = true;
			return;
		}
		var i = 0;
		while(i < this._passes.length) {
			if(this._passes[i] != oldPasses[i]) {
				this._passesDirty = true;
				return;
			}
			++i;
		}
		away3d.materials.passes.MaterialPassBase.prototype.invalidateShaderProgram.call(this,updateMaterial);
	}
	,addPassesFromMethods: function() {
		if(this._methodSetup._normalMethod != null && this._methodSetup._normalMethod.get_hasOutput()) this.addPasses(this._methodSetup._normalMethod.get_passes());
		if(this._methodSetup._ambientMethod != null) this.addPasses(this._methodSetup._ambientMethod.get_passes());
		if(this._methodSetup._shadowMethod != null) this.addPasses(this._methodSetup._shadowMethod.get_passes());
		if(this._methodSetup._diffuseMethod != null) this.addPasses(this._methodSetup._diffuseMethod.get_passes());
		if(this._methodSetup._specularMethod != null) this.addPasses(this._methodSetup._specularMethod.get_passes());
	}
	,addPasses: function(passes) {
		if(passes == null) return;
		var len = passes.length;
		var i = 0;
		while(i < len) {
			passes[i].set_material(this.get_material());
			passes[i].set_lightPicker(this._lightPicker);
			this._passes.push(passes[i]);
			++i;
		}
	}
	,initUVTransformData: function() {
		var this1 = this._vertexConstantData;
		var key = this._uvTransformIndex;
		if(key >= this1.length && !this1.fixed) this1.length = key + 1;
		this1.data[key] = 1;
		var this2 = this._vertexConstantData;
		var key1 = this._uvTransformIndex + 1;
		if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
		this2.data[key1] = 0;
		var this3 = this._vertexConstantData;
		var key2 = this._uvTransformIndex + 2;
		if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
		this3.data[key2] = 0;
		var this4 = this._vertexConstantData;
		var key3 = this._uvTransformIndex + 3;
		if(key3 >= this4.length && !this4.fixed) this4.length = key3 + 1;
		this4.data[key3] = 0;
		var this5 = this._vertexConstantData;
		var key4 = this._uvTransformIndex + 4;
		if(key4 >= this5.length && !this5.fixed) this5.length = key4 + 1;
		this5.data[key4] = 0;
		var this6 = this._vertexConstantData;
		var key5 = this._uvTransformIndex + 5;
		if(key5 >= this6.length && !this6.fixed) this6.length = key5 + 1;
		this6.data[key5] = 1;
		var this7 = this._vertexConstantData;
		var key6 = this._uvTransformIndex + 6;
		if(key6 >= this7.length && !this7.fixed) this7.length = key6 + 1;
		this7.data[key6] = 0;
		var this8 = this._vertexConstantData;
		var key7 = this._uvTransformIndex + 7;
		if(key7 >= this8.length && !this8.fixed) this8.length = key7 + 1;
		this8.data[key7] = 0;
	}
	,initCommonsData: function() {
		var this1 = this._fragmentConstantData;
		var key = this._commonsDataIndex;
		if(key >= this1.length && !this1.fixed) this1.length = key + 1;
		this1.data[key] = .5;
		var this2 = this._fragmentConstantData;
		var key1 = this._commonsDataIndex + 1;
		if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
		this2.data[key1] = 0;
		var this3 = this._fragmentConstantData;
		var key2 = this._commonsDataIndex + 2;
		if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
		this3.data[key2] = 0.00392156862745098;
		var this4 = this._fragmentConstantData;
		var key3 = this._commonsDataIndex + 3;
		if(key3 >= this4.length && !this4.fixed) this4.length = key3 + 1;
		this4.data[key3] = 1;
	}
	,cleanUp: function() {
		this._compiler.dispose();
		this._compiler = null;
	}
	,updateMethodConstants: function() {
		if(this._methodSetup._normalMethod != null) this._methodSetup._normalMethod.initConstants(this._methodSetup._normalMethodVO);
		if(this._methodSetup._diffuseMethod != null) this._methodSetup._diffuseMethod.initConstants(this._methodSetup._diffuseMethodVO);
		if(this._methodSetup._ambientMethod != null) this._methodSetup._ambientMethod.initConstants(this._methodSetup._ambientMethodVO);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.initConstants(this._methodSetup._specularMethodVO);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.initConstants(this._methodSetup._shadowMethodVO);
	}
	,updateLightConstants: function() {
	}
	,updateProbes: function(stage3DProxy) {
	}
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,getVertexCode: function() {
		return this._vertexCode;
	}
	,getFragmentCode: function(animatorCode) {
		return this._fragmentLightCode + animatorCode + this._framentPostLightCode;
	}
	,activate: function(stage3DProxy,camera) {
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._usesNormals) this._methodSetup._normalMethod.activate(this._methodSetup._normalMethodVO,stage3DProxy);
		this._methodSetup._ambientMethod.activate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.activate(this._methodSetup._shadowMethodVO,stage3DProxy);
		this._methodSetup._diffuseMethod.activate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.activate(this._methodSetup._specularMethodVO,stage3DProxy);
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var i = 0;
		var context = stage3DProxy._context3D;
		if(this._uvBufferIndex >= 0) renderable.activateUVBuffer(this._uvBufferIndex,stage3DProxy);
		if(this._secondaryUVBufferIndex >= 0) renderable.activateSecondaryUVBuffer(this._secondaryUVBufferIndex,stage3DProxy);
		if(this._normalBufferIndex >= 0) renderable.activateVertexNormalBuffer(this._normalBufferIndex,stage3DProxy);
		if(this._tangentBufferIndex >= 0) renderable.activateVertexTangentBuffer(this._tangentBufferIndex,stage3DProxy);
		if(this._animateUVs) {
			var uvTransform = renderable.get_uvTransform();
			if(uvTransform != null) {
				var this1 = this._vertexConstantData;
				var key = this._uvTransformIndex;
				if(key >= this1.length && !this1.fixed) this1.length = key + 1;
				this1.data[key] = uvTransform.a;
				var this2 = this._vertexConstantData;
				var key1 = this._uvTransformIndex + 1;
				if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
				this2.data[key1] = uvTransform.b;
				var this3 = this._vertexConstantData;
				var key2 = this._uvTransformIndex + 3;
				if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
				this3.data[key2] = uvTransform.tx;
				var this4 = this._vertexConstantData;
				var key3 = this._uvTransformIndex + 4;
				if(key3 >= this4.length && !this4.fixed) this4.length = key3 + 1;
				this4.data[key3] = uvTransform.c;
				var this5 = this._vertexConstantData;
				var key4 = this._uvTransformIndex + 5;
				if(key4 >= this5.length && !this5.fixed) this5.length = key4 + 1;
				this5.data[key4] = uvTransform.d;
				var this6 = this._vertexConstantData;
				var key5 = this._uvTransformIndex + 7;
				if(key5 >= this6.length && !this6.fixed) this6.length = key5 + 1;
				this6.data[key5] = uvTransform.ty;
			} else {
				var this7 = this._vertexConstantData;
				var key6 = this._uvTransformIndex;
				if(key6 >= this7.length && !this7.fixed) this7.length = key6 + 1;
				this7.data[key6] = 1;
				var this8 = this._vertexConstantData;
				var key7 = this._uvTransformIndex + 1;
				if(key7 >= this8.length && !this8.fixed) this8.length = key7 + 1;
				this8.data[key7] = 0;
				var this9 = this._vertexConstantData;
				var key8 = this._uvTransformIndex + 3;
				if(key8 >= this9.length && !this9.fixed) this9.length = key8 + 1;
				this9.data[key8] = 0;
				var this10 = this._vertexConstantData;
				var key9 = this._uvTransformIndex + 4;
				if(key9 >= this10.length && !this10.fixed) this10.length = key9 + 1;
				this10.data[key9] = 0;
				var this11 = this._vertexConstantData;
				var key10 = this._uvTransformIndex + 5;
				if(key10 >= this11.length && !this11.fixed) this11.length = key10 + 1;
				this11.data[key10] = 1;
				var this12 = this._vertexConstantData;
				var key11 = this._uvTransformIndex + 7;
				if(key11 >= this12.length && !this12.fixed) this12.length = key11 + 1;
				this12.data[key11] = 0;
			}
		}
		this._ambientLightR = this._ambientLightG = this._ambientLightB = 0;
		if(this.usesLights()) this.updateLightConstants();
		if(this.usesProbes()) this.updateProbes(stage3DProxy);
		if(this._sceneMatrixIndex >= 0) {
			renderable.getRenderSceneTransform(camera).copyRawDataTo(this._vertexConstantData,this._sceneMatrixIndex,true);
			viewProjection.copyRawDataTo(this._vertexConstantData,0,true);
		} else {
			var matrix3D = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
			matrix3D.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix3D.append(viewProjection);
			matrix3D.copyRawDataTo(this._vertexConstantData,0,true);
		}
		if(this._sceneNormalMatrixIndex >= 0) renderable.get_inverseSceneTransform().copyRawDataTo(this._vertexConstantData,this._sceneNormalMatrixIndex,false);
		if(this._usesNormals) this._methodSetup._normalMethod.setRenderState(this._methodSetup._normalMethodVO,renderable,stage3DProxy,camera);
		var ambientMethod = this._methodSetup._ambientMethod;
		ambientMethod._lightAmbientR = this._ambientLightR;
		ambientMethod._lightAmbientG = this._ambientLightG;
		ambientMethod._lightAmbientB = this._ambientLightB;
		ambientMethod.setRenderState(this._methodSetup._ambientMethodVO,renderable,stage3DProxy,camera);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.setRenderState(this._methodSetup._shadowMethodVO,renderable,stage3DProxy,camera);
		this._methodSetup._diffuseMethod.setRenderState(this._methodSetup._diffuseMethodVO,renderable,stage3DProxy,camera);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.setRenderState(this._methodSetup._specularMethodVO,renderable,stage3DProxy,camera);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.setRenderState(this._methodSetup._colorTransformMethodVO,renderable,stage3DProxy,camera);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		i = 0;
		while(i < len) {
			var set = methods[i];
			set.method.setRenderState(set.data,renderable,stage3DProxy,camera);
			++i;
		}
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,0,(function($this) {
			var $r;
			var this13 = $this._vertexConstantData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this13.data.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					value.push(this13.data[i1]);
				}
			}
			$r = value;
			return $r;
		}(this)),this._numUsedVertexConstants);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this14 = $this._fragmentConstantData;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this14.data.length;
				while(_g11 < _g2) {
					var i2 = _g11++;
					value1.push(this14.data[i2]);
				}
			}
			$r = value1;
			return $r;
		}(this)),this._numUsedFragmentConstants);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,usesProbes: function() {
		return this._numLightProbes > 0 && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesLights: function() {
		return (this._numPointLights > 0 || this._numDirectionalLights > 0) && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,deactivate: function(stage3DProxy) {
		away3d.materials.passes.MaterialPassBase.prototype.deactivate.call(this,stage3DProxy);
		if(this._usesNormals) this._methodSetup._normalMethod.deactivate(this._methodSetup._normalMethodVO,stage3DProxy);
		this._methodSetup._ambientMethod.deactivate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.deactivate(this._methodSetup._shadowMethodVO,stage3DProxy);
		this._methodSetup._diffuseMethod.deactivate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.deactivate(this._methodSetup._specularMethodVO,stage3DProxy);
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,__class__: away3d.materials.passes.CompiledPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs",set_preserveAlpha:"set_preserveAlpha",get_preserveAlpha:"get_preserveAlpha",get_numLightProbes:"get_numLightProbes",get_numDirectionalLights:"get_numDirectionalLights",get_numPointLights:"get_numPointLights",set_forceSeparateMVP:"set_forceSeparateMVP",get_forceSeparateMVP:"get_forceSeparateMVP",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"})
});
away3d.materials.passes.DepthMapPass = function() {
	this._alphaThreshold = 0;
	away3d.materials.passes.MaterialPassBase.call(this);
	this._data = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
};
$hxClasses["away3d.materials.passes.DepthMapPass"] = away3d.materials.passes.DepthMapPass;
away3d.materials.passes.DepthMapPass.__name__ = ["away3d","materials","passes","DepthMapPass"];
away3d.materials.passes.DepthMapPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.DepthMapPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		this._data[8] = this._alphaThreshold;
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code;
		code = "m44 vt1, vt0, vc0\t\t\n" + "mov op, vt1\t\n";
		if(this._alphaThreshold > 0) {
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
			code += "mov v0, vt1\n" + "mov v1, va1\n";
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
			code += "mov v0, vt1\n";
		}
		return code;
	}
	,getFragmentCode: function(code) {
		var wrap;
		if(this._repeat) wrap = "wrap"; else wrap = "clamp";
		var filter;
		if(this._smooth) if(this._mipmap) filter = "linear,miplinear"; else filter = "linear"; else if(this._mipmap) filter = "nearest,mipnearest"; else filter = "nearest";
		var codeF = "div ft2, v0, v0.w\t\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var format;
			var _g = this._alphaMask.get_format();
			switch(_g[1]) {
			case 1:
				format = "dxt1,";
				break;
			case 2:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			codeF += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		codeF += "sub oc, ft0, ft1\t\t\n";
		return codeF;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._alphaThreshold > 0) renderable.activateUVBuffer(1,stage3DProxy);
		var context = stage3DProxy._context3D;
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		matrix.copyFrom(renderable.getRenderSceneTransform(camera));
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,this._data,3);
		} else context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,this._data,2);
	}
	,__class__: away3d.materials.passes.DepthMapPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_alphaMask:"set_alphaMask",get_alphaMask:"get_alphaMask",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold"})
});
away3d.materials.passes.DistanceMapPass = function() {
	away3d.materials.passes.MaterialPassBase.call(this);
	this._fragmentData = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
	this._vertexData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),4,0);
	this._vertexData[3] = 1;
	this._numUsedVertexConstants = 9;
};
$hxClasses["away3d.materials.passes.DistanceMapPass"] = away3d.materials.passes.DistanceMapPass;
away3d.materials.passes.DistanceMapPass.__name__ = ["away3d","materials","passes","DistanceMapPass"];
away3d.materials.passes.DistanceMapPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.DistanceMapPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		this._fragmentData[8] = this._alphaThreshold;
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code;
		code = "m44 op, vt0, vc0\t\t\n" + "m44 vt1, vt0, vc5\t\t\n" + "sub v0, vt1, vc9\t\t\n";
		if(this._alphaThreshold > 0) {
			code += "mov v1, va1\n";
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
		}
		return code;
	}
	,getFragmentCode: function(animationCode) {
		var code;
		var wrap;
		if(this._repeat) wrap = "wrap"; else wrap = "clamp";
		var filter;
		if(this._smooth) if(this._mipmap) filter = "linear,miplinear"; else filter = "linear"; else if(this._mipmap) filter = "nearest,mipnearest"; else filter = "nearest";
		code = "dp3 ft2.z, v0.xyz, v0.xyz\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var format;
			var _sw1_ = this._alphaMask.get_format();
			switch(_sw1_[1]) {
			case 1:
				format = "dxt1,";
				break;
			case 2:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			code += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		code += "sub oc, ft0, ft1\t\t\n";
		return code;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		var pos = camera.get_scenePosition();
		this._vertexData[0] = pos.x;
		this._vertexData[1] = pos.y;
		this._vertexData[2] = pos.z;
		this._vertexData[3] = 1;
		var sceneTransform = renderable.getRenderSceneTransform(camera);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,5,sceneTransform,true);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,9,this._vertexData,1);
		if(this._alphaThreshold > 0) renderable.activateUVBuffer(1,stage3DProxy);
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		matrix.copyFrom(sceneTransform);
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		var f = camera.get_lens().get_far();
		f = 1 / (2 * f * f);
		this._fragmentData[0] = f;
		this._fragmentData[1] = 255.0 * f;
		this._fragmentData[2] = 65025.0 * f;
		this._fragmentData[3] = 16581375.0 * f;
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,this._fragmentData,3);
		} else context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,this._fragmentData,2);
	}
	,__class__: away3d.materials.passes.DistanceMapPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_alphaMask:"set_alphaMask",get_alphaMask:"get_alphaMask",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold"})
});
away3d.materials.passes.SegmentPass = function(thickness) {
	this._constants = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),4,0);
	this._calcMatrix = new openfl.geom.Matrix3D();
	this._thickness = thickness;
	this._constants[1] = 0.00392156862745098;
	away3d.materials.passes.MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.SegmentPass"] = away3d.materials.passes.SegmentPass;
away3d.materials.passes.SegmentPass.__name__ = ["away3d","materials","passes","SegmentPass"];
away3d.materials.passes.SegmentPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.SegmentPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	getVertexCode: function() {
		return "m44 vt0, va0, vc8\t\t\t\n" + "m44 vt1, va1, vc8\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "slt vt5.x, vt0.z, vc7.z\t\t\t\n" + "sub vt5.y, vc5.x, vt5.x\t\t\t\n" + "add vt4.x, vt0.z, vc7.z\t\t\t\n" + "sub vt4.y, vt0.z, vt1.z\t\t\t\n" + "seq vt4.z, vt4.y vc6.x\t\t\t\n" + "add vt4.y, vt4.y, vt4.z\t\t\t\n" + "div vt4.z, vt4.x, vt4.y\t\t\t\n" + "mul vt4.xyz, vt4.zzz, vt2.xyz\t\n" + "add vt3.xyz, vt0.xyz, vt4.xyz\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "mul vt0, vt0, vt5.yyyy\t\t\t\n" + "mul vt3, vt3, vt5.xxxx\t\t\t\n" + "add vt0, vt0, vt3\t\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "nrm vt2.xyz, vt2.xyz\t\t\t\n" + "nrm vt5.xyz, vt0.xyz\t\t\t\n" + "mov vt5.w, vc5.x\t\t\t\t\n" + "crs vt3.xyz, vt2, vt5\t\t\t\n" + "nrm vt3.xyz, vt3.xyz\t\t\t\n" + "mul vt3.xyz, vt3.xyz, va2.xxx\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "dp3 vt4.x, vt0, vc6\t\t\t\n" + "mul vt4.x, vt4.x, vc7.x\t\t\t\n" + "mul vt3.xyz, vt3.xyz, vt4.xxx\t\n" + "add vt0.xyz, vt0.xyz, vt3.xyz\t\n" + "m44 op, vt0, vc0\t\t\t\n" + "mov v0, va3\t\t\t\t\n";
	}
	,getFragmentCode: function(animationCode) {
		return "mov oc, v0\n";
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		this._calcMatrix.copyFrom(renderable.get_sourceEntity().get_sceneTransform());
		this._calcMatrix.append(camera.get_inverseSceneTransform());
		var subSetCount = (js.Boot.__cast(renderable , away3d.entities.SegmentSet)).get_subSetCount();
		if((js.Boot.__cast(renderable , away3d.entities.SegmentSet)).get_hasData()) {
			var i = 0;
			while(i < subSetCount) {
				renderable.activateVertexBuffer(i,stage3DProxy);
				context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,8,this._calcMatrix,true);
				context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
				++i;
			}
		}
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(stage3DProxy.get_scissorRect() != null) this._constants[0] = this._thickness / Math.min(stage3DProxy.get_scissorRect().width,stage3DProxy.get_scissorRect().height); else this._constants[0] = this._thickness / Math.min(stage3DProxy.get_width(),stage3DProxy.get_height());
		this._constants[2] = camera.get_lens().get_near();
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,5,away3d.materials.passes.SegmentPass.ONE_VECTOR);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,6,away3d.materials.passes.SegmentPass.FRONT_VECTOR);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,7,this._constants);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,camera.get_lens().get_matrix(),true);
	}
	,deactivate: function(stage3DProxy) {
		var context = stage3DProxy._context3D;
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(2,null);
		context.setVertexBufferAt(3,null);
	}
	,__class__: away3d.materials.passes.SegmentPass
});
away3d.materials.passes.SuperShaderPass = function(material) {
	this._includeCasters = true;
	away3d.materials.passes.CompiledPass.call(this,material);
	this._needFragmentAnimation = true;
};
$hxClasses["away3d.materials.passes.SuperShaderPass"] = away3d.materials.passes.SuperShaderPass;
away3d.materials.passes.SuperShaderPass.__name__ = ["away3d","materials","passes","SuperShaderPass"];
away3d.materials.passes.SuperShaderPass.__super__ = away3d.materials.passes.CompiledPass;
away3d.materials.passes.SuperShaderPass.prototype = $extend(away3d.materials.passes.CompiledPass.prototype,{
	createCompiler: function(profile) {
		return new away3d.materials.compilation.SuperShaderCompiler(profile);
	}
	,get_includeCasters: function() {
		return this._includeCasters;
	}
	,set_includeCasters: function(value) {
		if(this._includeCasters == value) return this._includeCasters;
		this._includeCasters = value;
		this.invalidateShaderProgram();
		return this._includeCasters;
	}
	,get_colorTransform: function() {
		if(this._methodSetup.get_colorTransformMethod() != null) return this._methodSetup._colorTransformMethod.get_colorTransform(); else return null;
	}
	,set_colorTransform: function(value) {
		if(value != null) {
			if(this.get_colorTransformMethod() == null) this.set_colorTransformMethod(new away3d.materials.methods.ColorTransformMethod());
			this._methodSetup._colorTransformMethod.set_colorTransform(value);
		} else if(value == null) {
			if(this._methodSetup._colorTransformMethod != null) this.set_colorTransformMethod(null);
			this.set_colorTransformMethod(this._methodSetup._colorTransformMethod = null);
		}
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._methodSetup.get_colorTransformMethod();
	}
	,set_colorTransformMethod: function(value) {
		this._methodSetup.set_colorTransformMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._methodSetup.addMethod(method);
	}
	,get_numMethods: function() {
		return this._methodSetup.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._methodSetup.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._methodSetup.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._methodSetup.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._methodSetup.removeMethod(method);
	}
	,updateLights: function() {
		away3d.materials.passes.CompiledPass.prototype.updateLights.call(this);
		if(this._lightPicker != null && !this._ignoreLights) {
			this._numPointLights = this._lightPicker.get_numPointLights();
			this._numDirectionalLights = this._lightPicker.get_numDirectionalLights();
			this._numLightProbes = this._lightPicker.get_numLightProbes();
			if(this._includeCasters) {
				this._numPointLights += this._lightPicker.get_numCastingPointLights();
				this._numDirectionalLights += this._lightPicker.get_numCastingDirectionalLights();
			}
		} else {
			this._numPointLights = 0;
			this._numDirectionalLights = 0;
			this._numLightProbes = 0;
		}
		this.invalidateShaderProgram();
	}
	,activate: function(stage3DProxy,camera) {
		away3d.materials.passes.CompiledPass.prototype.activate.call(this,stage3DProxy,camera);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.activate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			var set = methods[i];
			set.method.activate(set.data,stage3DProxy);
		}
		if(this._cameraPositionIndex >= 0) {
			var pos = camera.get_scenePosition();
			var this1 = this._vertexConstantData;
			var key = this._cameraPositionIndex;
			if(key >= this1.length && !this1.fixed) this1.length = key + 1;
			this1.data[key] = pos.x;
			var this2 = this._vertexConstantData;
			var key1 = this._cameraPositionIndex + 1;
			if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
			this2.data[key1] = pos.y;
			var this3 = this._vertexConstantData;
			var key2 = this._cameraPositionIndex + 2;
			if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
			this3.data[key2] = pos.z;
		}
	}
	,deactivate: function(stage3DProxy) {
		away3d.materials.passes.CompiledPass.prototype.deactivate.call(this,stage3DProxy);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.deactivate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		var set;
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			set = methods[i1];
			set.method.deactivate(set.data,stage3DProxy);
		}
	}
	,addPassesFromMethods: function() {
		away3d.materials.passes.CompiledPass.prototype.addPassesFromMethods.call(this);
		if(this._methodSetup._colorTransformMethod != null) this.addPasses(this._methodSetup._colorTransformMethod.get_passes());
		var methods = this._methodSetup._methods;
		var i = 0;
		var _g1 = 0;
		var _g = methods.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.addPasses(methods[i1].method.get_passes());
		}
	}
	,usesProbesForSpecular: function() {
		return this._numLightProbes > 0 && (this._specularLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbesForDiffuse: function() {
		return this._numLightProbes > 0 && (this._diffuseLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,updateMethodConstants: function() {
		away3d.materials.passes.CompiledPass.prototype.updateMethodConstants.call(this);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.initConstants(this._methodSetup._colorTransformMethodVO);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			methods[i1].method.initConstants(methods[i1].data);
		}
	}
	,updateLightConstants: function() {
		var dirLight;
		var pointLight;
		var i;
		var k;
		var len;
		var dirPos;
		var total = 0;
		var numLightTypes;
		if(this._includeCasters) numLightTypes = 2; else numLightTypes = 1;
		k = this._lightFragmentConstantIndex;
		var castVal;
		var _g = 0;
		while(_g < numLightTypes) {
			var castVal1 = _g++;
			var dirLights;
			if(castVal1 != 0) dirLights = this._lightPicker.get_castingDirectionalLights(); else dirLights = this._lightPicker.get_directionalLights();
			len = dirLights.length;
			total += len;
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				dirLight = dirLights[i1];
				dirPos = dirLight.get_sceneDirection();
				this._ambientLightR += dirLight._ambientR;
				this._ambientLightG += dirLight._ambientG;
				this._ambientLightB += dirLight._ambientB;
				var this1 = this._fragmentConstantData;
				var key = k++;
				if(key >= this1.length && !this1.fixed) this1.length = key + 1;
				this1.data[key] = -dirPos.x;
				var this2 = this._fragmentConstantData;
				var key1 = k++;
				if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
				this2.data[key1] = -dirPos.y;
				var this3 = this._fragmentConstantData;
				var key2 = k++;
				if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
				this3.data[key2] = -dirPos.z;
				var this4 = this._fragmentConstantData;
				var key3 = k++;
				if(key3 >= this4.length && !this4.fixed) this4.length = key3 + 1;
				this4.data[key3] = 1;
				var this5 = this._fragmentConstantData;
				var key4 = k++;
				if(key4 >= this5.length && !this5.fixed) this5.length = key4 + 1;
				this5.data[key4] = dirLight._diffuseR;
				var this6 = this._fragmentConstantData;
				var key5 = k++;
				if(key5 >= this6.length && !this6.fixed) this6.length = key5 + 1;
				this6.data[key5] = dirLight._diffuseG;
				var this7 = this._fragmentConstantData;
				var key6 = k++;
				if(key6 >= this7.length && !this7.fixed) this7.length = key6 + 1;
				this7.data[key6] = dirLight._diffuseB;
				var this8 = this._fragmentConstantData;
				var key7 = k++;
				if(key7 >= this8.length && !this8.fixed) this8.length = key7 + 1;
				this8.data[key7] = 1;
				var this9 = this._fragmentConstantData;
				var key8 = k++;
				if(key8 >= this9.length && !this9.fixed) this9.length = key8 + 1;
				this9.data[key8] = dirLight._specularR;
				var this10 = this._fragmentConstantData;
				var key9 = k++;
				if(key9 >= this10.length && !this10.fixed) this10.length = key9 + 1;
				this10.data[key9] = dirLight._specularG;
				var this11 = this._fragmentConstantData;
				var key10 = k++;
				if(key10 >= this11.length && !this11.fixed) this11.length = key10 + 1;
				this11.data[key10] = dirLight._specularB;
				var this12 = this._fragmentConstantData;
				var key11 = k++;
				if(key11 >= this12.length && !this12.fixed) this12.length = key11 + 1;
				this12.data[key11] = 1;
			}
		}
		if(this._numDirectionalLights > total) {
			i = k + (this._numDirectionalLights - total) * 12;
			while((function($this) {
				var $r;
				var aNeg = i < 0;
				var bNeg = k < 0;
				$r = aNeg != bNeg?aNeg:i > k;
				return $r;
			}(this))) {
				var this13 = this._fragmentConstantData;
				var key12 = k++;
				if(key12 >= this13.length && !this13.fixed) this13.length = key12 + 1;
				this13.data[key12] = 0;
			}
		}
		total = 0;
		var _g2 = 0;
		while(_g2 < numLightTypes) {
			var castVal2 = _g2++;
			var pointLights;
			if(castVal2 != 0) pointLights = this._lightPicker.get_castingPointLights(); else pointLights = this._lightPicker.get_pointLights();
			len = pointLights.length;
			var _g11 = 0;
			while(_g11 < len) {
				var i2 = _g11++;
				pointLight = pointLights[i2];
				dirPos = pointLight.get_scenePosition();
				this._ambientLightR += pointLight._ambientR;
				this._ambientLightG += pointLight._ambientG;
				this._ambientLightB += pointLight._ambientB;
				var this14 = this._fragmentConstantData;
				var key13 = k++;
				if(key13 >= this14.length && !this14.fixed) this14.length = key13 + 1;
				this14.data[key13] = dirPos.x;
				var this15 = this._fragmentConstantData;
				var key14 = k++;
				if(key14 >= this15.length && !this15.fixed) this15.length = key14 + 1;
				this15.data[key14] = dirPos.y;
				var this16 = this._fragmentConstantData;
				var key15 = k++;
				if(key15 >= this16.length && !this16.fixed) this16.length = key15 + 1;
				this16.data[key15] = dirPos.z;
				var this17 = this._fragmentConstantData;
				var key16 = k++;
				if(key16 >= this17.length && !this17.fixed) this17.length = key16 + 1;
				this17.data[key16] = 1;
				var this18 = this._fragmentConstantData;
				var key17 = k++;
				if(key17 >= this18.length && !this18.fixed) this18.length = key17 + 1;
				this18.data[key17] = pointLight._diffuseR;
				var this19 = this._fragmentConstantData;
				var key18 = k++;
				if(key18 >= this19.length && !this19.fixed) this19.length = key18 + 1;
				this19.data[key18] = pointLight._diffuseG;
				var this20 = this._fragmentConstantData;
				var key19 = k++;
				if(key19 >= this20.length && !this20.fixed) this20.length = key19 + 1;
				this20.data[key19] = pointLight._diffuseB;
				var this21 = this._fragmentConstantData;
				var key20 = k++;
				if(key20 >= this21.length && !this21.fixed) this21.length = key20 + 1;
				this21.data[key20] = pointLight._radius * pointLight._radius;
				var this22 = this._fragmentConstantData;
				var key21 = k++;
				if(key21 >= this22.length && !this22.fixed) this22.length = key21 + 1;
				this22.data[key21] = pointLight._specularR;
				var this23 = this._fragmentConstantData;
				var key22 = k++;
				if(key22 >= this23.length && !this23.fixed) this23.length = key22 + 1;
				this23.data[key22] = pointLight._specularG;
				var this24 = this._fragmentConstantData;
				var key23 = k++;
				if(key23 >= this24.length && !this24.fixed) this24.length = key23 + 1;
				this24.data[key23] = pointLight._specularB;
				var this25 = this._fragmentConstantData;
				var key24 = k++;
				if(key24 >= this25.length && !this25.fixed) this25.length = key24 + 1;
				this25.data[key24] = pointLight._fallOffFactor;
			}
		}
		if(this._numPointLights > total) {
			i = k + (total - this._numPointLights) * 12;
			var _g3 = k;
			while(_g3 < i) {
				var k1 = _g3++;
				var this26 = this._fragmentConstantData;
				if(k1 >= this26.length && !this26.fixed) this26.length = k1 + 1;
				this26.data[k1] = 0;
			}
		}
	}
	,updateProbes: function(stage3DProxy) {
		var probe;
		var lightProbes = this._lightPicker.get_lightProbes();
		var weights = this._lightPicker.get_lightProbeWeights();
		var len = lightProbes.length;
		var addDiff = this.usesProbesForDiffuse();
		var addSpec = this._methodSetup._specularMethod != null && this.usesProbesForSpecular();
		var context = stage3DProxy._context3D;
		if(!(addDiff || addSpec)) return;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			probe = lightProbes[i1];
			if(addDiff) context.setTextureAt(this._lightProbeDiffuseIndices[i1],probe.get_diffuseMap().getTextureForStage3D(stage3DProxy));
			if(addSpec) context.setTextureAt(this._lightProbeSpecularIndices[i1],probe.get_specularMap().getTextureForStage3D(stage3DProxy));
		}
		var this1 = this._fragmentConstantData;
		var key = this._probeWeightsIndex;
		if(key >= this1.length && !this1.fixed) this1.length = key + 1;
		this1.data[key] = weights[0];
		var this2 = this._fragmentConstantData;
		var key1 = this._probeWeightsIndex + 1;
		if(key1 >= this2.length && !this2.fixed) this2.length = key1 + 1;
		this2.data[key1] = weights[1];
		var this3 = this._fragmentConstantData;
		var key2 = this._probeWeightsIndex + 2;
		if(key2 >= this3.length && !this3.fixed) this3.length = key2 + 1;
		this3.data[key2] = weights[2];
		var this4 = this._fragmentConstantData;
		var key3 = this._probeWeightsIndex + 3;
		if(key3 >= this4.length && !this4.fixed) this4.length = key3 + 1;
		this4.data[key3] = weights[3];
	}
	,get_ignoreLights: function() {
		return this._ignoreLights;
	}
	,set_ignoreLights: function(ignoreLights) {
		this._ignoreLights = ignoreLights;
		return this._ignoreLights;
	}
	,__class__: away3d.materials.passes.SuperShaderPass
	,__properties__: $extend(away3d.materials.passes.CompiledPass.prototype.__properties__,{set_ignoreLights:"set_ignoreLights",get_ignoreLights:"get_ignoreLights",get_numMethods:"get_numMethods",set_colorTransformMethod:"set_colorTransformMethod",get_colorTransformMethod:"get_colorTransformMethod",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_includeCasters:"set_includeCasters",get_includeCasters:"get_includeCasters"})
});
away3d.materials.utils = {};
away3d.materials.utils.DefaultMaterialManager = function() { };
$hxClasses["away3d.materials.utils.DefaultMaterialManager"] = away3d.materials.utils.DefaultMaterialManager;
away3d.materials.utils.DefaultMaterialManager.__name__ = ["away3d","materials","utils","DefaultMaterialManager"];
away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData = null;
away3d.materials.utils.DefaultMaterialManager._defaultMaterial = null;
away3d.materials.utils.DefaultMaterialManager._defaultTexture = null;
away3d.materials.utils.DefaultMaterialManager.getDefaultMaterial = function(renderable) {
	if(away3d.materials.utils.DefaultMaterialManager._defaultTexture == null) away3d.materials.utils.DefaultMaterialManager.createDefaultTexture();
	if(away3d.materials.utils.DefaultMaterialManager._defaultMaterial == null) away3d.materials.utils.DefaultMaterialManager.createDefaultMaterial();
	return away3d.materials.utils.DefaultMaterialManager._defaultMaterial;
};
away3d.materials.utils.DefaultMaterialManager.getDefaultTexture = function(renderable) {
	if(away3d.materials.utils.DefaultMaterialManager._defaultTexture == null) away3d.materials.utils.DefaultMaterialManager.createDefaultTexture();
	return away3d.materials.utils.DefaultMaterialManager._defaultTexture;
};
away3d.materials.utils.DefaultMaterialManager.createDefaultTexture = function() {
	away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData = new openfl.display.BitmapData(8,8,false,0);
	var i = 0;
	var j;
	i = 0;
	while(i < 8) {
		j = 0;
		while(j < 8) {
			if((j & 1 ^ i & 1) == 1) away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData.setPixel(i,j,16777215);
			j++;
		}
		i++;
	}
	away3d.materials.utils.DefaultMaterialManager._defaultTexture = new away3d.textures.BitmapTexture(away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData);
	away3d.materials.utils.DefaultMaterialManager._defaultTexture.set_name("defaultTexture");
};
away3d.materials.utils.DefaultMaterialManager.createDefaultMaterial = function() {
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial = new away3d.materials.TextureMaterial(away3d.materials.utils.DefaultMaterialManager._defaultTexture);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_mipmap(false);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_smooth(false);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_name("defaultMaterial");
};
away3d.materials.utils.MipmapGenerator = function() { };
$hxClasses["away3d.materials.utils.MipmapGenerator"] = away3d.materials.utils.MipmapGenerator;
away3d.materials.utils.MipmapGenerator.__name__ = ["away3d","materials","utils","MipmapGenerator"];
away3d.materials.utils.MipmapGenerator.generateMipMaps = function(source,target,mipmap,alpha,side) {
	if(side == null) side = -1;
	if(alpha == null) alpha = false;
	var w = source.width;
	var h = source.height;
	var i = 0;
	var regen = mipmap != null;
	away3d.materials.utils.MipmapGenerator._rect.width = w;
	away3d.materials.utils.MipmapGenerator._rect.height = h;
	while(w >= 1 || h >= 1) {
		mipmap = new openfl.display.BitmapData(w > 1?w:1,h > 1?h:1,alpha,0);
		away3d.materials.utils.MipmapGenerator._matrix.a = away3d.materials.utils.MipmapGenerator._rect.width / source.width;
		away3d.materials.utils.MipmapGenerator._matrix.d = away3d.materials.utils.MipmapGenerator._rect.height / source.height;
		mipmap.draw(source,away3d.materials.utils.MipmapGenerator._matrix,null,null,null,true);
		if(js.Boot.__instanceof(target,openfl.display3D.textures.Texture)) (js.Boot.__cast(target , openfl.display3D.textures.Texture)).uploadFromBitmapData(mipmap,i++); else (js.Boot.__cast(target , openfl.display3D.textures.CubeTexture)).uploadFromBitmapData(mipmap,side,i++);
		w >>= 1;
		h >>= 1;
		if(w > 1) away3d.materials.utils.MipmapGenerator._rect.width = w; else away3d.materials.utils.MipmapGenerator._rect.width = 1;
		if(h > 1) away3d.materials.utils.MipmapGenerator._rect.height = h; else away3d.materials.utils.MipmapGenerator._rect.height = 1;
	}
};
away3d.primitives = {};
away3d.primitives.PrimitiveBase = function() {
	away3d.core.base.Geometry.call(this);
	this._geomDirty = true;
	this._uvDirty = true;
	this._subGeometry = new away3d.core.base.CompactSubGeometry();
	this._subGeometry.set_autoGenerateDummyUVs(false);
	this.addSubGeometry(this._subGeometry);
};
$hxClasses["away3d.primitives.PrimitiveBase"] = away3d.primitives.PrimitiveBase;
away3d.primitives.PrimitiveBase.__name__ = ["away3d","primitives","PrimitiveBase"];
away3d.primitives.PrimitiveBase.__super__ = away3d.core.base.Geometry;
away3d.primitives.PrimitiveBase.prototype = $extend(away3d.core.base.Geometry.prototype,{
	get_subGeometries: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
		return away3d.core.base.Geometry.prototype.get_subGeometries.call(this);
	}
	,clone: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
		return away3d.core.base.Geometry.prototype.clone.call(this);
	}
	,scale: function(scale) {
		if(this._geomDirty) this.updateGeometry();
		away3d.core.base.Geometry.prototype.scale.call(this,scale);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		if(this._uvDirty) this.updateUVs();
		away3d.core.base.Geometry.prototype.scaleUV.call(this,scaleU,scaleV);
	}
	,applyTransformation: function(transform) {
		if(this._geomDirty) this.updateGeometry();
		away3d.core.base.Geometry.prototype.applyTransformation.call(this,transform);
	}
	,buildGeometry: function(target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,buildUVs: function(target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
	}
	,invalidateUVs: function() {
		this._uvDirty = true;
	}
	,updateGeometry: function() {
		this.buildGeometry(this._subGeometry);
		this._geomDirty = false;
	}
	,updateUVs: function() {
		this.buildUVs(this._subGeometry);
		this._uvDirty = false;
	}
	,validate: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
	}
	,__class__: away3d.primitives.PrimitiveBase
});
away3d.primitives.CubeGeometry = function(width,height,depth,segmentsW,segmentsH,segmentsD,tile6) {
	if(tile6 == null) tile6 = true;
	if(segmentsD == null) segmentsD = 1;
	if(segmentsH == null) segmentsH = 1;
	if(segmentsW == null) segmentsW = 1;
	if(depth == null) depth = 100;
	if(height == null) height = 100;
	if(width == null) width = 100;
	away3d.primitives.PrimitiveBase.call(this);
	this._width = width;
	this._height = height;
	this._depth = depth;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._segmentsD = segmentsD;
	this._tile6 = tile6;
};
$hxClasses["away3d.primitives.CubeGeometry"] = away3d.primitives.CubeGeometry;
away3d.primitives.CubeGeometry.__name__ = ["away3d","primitives","CubeGeometry"];
away3d.primitives.CubeGeometry.__super__ = away3d.primitives.PrimitiveBase;
away3d.primitives.CubeGeometry.prototype = $extend(away3d.primitives.PrimitiveBase.prototype,{
	get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,get_tile6: function() {
		return this._tile6;
	}
	,set_tile6: function(value) {
		this._tile6 = value;
		this.invalidateUVs();
		return value;
	}
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsD: function() {
		return this._segmentsD;
	}
	,set_segmentsD: function(value) {
		this._segmentsD = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,buildGeometry: function(target) {
		var data;
		var indices;
		var tl = 0;
		var tr = 0;
		var bl = 0;
		var br = 0;
		var i = 0;
		var j = 0;
		var inc = 0;
		var vidx = 0;
		var fidx = 0;
		var hw = 0;
		var hh = 0;
		var hd = 0;
		var dw = 0;
		var dh = 0;
		var dd = 0;
		var outer_pos;
		var numVerts = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2 | 0;
		var stride = target.get_vertexStride();
		var skip = stride - 9;
		if(numVerts == target.get_numVertices()) {
			data = target.get_vertexData();
			indices = target.get_indexData();
			if(indices == null) indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12 | 0,0);
		} else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),numVerts * stride,0);
			indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12 | 0,0);
			this.invalidateUVs();
		}
		vidx = target.get_vertexOffset();
		fidx = 0;
		hw = this._width / 2;
		hh = this._height / 2;
		hd = this._depth / 2;
		dw = this._width / this._segmentsW;
		dh = this._height / this._segmentsH;
		dd = this._depth / this._segmentsD;
		i = 0;
		while(i <= this._segmentsW) {
			outer_pos = -hw + i * dw;
			j = 0;
			while(j <= this._segmentsH) {
				data[vidx++] = outer_pos;
				data[vidx++] = -hh + j * dh;
				data[vidx++] = -hd;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = -1;
				data[vidx++] = 1;
				data[vidx++] = 0;
				data[vidx++] = 0;
				vidx += skip;
				data[vidx++] = outer_pos;
				data[vidx++] = -hh + j * dh;
				data[vidx++] = hd;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = 1;
				data[vidx++] = -1;
				data[vidx++] = 0;
				data[vidx++] = 0;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = 2 * ((i - 1) * (this._segmentsH + 1) + (j - 1)) | 0;
					tr = 2 * (i * (this._segmentsH + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					indices[fidx++] = tl;
					indices[fidx++] = bl;
					indices[fidx++] = br;
					indices[fidx++] = tl;
					indices[fidx++] = br;
					indices[fidx++] = tr;
					indices[fidx++] = tr + 1;
					indices[fidx++] = br + 1;
					indices[fidx++] = bl + 1;
					indices[fidx++] = tr + 1;
					indices[fidx++] = bl + 1;
					indices[fidx++] = tl + 1;
				}
				j++;
			}
			i++;
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsH + 1) | 0;
		i = 0;
		while(i <= this._segmentsW) {
			outer_pos = -hw + i * dw;
			j = 0;
			while(j <= this._segmentsD) {
				data[vidx++] = outer_pos;
				data[vidx++] = hh;
				data[vidx++] = -hd + j * dd;
				data[vidx++] = 0;
				data[vidx++] = 1;
				data[vidx++] = 0;
				data[vidx++] = 1;
				data[vidx++] = 0;
				data[vidx++] = 0;
				vidx += skip;
				data[vidx++] = outer_pos;
				data[vidx++] = -hh;
				data[vidx++] = -hd + j * dd;
				data[vidx++] = 0;
				data[vidx++] = -1;
				data[vidx++] = 0;
				data[vidx++] = 1;
				data[vidx++] = 0;
				data[vidx++] = 0;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = inc + 2 * ((i - 1) * (this._segmentsD + 1) + (j - 1)) | 0;
					tr = inc + 2 * (i * (this._segmentsD + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					indices[fidx++] = tl;
					indices[fidx++] = bl;
					indices[fidx++] = br;
					indices[fidx++] = tl;
					indices[fidx++] = br;
					indices[fidx++] = tr;
					indices[fidx++] = tr + 1;
					indices[fidx++] = br + 1;
					indices[fidx++] = bl + 1;
					indices[fidx++] = tr + 1;
					indices[fidx++] = bl + 1;
					indices[fidx++] = tl + 1;
				}
				j++;
			}
			i++;
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsD + 1) | 0;
		i = 0;
		while(i <= this._segmentsD) {
			outer_pos = hd - i * dd;
			j = 0;
			while(j <= this._segmentsH) {
				data[vidx++] = -hw;
				data[vidx++] = -hh + j * dh;
				data[vidx++] = outer_pos;
				data[vidx++] = -1;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = -1;
				vidx += skip;
				data[vidx++] = hw;
				data[vidx++] = -hh + j * dh;
				data[vidx++] = outer_pos;
				data[vidx++] = 1;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = 0;
				data[vidx++] = 1;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = inc + 2 * ((i - 1) * (this._segmentsH + 1) + (j - 1)) | 0;
					tr = inc + 2 * (i * (this._segmentsH + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					indices[fidx++] = tl;
					indices[fidx++] = bl;
					indices[fidx++] = br;
					indices[fidx++] = tl;
					indices[fidx++] = br;
					indices[fidx++] = tr;
					indices[fidx++] = tr + 1;
					indices[fidx++] = br + 1;
					indices[fidx++] = bl + 1;
					indices[fidx++] = tr + 1;
					indices[fidx++] = bl + 1;
					indices[fidx++] = tl + 1;
				}
				j++;
			}
			i++;
		}
		target.updateData(data);
		target.updateIndexData(indices);
	}
	,buildUVs: function(target) {
		var i = 0;
		var j;
		var uidx;
		var data;
		var u_tile_dim;
		var v_tile_dim;
		var u_tile_step;
		var v_tile_step;
		var tl0u;
		var tl0v;
		var tl1u;
		var tl1v;
		var du;
		var dv;
		var stride = target.get_UVStride();
		var numUvs = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2 * stride | 0;
		var skip = stride - 2;
		if(target.get_UVData() != null && numUvs == target.get_UVData().length) data = target.get_UVData(); else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),numUvs,0);
			this.invalidateGeometry();
		}
		if(this._tile6) {
			u_tile_dim = u_tile_step = 0.333333333333333315;
			v_tile_dim = v_tile_step = 0.5;
		} else {
			u_tile_dim = v_tile_dim = 1;
			u_tile_step = v_tile_step = 0;
		}
		uidx = target.get_UVOffset();
		tl0u = u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsH;
		i = 0;
		while(i <= this._segmentsW) {
			j = 0;
			while(j <= this._segmentsH) {
				data[uidx++] = (tl0u + i * du) * target.get_scaleU();
				data[uidx++] = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				uidx += skip;
				data[uidx++] = (tl1u + (u_tile_dim - i * du)) * target.get_scaleU();
				data[uidx++] = (tl1v + (v_tile_dim - j * dv)) * target.get_scaleV();
				uidx += skip;
				j++;
			}
			i++;
		}
		tl0u = u_tile_step;
		tl0v = 0 * v_tile_step;
		tl1u = 0 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsD;
		i = 0;
		while(i <= this._segmentsW) {
			j = 0;
			while(j <= this._segmentsD) {
				data[uidx++] = (tl0u + i * du) * target.get_scaleU();
				data[uidx++] = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				uidx += skip;
				data[uidx++] = (tl1u + i * du) * target.get_scaleU();
				data[uidx++] = (tl1v + j * dv) * target.get_scaleV();
				uidx += skip;
				j++;
			}
			i++;
		}
		tl0u = 0 * u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = v_tile_step;
		du = u_tile_dim / this._segmentsD;
		dv = v_tile_dim / this._segmentsH;
		i = 0;
		while(i <= this._segmentsD) {
			j = 0;
			while(j <= this._segmentsH) {
				data[uidx++] = (tl0u + i * du) * target.get_scaleU();
				data[uidx++] = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				uidx += skip;
				data[uidx++] = (tl1u + (u_tile_dim - i * du)) * target.get_scaleU();
				data[uidx++] = (tl1v + (v_tile_dim - j * dv)) * target.get_scaleV();
				uidx += skip;
				j++;
			}
			i++;
		}
		target.updateData(data);
	}
	,__class__: away3d.primitives.CubeGeometry
	,__properties__: $extend(away3d.primitives.PrimitiveBase.prototype.__properties__,{set_segmentsD:"set_segmentsD",get_segmentsD:"get_segmentsD",set_segmentsH:"set_segmentsH",get_segmentsH:"get_segmentsH",set_segmentsW:"set_segmentsW",get_segmentsW:"get_segmentsW",set_tile6:"set_tile6",get_tile6:"get_tile6",set_depth:"set_depth",get_depth:"get_depth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
away3d.primitives.data = {};
away3d.primitives.data.Segment = function(start,end,anchor,colorStart,colorEnd,thickness) {
	if(thickness == null) thickness = 1;
	if(colorEnd == null) colorEnd = 3355443;
	if(colorStart == null) colorStart = 3355443;
	this._index = -1;
	this._subSetIndex = -1;
	anchor = null;
	this._thickness = thickness * .5;
	this._start = start;
	this._end = end;
	this.set_startColor(colorStart);
	this.set_endColor(colorEnd);
};
$hxClasses["away3d.primitives.data.Segment"] = away3d.primitives.data.Segment;
away3d.primitives.data.Segment.__name__ = ["away3d","primitives","data","Segment"];
away3d.primitives.data.Segment.prototype = {
	updateSegment: function(start,end,anchor,colorStart,colorEnd,thickness) {
		if(thickness == null) thickness = 1;
		if(colorEnd == null) colorEnd = 3355443;
		if(colorStart == null) colorStart = 3355443;
		anchor = null;
		this._start = start;
		this._end = end;
		if(this._startColor != colorStart) this.set_startColor(colorStart);
		if(this._endColor != colorEnd) this.set_endColor(colorEnd);
		this._thickness = thickness * .5;
		this.update();
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		this._start = value;
		this.update();
		return value;
	}
	,get_end: function() {
		return this._end;
	}
	,set_end: function(value) {
		this._end = value;
		this.update();
		return value;
	}
	,get_thickness: function() {
		return this._thickness * 2;
	}
	,set_thickness: function(value) {
		this._thickness = value * .5;
		this.update();
		return value;
	}
	,get_startColor: function() {
		return this._startColor;
	}
	,set_startColor: function(color) {
		this._startR = (color >> 16 & 255) / 255;
		this._startG = (color >> 8 & 255) / 255;
		this._startB = (color & 255) / 255;
		this._startColor = color;
		this.update();
		return color;
	}
	,get_endColor: function() {
		return this._endColor;
	}
	,set_endColor: function(color) {
		this._endR = (color >> 16 & 255) / 255;
		this._endG = (color >> 8 & 255) / 255;
		this._endB = (color & 255) / 255;
		this._endColor = color;
		this.update();
		return color;
	}
	,dispose: function() {
		this._start = null;
		this._end = null;
	}
	,get_index: function() {
		return this._index;
	}
	,set_index: function(ind) {
		this._index = ind;
		return ind;
	}
	,get_subSetIndex: function() {
		return this._subSetIndex;
	}
	,set_subSetIndex: function(ind) {
		this._subSetIndex = ind;
		return ind;
	}
	,set_segmentsBase: function(segBase) {
		this._segmentsBase = segBase;
		return segBase;
	}
	,update: function() {
		if(this._segmentsBase == null) return;
		this._segmentsBase.updateSegment(this);
	}
	,__class__: away3d.primitives.data.Segment
	,__properties__: {set_segmentsBase:"set_segmentsBase",set_subSetIndex:"set_subSetIndex",get_subSetIndex:"get_subSetIndex",set_index:"set_index",get_index:"get_index",set_endColor:"set_endColor",get_endColor:"get_endColor",set_startColor:"set_startColor",get_startColor:"get_startColor",set_thickness:"set_thickness",get_thickness:"get_thickness",set_end:"set_end",get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
away3d.primitives.LineSegment = function(v0,v1,color0,color1,thickness) {
	if(thickness == null) thickness = 1;
	if(color1 == null) color1 = 3355443;
	if(color0 == null) color0 = 3355443;
	this.TYPE = "line";
	away3d.primitives.data.Segment.call(this,v0,v1,null,color0,color1,thickness);
};
$hxClasses["away3d.primitives.LineSegment"] = away3d.primitives.LineSegment;
away3d.primitives.LineSegment.__name__ = ["away3d","primitives","LineSegment"];
away3d.primitives.LineSegment.__super__ = away3d.primitives.data.Segment;
away3d.primitives.LineSegment.prototype = $extend(away3d.primitives.data.Segment.prototype,{
	__class__: away3d.primitives.LineSegment
});
away3d.primitives.WireframePrimitiveBase = function(color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	this._geomDirty = true;
	if(thickness <= 0) thickness = 1;
	this._color = color;
	this._thickness = thickness;
	this.set_mouseEnabled(this.set_mouseChildren(false));
	away3d.entities.SegmentSet.call(this);
};
$hxClasses["away3d.primitives.WireframePrimitiveBase"] = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframePrimitiveBase.__name__ = ["away3d","primitives","WireframePrimitiveBase"];
away3d.primitives.WireframePrimitiveBase.__super__ = away3d.entities.SegmentSet;
away3d.primitives.WireframePrimitiveBase.prototype = $extend(away3d.entities.SegmentSet.prototype,{
	get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		var $it0 = this._segments.iterator();
		while( $it0.hasNext() ) {
			var segRef = $it0.next();
			segRef.segment.set_startColor(segRef.segment.set_endColor(value));
		}
		return value;
	}
	,get_thickness: function() {
		return this._thickness;
	}
	,set_thickness: function(value) {
		this._thickness = value;
		var $it0 = this._segments.iterator();
		while( $it0.hasNext() ) {
			var segRef = $it0.next();
			segRef.segment.set_thickness(segRef.segment.set_thickness(value));
		}
		return value;
	}
	,removeAllSegments: function() {
		away3d.entities.SegmentSet.prototype.removeAllSegments.call(this);
	}
	,get_bounds: function() {
		if(this._geomDirty) this.updateGeometry();
		return away3d.entities.SegmentSet.prototype.get_bounds.call(this);
	}
	,buildGeometry: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
		this.invalidateBounds();
	}
	,updateGeometry: function() {
		this.buildGeometry();
		this._geomDirty = false;
	}
	,updateOrAddSegment: function(index,v0,v1) {
		var segment;
		var s;
		var e;
		if((segment = this.getSegment(index)) != null) {
			s = segment.get_start();
			e = segment.get_end();
			s.x = v0.x;
			s.y = v0.y;
			s.z = v0.z;
			e.x = v1.x;
			e.y = v1.y;
			e.z = v1.z;
			segment.updateSegment(s,e,null,this._color,this._color,this._thickness);
		} else this.addSegment(new away3d.primitives.LineSegment(new openfl.geom.Vector3D(v0.x,v0.y,v0.z,v0.w),new openfl.geom.Vector3D(v1.x,v1.y,v1.z,v1.w),this._color,this._color,this._thickness));
	}
	,updateMouseChildren: function() {
		this._ancestorsAllowMouseEnabled = false;
	}
	,__class__: away3d.primitives.WireframePrimitiveBase
	,__properties__: $extend(away3d.entities.SegmentSet.prototype.__properties__,{set_thickness:"set_thickness",get_thickness:"get_thickness",set_color:"set_color",get_color:"get_color"})
});
away3d.primitives.WireframeCube = function(width,height,depth,color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	if(depth == null) depth = 100;
	if(height == null) height = 100;
	if(width == null) width = 100;
	away3d.primitives.WireframePrimitiveBase.call(this,color,thickness);
	this._width = width;
	this._height = height;
	this._depth = depth;
};
$hxClasses["away3d.primitives.WireframeCube"] = away3d.primitives.WireframeCube;
away3d.primitives.WireframeCube.__name__ = ["away3d","primitives","WireframeCube"];
away3d.primitives.WireframeCube.__super__ = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframeCube.prototype = $extend(away3d.primitives.WireframePrimitiveBase.prototype,{
	get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(value <= 0) throw new openfl.errors.Error("Value needs to be greater than 0");
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,buildGeometry: function() {
		var v0 = new openfl.geom.Vector3D();
		var v1 = new openfl.geom.Vector3D();
		var hw = this._width * .5;
		var hh = this._height * .5;
		var hd = this._depth * .5;
		v0.x = -hw;
		v0.y = hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(0,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(1,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(2,v0,v1);
		v0.z = -hd;
		v1.z = -hd;
		this.updateOrAddSegment(3,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(4,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(5,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(6,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(7,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = hd;
		this.updateOrAddSegment(8,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(9,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(10,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(11,v0,v1);
	}
	,__class__: away3d.primitives.WireframeCube
	,__properties__: $extend(away3d.primitives.WireframePrimitiveBase.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
away3d.primitives.WireframeSphere = function(radius,segmentsW,segmentsH,color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	if(segmentsH == null) segmentsH = 12;
	if(segmentsW == null) segmentsW = 16;
	if(radius == null) radius = 50;
	away3d.primitives.WireframePrimitiveBase.call(this,color,thickness);
	this._radius = radius;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
};
$hxClasses["away3d.primitives.WireframeSphere"] = away3d.primitives.WireframeSphere;
away3d.primitives.WireframeSphere.__name__ = ["away3d","primitives","WireframeSphere"];
away3d.primitives.WireframeSphere.__super__ = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframeSphere.prototype = $extend(away3d.primitives.WireframePrimitiveBase.prototype,{
	buildGeometry: function() {
		var vertices = new Array();
		var v0 = new openfl.geom.Vector3D();
		var v1 = new openfl.geom.Vector3D();
		var i = 0;
		var j = 0;
		var numVerts = 0;
		var index = 0;
		j = 0;
		while(j <= this._segmentsH) {
			var horangle = Math.PI * j / this._segmentsH;
			var z = -this._radius * Math.cos(horangle);
			var ringradius = this._radius * Math.sin(horangle);
			i = 0;
			while(i <= this._segmentsW) {
				var verangle = 2 * Math.PI * i / this._segmentsW;
				var x = ringradius * Math.cos(verangle);
				var y = ringradius * Math.sin(verangle);
				vertices[numVerts++] = x;
				vertices[numVerts++] = -z;
				vertices[numVerts++] = y;
				++i;
			}
			++j;
		}
		j = 1;
		while(j <= this._segmentsH) {
			i = 1;
			while(i <= this._segmentsW) {
				var a = ((this._segmentsW + 1) * j + i) * 3;
				var b = ((this._segmentsW + 1) * j + i - 1) * 3;
				var c = ((this._segmentsW + 1) * (j - 1) + i - 1) * 3;
				var d = ((this._segmentsW + 1) * (j - 1) + i) * 3;
				if(j == this._segmentsH) {
					v0.x = vertices[c];
					v0.y = vertices[c + 1];
					v0.z = vertices[c + 2];
					v1.x = vertices[d];
					v1.y = vertices[d + 1];
					v1.z = vertices[d + 2];
					this.updateOrAddSegment(index++,v0,v1);
					v0.x = vertices[a];
					v0.y = vertices[a + 1];
					v0.z = vertices[a + 2];
					this.updateOrAddSegment(index++,v0,v1);
				} else if(j == 1) {
					v1.x = vertices[b];
					v1.y = vertices[b + 1];
					v1.z = vertices[b + 2];
					v0.x = vertices[c];
					v0.y = vertices[c + 1];
					v0.z = vertices[c + 2];
					this.updateOrAddSegment(index++,v0,v1);
				} else {
					v1.x = vertices[b];
					v1.y = vertices[b + 1];
					v1.z = vertices[b + 2];
					v0.x = vertices[c];
					v0.y = vertices[c + 1];
					v0.z = vertices[c + 2];
					this.updateOrAddSegment(index++,v0,v1);
					v1.x = vertices[d];
					v1.y = vertices[d + 1];
					v1.z = vertices[d + 2];
					this.updateOrAddSegment(index++,v0,v1);
				}
				++i;
			}
			++j;
		}
	}
	,__class__: away3d.primitives.WireframeSphere
});
away3d.textures = {};
away3d.textures.TextureProxyBase = function() {
	this._format = openfl.display3D.Context3DTextureFormat.BGRA;
	this._hasMipmaps = true;
	this._textures = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._dirty = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.textures.TextureProxyBase"] = away3d.textures.TextureProxyBase;
away3d.textures.TextureProxyBase.__name__ = ["away3d","textures","TextureProxyBase"];
away3d.textures.TextureProxyBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.textures.TextureProxyBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.textures.TextureProxyBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_hasMipMaps: function() {
		return this._hasMipmaps;
	}
	,get_format: function() {
		return this._format;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.TEXTURE;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_width: function(value) {
		if(value == this._width) return value;
		this._width = value;
		return value;
	}
	,set_height: function(value) {
		if(value == this._height) return value;
		this._height = value;
		return value;
	}
	,getTextureForStage3D: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var tex = this._textures[contextIndex];
		var context = stage3DProxy._context3D;
		if(tex == null || this._dirty[contextIndex] != context) {
			this._textures[contextIndex] = tex = this.createTexture(context);
			this._dirty[contextIndex] = context;
			this.uploadContent(tex);
		}
		return tex;
	}
	,uploadContent: function(texture) {
		throw new away3d.errors.AbstractMethodError();
	}
	,setSize: function(width,height) {
		if(this._width != width || this._height != height) this.invalidateSize();
		this._width = width;
		this._height = height;
	}
	,invalidateContent: function() {
		var i = 0;
		while(i < 8) {
			this._dirty[i] = null;
			++i;
		}
	}
	,invalidateSize: function() {
		var tex;
		var i = 0;
		while(i < 8) {
			tex = this._textures[i];
			if(tex != null) {
				tex.dispose();
				this._textures[i] = null;
				this._dirty[i] = null;
			}
			++i;
		}
	}
	,createTexture: function(context) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,dispose: function() {
		var i = 0;
		while(i < 8) {
			if(this._textures[i] != null) this._textures[i].dispose();
			++i;
		}
	}
	,__class__: away3d.textures.TextureProxyBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_height:"get_height",get_width:"get_width",get_assetType:"get_assetType",get_format:"get_format",get_hasMipMaps:"get_hasMipMaps"})
});
away3d.textures.Texture2DBase = function() {
	away3d.textures.TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.Texture2DBase"] = away3d.textures.Texture2DBase;
away3d.textures.Texture2DBase.__name__ = ["away3d","textures","Texture2DBase"];
away3d.textures.Texture2DBase.__super__ = away3d.textures.TextureProxyBase;
away3d.textures.Texture2DBase.prototype = $extend(away3d.textures.TextureProxyBase.prototype,{
	createTexture: function(context) {
		return context.createTexture(this._width,this._height,openfl.display3D.Context3DTextureFormat.BGRA,false);
	}
	,__class__: away3d.textures.Texture2DBase
});
away3d.textures.BitmapTexture = function(bitmapData,generateMipmaps) {
	if(generateMipmaps == null) generateMipmaps = true;
	away3d.textures.Texture2DBase.call(this);
	this._bitmapData = bitmapData;
	this.setSize(this._bitmapData.width,this._bitmapData.height);
	this._generateMipmaps = this._hasMipmaps = generateMipmaps;
};
$hxClasses["away3d.textures.BitmapTexture"] = away3d.textures.BitmapTexture;
away3d.textures.BitmapTexture.__name__ = ["away3d","textures","BitmapTexture"];
away3d.textures.BitmapTexture.__super__ = away3d.textures.Texture2DBase;
away3d.textures.BitmapTexture.prototype = $extend(away3d.textures.Texture2DBase.prototype,{
	get_bitmapData: function() {
		return this._bitmapData;
	}
	,set_bitmapData: function(value) {
		if(value == this._bitmapData) return null;
		if(!away3d.tools.utils.TextureUtils.isBitmapDataValid(value)) throw new openfl.errors.Error("Invalid bitmapData: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value.width,value.height);
		this._bitmapData = value;
		if(this._generateMipmaps) this.getMipMapHolder();
		return value;
	}
	,uploadContent: function(texture) {
		if(this._generateMipmaps) away3d.materials.utils.MipmapGenerator.generateMipMaps(this._bitmapData,texture,this._mipMapHolder,true); else (js.Boot.__cast(texture , openfl.display3D.textures.Texture)).uploadFromBitmapData(this._bitmapData,0);
	}
	,getMipMapHolder: function() {
		var newW;
		var newH;
		newW = this._bitmapData.width;
		newH = this._bitmapData.height;
		if(this._mipMapHolder != null) {
			if(this._mipMapHolder.width == newW && this._bitmapData.height == newH) return;
			this.freeMipMapHolder();
		}
		if(away3d.textures.BitmapTexture._mipMaps[newW] == null) {
			away3d.textures.BitmapTexture._mipMaps[newW] = [];
			away3d.textures.BitmapTexture._mipMapUses[newW] = [];
		}
		if(away3d.textures.BitmapTexture._mipMaps[newW][newH] == null) {
			this._mipMapHolder = away3d.textures.BitmapTexture._mipMaps[newW][newH] = new openfl.display.BitmapData(newW,newH,true);
			away3d.textures.BitmapTexture._mipMapUses[newW][newH] = 1;
		} else {
			away3d.textures.BitmapTexture._mipMapUses[newW][newH] = away3d.textures.BitmapTexture._mipMapUses[newW][newH] + 1;
			this._mipMapHolder = away3d.textures.BitmapTexture._mipMaps[newW][newH];
		}
	}
	,freeMipMapHolder: function() {
		var holderWidth = this._mipMapHolder.width;
		var holderHeight = this._mipMapHolder.height;
		if(--away3d.textures.BitmapTexture._mipMapUses[holderWidth][holderHeight] == 0) {
			away3d.textures.BitmapTexture._mipMaps[holderWidth][holderHeight].dispose();
			away3d.textures.BitmapTexture._mipMaps[holderWidth][holderHeight] = null;
		}
	}
	,dispose: function() {
		away3d.textures.Texture2DBase.prototype.dispose.call(this);
		if(this._mipMapHolder != null) this.freeMipMapHolder();
	}
	,__class__: away3d.textures.BitmapTexture
	,__properties__: $extend(away3d.textures.Texture2DBase.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
away3d.textures.CubeTextureBase = function() {
	away3d.textures.TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.CubeTextureBase"] = away3d.textures.CubeTextureBase;
away3d.textures.CubeTextureBase.__name__ = ["away3d","textures","CubeTextureBase"];
away3d.textures.CubeTextureBase.__super__ = away3d.textures.TextureProxyBase;
away3d.textures.CubeTextureBase.prototype = $extend(away3d.textures.TextureProxyBase.prototype,{
	get_size: function() {
		return this._width;
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this.get_width(),openfl.display3D.Context3DTextureFormat.BGRA,false);
	}
	,__class__: away3d.textures.CubeTextureBase
	,__properties__: $extend(away3d.textures.TextureProxyBase.prototype.__properties__,{get_size:"get_size"})
});
away3d.textures.RenderCubeTexture = function(size) {
	away3d.textures.CubeTextureBase.call(this);
	this.setSize(size,size);
};
$hxClasses["away3d.textures.RenderCubeTexture"] = away3d.textures.RenderCubeTexture;
away3d.textures.RenderCubeTexture.__name__ = ["away3d","textures","RenderCubeTexture"];
away3d.textures.RenderCubeTexture.__super__ = away3d.textures.CubeTextureBase;
away3d.textures.RenderCubeTexture.prototype = $extend(away3d.textures.CubeTextureBase.prototype,{
	set_size: function(value) {
		if(value == this._width) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value,value);
		return value;
	}
	,uploadContent: function(texture) {
		var bmd = new openfl.display.BitmapData(this._width,this._height,false,0);
		var i = 0;
		while(i < 6) {
			away3d.materials.utils.MipmapGenerator.generateMipMaps(bmd,texture,null,false,i);
			++i;
		}
		bmd.dispose();
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this._width,openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,__class__: away3d.textures.RenderCubeTexture
});
away3d.textures.RenderTexture = function(_width,_height) {
	away3d.textures.Texture2DBase.call(this);
	this.setSize(_width,_height);
};
$hxClasses["away3d.textures.RenderTexture"] = away3d.textures.RenderTexture;
away3d.textures.RenderTexture.__name__ = ["away3d","textures","RenderTexture"];
away3d.textures.RenderTexture.__super__ = away3d.textures.Texture2DBase;
away3d.textures.RenderTexture.prototype = $extend(away3d.textures.Texture2DBase.prototype,{
	set_width: function(value) {
		if(value == this._width) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value,this._height);
		return value;
	}
	,set_height: function(value) {
		if(value == this._height) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(this._width,value);
		return value;
	}
	,uploadContent: function(texture) {
	}
	,createTexture: function(context) {
		return context.createTexture(this.get_width(),this.get_height(),openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,__class__: away3d.textures.RenderTexture
});
away3d.tools = {};
away3d.tools.helpers = {};
away3d.tools.helpers.ParticleGeometryHelper = function() { };
$hxClasses["away3d.tools.helpers.ParticleGeometryHelper"] = away3d.tools.helpers.ParticleGeometryHelper;
away3d.tools.helpers.ParticleGeometryHelper.__name__ = ["away3d","tools","helpers","ParticleGeometryHelper"];
away3d.tools.helpers.ParticleGeometryHelper.generateGeometry = function(geometries,transforms) {
	var verticesVector = new Array();
	var indicesVector = new Array();
	var vertexCounters = new Array();
	var particles = new Array();
	var subGeometries = new Array();
	var numParticles = geometries.length;
	var sourceSubGeometries;
	var sourceSubGeometry;
	var numSubGeometries;
	var vertices;
	var indices;
	var vertexCounter;
	var subGeometry;
	var i;
	var j;
	var sub2SubMap = new Array();
	var tempVertex = new openfl.geom.Vector3D();
	var tempNormal = new openfl.geom.Vector3D();
	var tempTangents = new openfl.geom.Vector3D();
	var tempUV = new openfl.geom.Point();
	i = 0;
	while(i < numParticles) {
		sourceSubGeometries = geometries[i].get_subGeometries();
		numSubGeometries = sourceSubGeometries.length;
		var srcIndex = 0;
		while(srcIndex < numSubGeometries) {
			if(sub2SubMap.length <= srcIndex) {
				sub2SubMap.push(subGeometries.length);
				verticesVector.push(new Array());
				indicesVector.push(new Array());
				subGeometries.push(new away3d.core.base.CompactSubGeometry());
				vertexCounters.push(0);
			}
			sourceSubGeometry = sourceSubGeometries[srcIndex];
			if(Std["int"]((function($this) {
				var $r;
				var this1;
				{
					var a = sourceSubGeometry.get_numVertices();
					this1 = a + vertexCounters[sub2SubMap[srcIndex]];
				}
				var $int = this1;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) > away3d.tools.helpers.ParticleGeometryHelper.MAX_VERTEX) {
				sub2SubMap[srcIndex] = subGeometries.length;
				verticesVector.push(new Array());
				indicesVector.push(new Array());
				subGeometries.push(new away3d.core.base.CompactSubGeometry());
				vertexCounters.push(0);
			}
			j = sub2SubMap[srcIndex];
			vertices = verticesVector[j];
			indices = indicesVector[j];
			vertexCounter = vertexCounters[j];
			subGeometry = subGeometries[j];
			var particleData = new away3d.core.base.data.ParticleData();
			particleData.numVertices = sourceSubGeometry.get_numVertices();
			particleData.startVertexIndex = vertexCounter;
			particleData.particleIndex = i;
			particleData.subGeometry = subGeometry;
			particles.push(particleData);
			var b = sourceSubGeometry.get_numVertices();
			vertexCounters[j] = vertexCounters[j] + b;
			var k;
			var tempLen;
			var compact;
			compact = js.Boot.__cast(sourceSubGeometry , away3d.core.base.CompactSubGeometry);
			var product;
			var sourceVertices;
			if(compact != null) {
				tempLen = compact.get_numVertices();
				compact.get_numTriangles();
				sourceVertices = compact.get_vertexData();
				if(transforms != null) {
					var particleGeometryTransform = transforms[i];
					var vertexTransform = particleGeometryTransform.get_vertexTransform();
					var invVertexTransform = particleGeometryTransform.get_invVertexTransform();
					var UVTransform = particleGeometryTransform.get_UVTransform();
					k = 0;
					while(k < tempLen) {
						product = k * 13;
						tempVertex.x = sourceVertices[product];
						tempVertex.y = sourceVertices[product + 1];
						tempVertex.z = sourceVertices[product + 2];
						tempNormal.x = sourceVertices[product + 3];
						tempNormal.y = sourceVertices[product + 4];
						tempNormal.z = sourceVertices[product + 5];
						tempTangents.x = sourceVertices[product + 6];
						tempTangents.y = sourceVertices[product + 7];
						tempTangents.z = sourceVertices[product + 8];
						tempUV.x = sourceVertices[product + 9];
						tempUV.y = sourceVertices[product + 10];
						if(vertexTransform != null) {
							tempVertex = vertexTransform.transformVector(tempVertex);
							tempNormal = invVertexTransform.deltaTransformVector(tempNormal);
							tempTangents = invVertexTransform.deltaTransformVector(tempNormal);
						}
						if(UVTransform != null) tempUV = UVTransform.transformPoint(tempUV);
						vertices.push(tempVertex.x);
						vertices.push(tempVertex.y);
						vertices.push(tempVertex.z);
						vertices.push(tempNormal.x);
						vertices.push(tempNormal.y);
						vertices.push(tempNormal.z);
						vertices.push(tempTangents.x);
						vertices.push(tempTangents.y);
						vertices.push(tempTangents.z);
						vertices.push(tempUV.x);
						vertices.push(tempUV.y);
						vertices.push(sourceVertices[product + 11]);
						vertices.push(sourceVertices[product + 12]);
						k++;
					}
				} else {
					k = 0;
					while(k < tempLen) {
						product = k * 13;
						vertices.push(sourceVertices[product]);
						vertices.push(sourceVertices[product + 1]);
						vertices.push(sourceVertices[product + 2]);
						vertices.push(sourceVertices[product + 3]);
						vertices.push(sourceVertices[product + 4]);
						vertices.push(sourceVertices[product + 5]);
						vertices.push(sourceVertices[product + 6]);
						vertices.push(sourceVertices[product + 7]);
						vertices.push(sourceVertices[product + 8]);
						vertices.push(sourceVertices[product + 9]);
						vertices.push(sourceVertices[product + 10]);
						vertices.push(sourceVertices[product + 11]);
						vertices.push(sourceVertices[product + 12]);
						k++;
					}
				}
			} else {
			}
			var sourceIndices = sourceSubGeometry.get_indexData();
			tempLen = sourceSubGeometry.get_numTriangles();
			k = 0;
			while(k < tempLen) {
				product = k * 3;
				indices.push(sourceIndices[product] + vertexCounter);
				indices.push(sourceIndices[product + 1] + vertexCounter);
				indices.push(sourceIndices[product + 2] + vertexCounter);
				k++;
			}
			srcIndex++;
		}
		i++;
	}
	var particleGeometry = new away3d.core.base.ParticleGeometry();
	particleGeometry.particles = particles;
	particleGeometry.numParticles = numParticles;
	numParticles = subGeometries.length;
	i = 0;
	while(i < numParticles) {
		subGeometry = subGeometries[i];
		subGeometry.updateData(verticesVector[i]);
		subGeometry.updateIndexData(indicesVector[i]);
		particleGeometry.addSubGeometry(subGeometry);
		i++;
	}
	return particleGeometry;
};
away3d.tools.helpers.data = {};
away3d.tools.helpers.data.ParticleGeometryTransform = function() {
};
$hxClasses["away3d.tools.helpers.data.ParticleGeometryTransform"] = away3d.tools.helpers.data.ParticleGeometryTransform;
away3d.tools.helpers.data.ParticleGeometryTransform.__name__ = ["away3d","tools","helpers","data","ParticleGeometryTransform"];
away3d.tools.helpers.data.ParticleGeometryTransform.prototype = {
	set_vertexTransform: function(value) {
		this._defaultVertexTransform = value;
		this._defaultInvVertexTransform = new openfl.geom.Matrix3D(openfl._Vector.Vector_Impl_.copy(value.rawData));
		this._defaultInvVertexTransform.invert();
		this._defaultInvVertexTransform.transpose();
		return value;
	}
	,set_UVTransform: function(value) {
		this._defaultUVTransform = value;
		return value;
	}
	,get_UVTransform: function() {
		return this._defaultUVTransform;
	}
	,get_vertexTransform: function() {
		return this._defaultVertexTransform;
	}
	,get_invVertexTransform: function() {
		return this._defaultInvVertexTransform;
	}
	,__class__: away3d.tools.helpers.data.ParticleGeometryTransform
	,__properties__: {get_invVertexTransform:"get_invVertexTransform",set_UVTransform:"set_UVTransform",get_UVTransform:"get_UVTransform",set_vertexTransform:"set_vertexTransform",get_vertexTransform:"get_vertexTransform"}
};
away3d.tools.utils = {};
away3d.tools.utils.GeomUtil = function() { };
$hxClasses["away3d.tools.utils.GeomUtil"] = away3d.tools.utils.GeomUtil;
away3d.tools.utils.GeomUtil.__name__ = ["away3d","tools","utils","GeomUtil"];
away3d.tools.utils.GeomUtil.fromVectors = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	if(triangleOffset == null) triangleOffset = 0;
	var LIMIT_VERTS = 196605;
	var LIMIT_INDICES = 983025;
	var subs = new Array();
	if(uvs != null && uvs.length == 0) uvs = null;
	if(normals != null && normals.length == 0) normals = null;
	if(tangents != null && tangents.length == 0) tangents = null;
	if(weights != null && weights.length == 0) weights = null;
	if(jointIndices != null && jointIndices.length == 0) jointIndices = null;
	if(indices.length >= LIMIT_INDICES || verts.length >= LIMIT_VERTS) {
		var i = 0;
		var len;
		var outIndex;
		var j;
		var splitVerts = new Array();
		var splitIndices = new Array();
		var splitUvs;
		if(uvs != null) splitUvs = new Array(); else splitUvs = null;
		var splitNormals;
		if(normals != null) splitNormals = new Array(); else splitNormals = null;
		var splitTangents;
		if(tangents != null) splitTangents = new Array(); else splitTangents = null;
		var splitWeights;
		if(weights != null) splitWeights = new Array(); else splitWeights = null;
		var splitJointIndices;
		if(jointIndices != null) splitJointIndices = new Array(); else splitJointIndices = null;
		var mappings = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),verts.length / 3 | 0,0);
		i = mappings.length;
		while(i-- > 0) mappings[i] = -1;
		var originalIndex;
		var splitIndex;
		var o0;
		var o1;
		var o2;
		var s0;
		var s1;
		var s2;
		var su;
		var ou;
		var sv;
		var ov;
		outIndex = 0;
		len = indices.length;
		i = 0;
		while(i < len) {
			splitIndex = splitVerts.length + 6;
			if(outIndex + 2 >= LIMIT_INDICES || splitIndex >= LIMIT_VERTS) {
				subs.push(away3d.tools.utils.GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset));
				splitVerts = new Array();
				splitIndices = new Array();
				if(uvs != null) splitUvs = new Array(); else splitUvs = null;
				if(normals != null) splitNormals = new Array(); else splitNormals = null;
				if(tangents != null) splitTangents = new Array(); else splitTangents = null;
				if(weights != null) splitWeights = new Array(); else splitWeights = null;
				if(jointIndices != null) splitJointIndices = new Array(); else splitJointIndices = null;
				splitIndex = 0;
				j = mappings.length;
				while(j-- > 0) mappings[j] = -1;
				outIndex = 0;
			}
			j = 0;
			while(j < 3) {
				originalIndex = indices[i + j];
				if(mappings[originalIndex] >= 0) splitIndex = mappings[originalIndex]; else {
					o0 = originalIndex * 3;
					o1 = originalIndex * 3 + 1;
					o2 = originalIndex * 3 + 2;
					splitIndex = splitVerts.length / 3 | 0;
					s0 = splitIndex * 3;
					s1 = splitIndex * 3 + 1;
					s2 = splitIndex * 3 + 2;
					splitVerts[s0] = verts[o0];
					splitVerts[s1] = verts[o1];
					splitVerts[s2] = verts[o2];
					if(uvs != null) {
						su = splitIndex * 2;
						sv = splitIndex * 2 + 1;
						ou = originalIndex * 2;
						ov = originalIndex * 2 + 1;
						splitUvs[su] = uvs[ou];
						splitUvs[sv] = uvs[ov];
					}
					if(normals != null) {
						splitNormals[s0] = normals[o0];
						splitNormals[s1] = normals[o1];
						splitNormals[s2] = normals[o2];
					}
					if(tangents != null) {
						splitTangents[s0] = tangents[o0];
						splitTangents[s1] = tangents[o1];
						splitTangents[s2] = tangents[o2];
					}
					if(weights != null) {
						splitWeights[s0] = weights[o0];
						splitWeights[s1] = weights[o1];
						splitWeights[s2] = weights[o2];
					}
					if(jointIndices != null) {
						splitJointIndices[s0] = jointIndices[o0];
						splitJointIndices[s1] = jointIndices[o1];
						splitJointIndices[s2] = jointIndices[o2];
					}
					mappings[originalIndex] = splitIndex;
				}
				splitIndices[outIndex + j] = splitIndex;
				j++;
			}
			outIndex += 3;
			i += 3;
		}
		if(splitVerts.length > 0) subs.push(away3d.tools.utils.GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset));
	} else subs.push(away3d.tools.utils.GeomUtil.constructSubGeometry(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset));
	return subs;
};
away3d.tools.utils.GeomUtil.constructSubGeometry = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	var sub;
	if(weights != null && jointIndices != null) {
		sub = new away3d.core.base.SkinnedSubGeometry(weights.length / (verts.length / 3) | 0);
		(js.Boot.__cast(sub , away3d.core.base.SkinnedSubGeometry)).updateJointWeightsData(weights);
		(js.Boot.__cast(sub , away3d.core.base.SkinnedSubGeometry)).updateJointIndexData(jointIndices);
	} else sub = new away3d.core.base.CompactSubGeometry();
	sub.updateIndexData(indices);
	sub.fromVectors(verts,uvs,normals,tangents);
	return sub;
};
away3d.tools.utils.GeomUtil.interleaveBuffers = function(numVertices,vertices,normals,tangents,uvs,suvs) {
	var i = 0;
	var compIndex;
	var uvCompIndex;
	var interleavedCompIndex;
	var interleavedBuffer;
	interleavedBuffer = new Array();
	i = 0;
	while(i < numVertices) {
		uvCompIndex = i * 2;
		compIndex = i * 3;
		interleavedCompIndex = i * 13;
		if(vertices != null) interleavedBuffer[interleavedCompIndex] = vertices[compIndex]; else interleavedBuffer[interleavedCompIndex] = 0;
		if(vertices != null) interleavedBuffer[interleavedCompIndex + 1] = vertices[compIndex + 1]; else interleavedBuffer[interleavedCompIndex + 1] = 0;
		if(vertices != null) interleavedBuffer[interleavedCompIndex + 2] = vertices[compIndex + 2]; else interleavedBuffer[interleavedCompIndex + 2] = 0;
		if(normals != null) interleavedBuffer[interleavedCompIndex + 3] = normals[compIndex]; else interleavedBuffer[interleavedCompIndex + 3] = 0;
		if(normals != null) interleavedBuffer[interleavedCompIndex + 4] = normals[compIndex + 1]; else interleavedBuffer[interleavedCompIndex + 4] = 0;
		if(normals != null) interleavedBuffer[interleavedCompIndex + 5] = normals[compIndex + 2]; else interleavedBuffer[interleavedCompIndex + 5] = 0;
		if(tangents != null) interleavedBuffer[interleavedCompIndex + 6] = tangents[compIndex]; else interleavedBuffer[interleavedCompIndex + 6] = 0;
		if(tangents != null) interleavedBuffer[interleavedCompIndex + 7] = tangents[compIndex + 1]; else interleavedBuffer[interleavedCompIndex + 7] = 0;
		if(tangents != null) interleavedBuffer[interleavedCompIndex + 8] = tangents[compIndex + 2]; else interleavedBuffer[interleavedCompIndex + 8] = 0;
		if(uvs != null) interleavedBuffer[interleavedCompIndex + 9] = uvs[uvCompIndex]; else interleavedBuffer[interleavedCompIndex + 9] = 0;
		if(uvs != null) interleavedBuffer[interleavedCompIndex + 10] = uvs[uvCompIndex + 1]; else interleavedBuffer[interleavedCompIndex + 10] = 0;
		if(suvs != null) interleavedBuffer[interleavedCompIndex + 11] = suvs[uvCompIndex]; else interleavedBuffer[interleavedCompIndex + 11] = 0;
		if(suvs != null) interleavedBuffer[interleavedCompIndex + 12] = suvs[uvCompIndex + 1]; else interleavedBuffer[interleavedCompIndex + 12] = 0;
		++i;
	}
	return interleavedBuffer;
};
away3d.tools.utils.GeomUtil.getMeshSubgeometryIndex = function(subGeometry) {
	var index = 0;
	var subGeometries = subGeometry.get_parentGeometry().get_subGeometries();
	var i = 0;
	while(i < subGeometries.length) {
		if(subGeometries[i] == subGeometry) {
			index = i;
			break;
		}
		++i;
	}
	return index;
};
away3d.tools.utils.GeomUtil.getMeshSubMeshIndex = function(subMesh) {
	var index = 0;
	var subMeshes = subMesh.get_parentMesh().get_subMeshes();
	var i = 0;
	while(i < subMeshes.length) {
		if(subMeshes[i] == subMesh) {
			index = i;
			break;
		}
		++i;
	}
	return index;
};
away3d.tools.utils.TextureUtils = function() { };
$hxClasses["away3d.tools.utils.TextureUtils"] = away3d.tools.utils.TextureUtils;
away3d.tools.utils.TextureUtils.__name__ = ["away3d","tools","utils","TextureUtils"];
away3d.tools.utils.TextureUtils.isBitmapDataValid = function(bitmapData) {
	if(bitmapData == null) return true;
	return away3d.tools.utils.TextureUtils.isDimensionValid(bitmapData.width) && away3d.tools.utils.TextureUtils.isDimensionValid(bitmapData.height);
};
away3d.tools.utils.TextureUtils.isDimensionValid = function(d) {
	return d >= 1 && d <= away3d.tools.utils.TextureUtils.MAX_SIZE && away3d.tools.utils.TextureUtils.isPowerOfTwo(d);
};
away3d.tools.utils.TextureUtils.isPowerOfTwo = function(value) {
	if(value > 0) return (value & -value) == value; else return false;
};
away3d.tools.utils.TextureUtils.getBestPowerOf2 = function(value) {
	var p = 1;
	while(p < value) p <<= 1;
	if(p > away3d.tools.utils.TextureUtils.MAX_SIZE) p = away3d.tools.utils.TextureUtils.MAX_SIZE;
	return p;
};
away3d.utils.Cast = function() { };
$hxClasses["away3d.utils.Cast"] = away3d.utils.Cast;
away3d.utils.Cast.__name__ = ["away3d","utils","Cast"];
away3d.utils.Cast._colorNames = null;
away3d.utils.Cast.string = function(data) {
	if(js.Boot.__instanceof(data,Class)) data = Type.createInstance(data,[]);
	if(typeof(data) == "string") return data;
	return Std.string(data);
};
away3d.utils.Cast.byteArray = function(data) {
	if(js.Boot.__instanceof(data,Class)) data = Type.createInstance(data,[]);
	if(js.Boot.__instanceof(data,openfl.utils.ByteArray)) return data;
	return js.Boot.__cast(data , openfl.utils.ByteArray);
};
away3d.utils.Cast.isHex = function(string) {
	var length = string.length;
	var i = 0;
	while(i < length) {
		if(away3d.utils.Cast._hexChars.indexOf(string.charAt(i)) == -1) return false;
		++i;
	}
	return true;
};
away3d.utils.Cast.tryColor = function(data) {
	if(js.Boot.__instanceof(data,_UInt.UInt_Impl_)) return js.Boot.__cast(data , Int);
	if(((data | 0) === data)) return js.Boot.__cast(data , Int);
	if(typeof(data) == "string") {
		if(data == "random") return Std["int"](Math.random() * 16777216);
		if(away3d.utils.Cast._colorNames == null) {
			away3d.utils.Cast._colorNames = new haxe.ds.StringMap();
			away3d.utils.Cast._colorNames.set("steelblue",4620980);
			away3d.utils.Cast._colorNames.set("royalblue",267920);
			away3d.utils.Cast._colorNames.set("cornflowerblue",6591981);
			away3d.utils.Cast._colorNames.set("lightsteelblue",11584734);
			away3d.utils.Cast._colorNames.set("mediumslateblue",8087790);
			away3d.utils.Cast._colorNames.set("slateblue",6970061);
			away3d.utils.Cast._colorNames.set("darkslateblue",4734347);
			away3d.utils.Cast._colorNames.set("midnightblue",1644912);
			away3d.utils.Cast._colorNames.set("navy",128);
			away3d.utils.Cast._colorNames.set("darkblue",139);
			away3d.utils.Cast._colorNames.set("mediumblue",205);
			away3d.utils.Cast._colorNames.set("blue",255);
			away3d.utils.Cast._colorNames.set("dodgerblue",2003199);
			away3d.utils.Cast._colorNames.set("deepskyblue",49151);
			away3d.utils.Cast._colorNames.set("lightskyblue",8900346);
			away3d.utils.Cast._colorNames.set("skyblue",8900331);
			away3d.utils.Cast._colorNames.set("lightblue",11393254);
			away3d.utils.Cast._colorNames.set("powderblue",11591910);
			away3d.utils.Cast._colorNames.set("azure",15794175);
			away3d.utils.Cast._colorNames.set("lightcyan",14745599);
			away3d.utils.Cast._colorNames.set("paleturquoise",11529966);
			away3d.utils.Cast._colorNames.set("mediumturquoise",4772300);
			away3d.utils.Cast._colorNames.set("lightseagreen",2142890);
			away3d.utils.Cast._colorNames.set("darkcyan",35723);
			away3d.utils.Cast._colorNames.set("teal",32896);
			away3d.utils.Cast._colorNames.set("cadetblue",6266528);
			away3d.utils.Cast._colorNames.set("darkturquoise",52945);
			away3d.utils.Cast._colorNames.set("aqua",65535);
			away3d.utils.Cast._colorNames.set("cyan",65535);
			away3d.utils.Cast._colorNames.set("turquoise",4251856);
			away3d.utils.Cast._colorNames.set("aquamarine",8388564);
			away3d.utils.Cast._colorNames.set("mediumaquamarine",6737322);
			away3d.utils.Cast._colorNames.set("darkseagreen",9419919);
			away3d.utils.Cast._colorNames.set("mediumseagreen",3978097);
			away3d.utils.Cast._colorNames.set("seagreen",3050327);
			away3d.utils.Cast._colorNames.set("darkgreen",25600);
			away3d.utils.Cast._colorNames.set("green",32768);
			away3d.utils.Cast._colorNames.set("forestgreen",2263842);
			away3d.utils.Cast._colorNames.set("limegreen",3329330);
			away3d.utils.Cast._colorNames.set("lime",65280);
			away3d.utils.Cast._colorNames.set("chartreuse",8388352);
			away3d.utils.Cast._colorNames.set("lawngreen",8190976);
			away3d.utils.Cast._colorNames.set("greenyellow",11403055);
			away3d.utils.Cast._colorNames.set("yellowgreen",10145074);
			away3d.utils.Cast._colorNames.set("palegreen",10025880);
			away3d.utils.Cast._colorNames.set("lightgreen",9498256);
			away3d.utils.Cast._colorNames.set("springgreen",65407);
			away3d.utils.Cast._colorNames.set("mediumspringgreen",64154);
			away3d.utils.Cast._colorNames.set("darkolivegreen",5597999);
			away3d.utils.Cast._colorNames.set("olivedrab",7048739);
			away3d.utils.Cast._colorNames.set("olive",8421376);
			away3d.utils.Cast._colorNames.set("darkkhaki",12433259);
			away3d.utils.Cast._colorNames.set("darkgoldenrod",12092939);
			away3d.utils.Cast._colorNames.set("goldenrod",14329120);
			away3d.utils.Cast._colorNames.set("gold",16766720);
			away3d.utils.Cast._colorNames.set("yellow",16776960);
			away3d.utils.Cast._colorNames.set("khaki",15787660);
			away3d.utils.Cast._colorNames.set("palegoldenrod",15657130);
			away3d.utils.Cast._colorNames.set("blanchedalmond",16772045);
			away3d.utils.Cast._colorNames.set("moccasin",16770229);
			away3d.utils.Cast._colorNames.set("wheat",16113331);
			away3d.utils.Cast._colorNames.set("navajowhite",16768685);
			away3d.utils.Cast._colorNames.set("burlywood",14596231);
			away3d.utils.Cast._colorNames.set("tan",13808780);
			away3d.utils.Cast._colorNames.set("rosybrown",12357519);
			away3d.utils.Cast._colorNames.set("sienna",10506797);
			away3d.utils.Cast._colorNames.set("saddlebrown",9127187);
			away3d.utils.Cast._colorNames.set("chocolate",13789470);
			away3d.utils.Cast._colorNames.set("peru",13468991);
			away3d.utils.Cast._colorNames.set("sandybrown",16032864);
			away3d.utils.Cast._colorNames.set("darkred",9109504);
			away3d.utils.Cast._colorNames.set("maroon",8388608);
			away3d.utils.Cast._colorNames.set("brown",10824234);
			away3d.utils.Cast._colorNames.set("firebrick",11674146);
			away3d.utils.Cast._colorNames.set("indianred",13458524);
			away3d.utils.Cast._colorNames.set("lightcoral",15761536);
			away3d.utils.Cast._colorNames.set("salmon",16416882);
			away3d.utils.Cast._colorNames.set("darksalmon",15308410);
			away3d.utils.Cast._colorNames.set("lightsalmon",16752762);
			away3d.utils.Cast._colorNames.set("coral",16744272);
			away3d.utils.Cast._colorNames.set("tomato",16737095);
			away3d.utils.Cast._colorNames.set("darkorange",16747520);
			away3d.utils.Cast._colorNames.set("orange",16753920);
			away3d.utils.Cast._colorNames.set("orangered",16729344);
			away3d.utils.Cast._colorNames.set("crimson",14423100);
			away3d.utils.Cast._colorNames.set("red",16711680);
			away3d.utils.Cast._colorNames.set("deeppink",16716947);
			away3d.utils.Cast._colorNames.set("fuchsia",16711935);
			away3d.utils.Cast._colorNames.set("magenta",16711935);
			away3d.utils.Cast._colorNames.set("hotpink",16738740);
			away3d.utils.Cast._colorNames.set("lightpink",16758465);
			away3d.utils.Cast._colorNames.set("pink",16761035);
			away3d.utils.Cast._colorNames.set("palevioletred",14381203);
			away3d.utils.Cast._colorNames.set("mediumvioletred",13047173);
			away3d.utils.Cast._colorNames.set("purple",8388736);
			away3d.utils.Cast._colorNames.set("darkmagenta",9109643);
			away3d.utils.Cast._colorNames.set("mediumpurple",9662683);
			away3d.utils.Cast._colorNames.set("blueviolet",9055202);
			away3d.utils.Cast._colorNames.set("indigo",4915330);
			away3d.utils.Cast._colorNames.set("darkviolet",9699539);
			away3d.utils.Cast._colorNames.set("darkorchid",10040012);
			away3d.utils.Cast._colorNames.set("mediumorchid",12211667);
			away3d.utils.Cast._colorNames.set("orchid",14315734);
			away3d.utils.Cast._colorNames.set("violet",15631086);
			away3d.utils.Cast._colorNames.set("plum",14524637);
			away3d.utils.Cast._colorNames.set("thistle",14204888);
			away3d.utils.Cast._colorNames.set("lavender",15132410);
			away3d.utils.Cast._colorNames.set("ghostwhite",16316671);
			away3d.utils.Cast._colorNames.set("aliceblue",15792383);
			away3d.utils.Cast._colorNames.set("mintcream",16121850);
			away3d.utils.Cast._colorNames.set("honeydew",15794160);
			away3d.utils.Cast._colorNames.set("lightgoldenrodyellow",16448210);
			away3d.utils.Cast._colorNames.set("lemonchiffon",16775885);
			away3d.utils.Cast._colorNames.set("cornsilk",16775388);
			away3d.utils.Cast._colorNames.set("lightyellow",16777184);
			away3d.utils.Cast._colorNames.set("ivory",16777200);
			away3d.utils.Cast._colorNames.set("floralwhite",16775920);
			away3d.utils.Cast._colorNames.set("linen",16445670);
			away3d.utils.Cast._colorNames.set("oldlace",16643558);
			away3d.utils.Cast._colorNames.set("antiquewhite",16444375);
			away3d.utils.Cast._colorNames.set("bisque",16770244);
			away3d.utils.Cast._colorNames.set("peachpuff",16767673);
			away3d.utils.Cast._colorNames.set("papayawhip",16773077);
			away3d.utils.Cast._colorNames.set("beige",16119260);
			away3d.utils.Cast._colorNames.set("seashell",16774638);
			away3d.utils.Cast._colorNames.set("lavenderblush",16773365);
			away3d.utils.Cast._colorNames.set("mistyrose",16770273);
			away3d.utils.Cast._colorNames.set("snow",16775930);
			away3d.utils.Cast._colorNames.set("white",16777215);
			away3d.utils.Cast._colorNames.set("whitesmoke",16119285);
			away3d.utils.Cast._colorNames.set("gainsboro",14474460);
			away3d.utils.Cast._colorNames.set("lightgrey",13882323);
			away3d.utils.Cast._colorNames.set("silver",12632256);
			away3d.utils.Cast._colorNames.set("darkgrey",11119017);
			away3d.utils.Cast._colorNames.set("grey",8421504);
			away3d.utils.Cast._colorNames.set("lightslategrey",7833753);
			away3d.utils.Cast._colorNames.set("slategrey",7372944);
			away3d.utils.Cast._colorNames.set("dimgrey",6908265);
			away3d.utils.Cast._colorNames.set("darkslategrey",3100495);
			away3d.utils.Cast._colorNames.set("black",0);
			away3d.utils.Cast._colorNames.set("transparent",-16777216);
		}
		if(away3d.utils.Cast._colorNames.exists(data)) return away3d.utils.Cast._colorNames.get(data);
		if((js.Boot.__cast(data , String)).length == 6 && away3d.utils.Cast.isHex(data)) return Std.parseInt("0x" + Std.string(data));
	}
	return 16777215;
};
away3d.utils.Cast.color = function(data) {
	var result = away3d.utils.Cast.tryColor(data);
	if(result == -1) throw new away3d.errors.CastError("Can't cast to color: " + Std.string(data));
	return result;
};
away3d.utils.Cast.tryClass = function(name) {
	if(away3d.utils.Cast._notClasses.exists(name)) return name;
	var result = away3d.utils.Cast._classes.get(name);
	if(result != null) return result;
	try {
		result = Type.resolveClass(name);
		away3d.utils.Cast._classes.set(name,result);
		return result;
	} catch( error ) {
	}
	away3d.utils.Cast._notClasses.set(name,true);
	return name;
};
away3d.utils.Cast.bitmapData = function(data) {
	if(data == null) return null;
	if(typeof(data) == "string") data = openfl.Assets.getBitmapData(data);
	if(js.Boot.__instanceof(data,Class)) try {
		data = Type.createInstance(data,[]);
	} catch( bitmapError ) {
		data = Type.createInstance(data,[0,0]);
	}
	if(js.Boot.__instanceof(data,openfl.display.BitmapData)) return data;
	if(js.Boot.__instanceof(data,openfl.display.Bitmap)) {
		if((js.Boot.__cast(data , openfl.display.Bitmap)).bitmapData != null) return (js.Boot.__cast(data , openfl.display.Bitmap)).bitmapData;
	}
	if(js.Boot.__instanceof(data,openfl.display.DisplayObject)) {
		var ds;
		ds = js.Boot.__cast(data , openfl.display.DisplayObject);
		var bmd = new openfl.display.BitmapData(Std["int"](ds.get_width()),Std["int"](ds.get_height()),true,65535);
		var mat = ds.get_transform().get_matrix().clone();
		mat.tx = 0;
		mat.ty = 0;
		bmd.draw(ds,mat,ds.get_transform().colorTransform,ds.blendMode,bmd.rect,true);
		return bmd;
	}
	throw new away3d.errors.CastError("Can't cast to BitmapData: " + Std.string(data));
};
away3d.utils.Cast.bitmapTexture = function(data) {
	if(data == null) return null;
	if(typeof(data) == "string") data = openfl.Assets.getBitmapData(data);
	if(js.Boot.__instanceof(data,Class)) try {
		data = Type.createInstance(data,[]);
	} catch( materialError ) {
		data = Type.createInstance(data,[0,0]);
	}
	if(js.Boot.__instanceof(data,away3d.textures.BitmapTexture)) return data;
	try {
		var bmd = away3d.utils.Cast.bitmapData(data);
		return new away3d.textures.BitmapTexture(bmd);
	} catch( error ) {
		if( js.Boot.__instanceof(error,away3d.errors.CastError) ) {
		} else throw(error);
	}
	throw new away3d.errors.CastError("Can't cast to BitmapTexture: " + Std.string(data));
};
var format = {};
format.tools = {};
format.tools.Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["format.tools.Adler32"] = format.tools.Adler32;
format.tools.Adler32.__name__ = ["format","tools","Adler32"];
format.tools.Adler32.read = function(i) {
	var a = new format.tools.Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
format.tools.Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		return a.a1 == this.a1 && a.a2 == this.a2;
	}
	,__class__: format.tools.Adler32
};
format.tools.Huffman = $hxClasses["format.tools.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
format.tools.Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = format.tools.Huffman; $x.toString = $estr; return $x; };
format.tools.Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = format.tools.Huffman; $x.toString = $estr; return $x; };
format.tools.Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = format.tools.Huffman; $x.toString = $estr; return $x; };
format.tools.HuffTools = function() {
};
$hxClasses["format.tools.HuffTools"] = format.tools.HuffTools;
format.tools.HuffTools.__name__ = ["format","tools","HuffTools"];
format.tools.HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 2:
			throw "assert";
			break;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db?da:db);
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) return t;
		if(d == 1) switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			return format.tools.Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
		default:
			throw "assert";
		}
		var size = 1 << d;
		var table = new Array();
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			table.push(format.tools.Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return format.tools.Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else table[p] = this.treeCompress(t);
			break;
		default:
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) throw "Invalid huffman";
		var idx = v << 5 | len;
		if(bits.exists(idx)) return format.tools.Huffman.Found(bits.get(idx));
		v <<= 1;
		len += 1;
		return format.tools.Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = new Array();
		var tmp = new Array();
		if(maxbits > 32) throw "Invalid huffman";
		var _g = 0;
		while(_g < maxbits) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g1 = 0;
		while(_g1 < nlengths) {
			var i1 = _g1++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) throw "Invalid huffman";
			counts[p]++;
		}
		var code = 0;
		var _g11 = 1;
		var _g2 = maxbits - 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe.ds.IntMap();
		var _g3 = 0;
		while(_g3 < nlengths) {
			var i3 = _g3++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.set(n << 5 | l,i3);
			}
		}
		return this.treeCompress(format.tools.Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: format.tools.HuffTools
};
format.tools.Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format.tools.Inflate;
format.tools.Inflate.__name__ = ["format","tools","Inflate"];
format.tools.Inflate.run = function(bytes) {
	return format.tools.InflateImpl.run(new haxe.io.BytesInput(bytes));
};
format.tools._InflateImpl = {};
format.tools._InflateImpl.Window = function(hasCrc) {
	this.buffer = haxe.io.Bytes.alloc(65536);
	this.pos = 0;
	if(hasCrc) this.crc = new format.tools.Adler32();
};
$hxClasses["format.tools._InflateImpl.Window"] = format.tools._InflateImpl.Window;
format.tools._InflateImpl.Window.__name__ = ["format","tools","_InflateImpl","Window"];
format.tools._InflateImpl.Window.prototype = {
	slide: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,32768);
		var b = haxe.io.Bytes.alloc(65536);
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) this.slide();
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) this.slide();
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,this.pos);
		return this.crc;
	}
	,__class__: format.tools._InflateImpl.Window
};
format.tools._InflateImpl.State = $hxClasses["format.tools._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
format.tools._InflateImpl.State.Head = ["Head",0];
format.tools._InflateImpl.State.Head.toString = $estr;
format.tools._InflateImpl.State.Head.__enum__ = format.tools._InflateImpl.State;
format.tools._InflateImpl.State.Block = ["Block",1];
format.tools._InflateImpl.State.Block.toString = $estr;
format.tools._InflateImpl.State.Block.__enum__ = format.tools._InflateImpl.State;
format.tools._InflateImpl.State.CData = ["CData",2];
format.tools._InflateImpl.State.CData.toString = $estr;
format.tools._InflateImpl.State.CData.__enum__ = format.tools._InflateImpl.State;
format.tools._InflateImpl.State.Flat = ["Flat",3];
format.tools._InflateImpl.State.Flat.toString = $estr;
format.tools._InflateImpl.State.Flat.__enum__ = format.tools._InflateImpl.State;
format.tools._InflateImpl.State.Crc = ["Crc",4];
format.tools._InflateImpl.State.Crc.toString = $estr;
format.tools._InflateImpl.State.Crc.__enum__ = format.tools._InflateImpl.State;
format.tools._InflateImpl.State.Dist = ["Dist",5];
format.tools._InflateImpl.State.Dist.toString = $estr;
format.tools._InflateImpl.State.Dist.__enum__ = format.tools._InflateImpl.State;
format.tools._InflateImpl.State.DistOne = ["DistOne",6];
format.tools._InflateImpl.State.DistOne.toString = $estr;
format.tools._InflateImpl.State.DistOne.__enum__ = format.tools._InflateImpl.State;
format.tools._InflateImpl.State.Done = ["Done",7];
format.tools._InflateImpl.State.Done.toString = $estr;
format.tools._InflateImpl.State.Done.__enum__ = format.tools._InflateImpl.State;
format.tools.InflateImpl = function(i,header,crc) {
	if(crc == null) crc = true;
	if(header == null) header = true;
	this["final"] = false;
	this.htools = new format.tools.HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	if(header) this.state = format.tools._InflateImpl.State.Head; else this.state = format.tools._InflateImpl.State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new format.tools._InflateImpl.Window(crc);
};
$hxClasses["format.tools.InflateImpl"] = format.tools.InflateImpl;
format.tools.InflateImpl.__name__ = ["format","tools","InflateImpl"];
format.tools.InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) bufsize = 65536;
	var buf = haxe.io.Bytes.alloc(bufsize);
	var output = new haxe.io.BytesBuffer();
	var inflate = new format.tools.InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) break;
	}
	return output.getBytes();
};
format.tools.InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(format.tools.InflateImpl.FIXED_HUFFMAN != null) return format.tools.InflateImpl.FIXED_HUFFMAN;
		var a = new Array();
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143?8:n <= 255?9:n <= 279?7:8);
		}
		format.tools.InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return format.tools.InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) while(this.inflateLoop()) {
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) return 0; else if(this.getBit()) return 1 << n - 1 | this.getRevBits(n - 1); else return this.getRevBits(n - 1);
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit()?b:a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				i++;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) throw "Invalid data";
				while(i < end) {
					a[i] = prev;
					i++;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) throw "Invalid data";
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) throw "Invalid data";
				break;
			default:
				throw "Invalid data";
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8 || cinfo != 7) throw "Invalid data";
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) throw "Invalid data";
			if(fdict) throw "Unsupported dictionary";
			this.state = format.tools._InflateImpl.State.Block;
			return true;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = format.tools._InflateImpl.State.Done;
				return true;
			}
			var crc = format.tools.Adler32.read(this.input);
			if(!calc.equals(crc)) throw "Invalid CRC";
			this.state = format.tools._InflateImpl.State.Done;
			return true;
		case 7:
			return false;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) throw "Invalid data";
				this.state = format.tools._InflateImpl.State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = format.tools._InflateImpl.State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g2 = 0;
				while(_g2 < hclen) {
					var i = _g2++;
					this.lengths[format.tools.InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g21 = hclen;
				while(_g21 < 19) {
					var i1 = _g21++;
					this.lengths[format.tools.InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = new Array();
				var _g3 = 0;
				var _g22 = hlit + hdist;
				while(_g3 < _g22) {
					var i2 = _g3++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = format.tools._InflateImpl.State.CData;
				return true;
			default:
				throw "Invalid data";
			}
			break;
		case 3:
			var rlen;
			if(this.len < this.needed) rlen = this.len; else rlen = this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) if(this["final"]) this.state = format.tools._InflateImpl.State.Crc; else this.state = format.tools._InflateImpl.State.Block;
			return this.needed > 0;
		case 6:
			var rlen1;
			if(this.len < this.needed) rlen1 = this.len; else rlen1 = this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) this.state = format.tools._InflateImpl.State.CData;
			return this.needed > 0;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist;
				if(this.len < this.dist) rdist = this.len; else rdist = this.dist;
				var rlen2;
				if(this.needed < rdist) rlen2 = this.needed; else rlen2 = rdist;
				this.addDist(this.dist,rlen2);
				this.len -= rlen2;
			}
			if(this.len == 0) this.state = format.tools._InflateImpl.State.CData;
			return this.needed > 0;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				if(this["final"]) this.state = format.tools._InflateImpl.State.Crc; else this.state = format.tools._InflateImpl.State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = format.tools.InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) throw "Invalid data";
				this.len = format.tools.InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code;
				if(this.huffdist == null) dist_code = this.getRevBits(5); else dist_code = this.applyHuffman(this.huffdist);
				extra_bits = format.tools.InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) throw "Invalid data";
				this.dist = format.tools.InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) throw "Invalid data";
				if(this.dist == 1) this.state = format.tools._InflateImpl.State.DistOne; else this.state = format.tools._InflateImpl.State.Dist;
				return true;
			}
			break;
		}
	}
	,__class__: format.tools.InflateImpl
};
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.exceptionStack = function() {
	return [];
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe.Log = function() { };
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = new Array();
	this.cache = new Array();
	var r = haxe.Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe.Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe.Unserializer;
haxe.Unserializer.__name__ = ["haxe","Unserializer"];
haxe.Unserializer.initCodes = function() {
	var codes = new Array();
	var _g1 = 0;
	var _g = haxe.Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe.Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe.Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw "Invalid object";
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw "Invalid object key";
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw "Invalid enum format";
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = new Array();
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			var p1 = this.pos;
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
			}
			return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid string length";
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return Math.NaN;
		case 109:
			return Math.NEGATIVE_INFINITY;
		case 112:
			return Math.POSITIVE_INFINITY;
		case 97:
			var buf = this.buf;
			var a = new Array();
			this.cache.push(a);
			while(true) {
				var c1 = this.buf.charCodeAt(this.pos);
				if(c1 == 104) {
					this.pos++;
					break;
				}
				if(c1 == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw "Invalid reference";
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw "Invalid string reference";
			return this.scache[n2];
		case 120:
			throw this.unserialize();
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw "Class not found " + name;
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw "Enum not found " + name1;
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw "Enum not found " + name2;
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw "Unknown enum index " + name2 + "@" + index;
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe.ds.StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe.ds.IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c2 = this.get(this.pos++);
			while(c2 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c2 = this.get(this.pos++);
			}
			if(c2 != 104) throw "Invalid IntMap format";
			return h1;
		case 77:
			var h2 = new haxe.ds.ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			var s3 = HxOverrides.substr(this.buf,this.pos,19);
			d = HxOverrides.strDate(s3);
			this.cache.push(d);
			this.pos += 19;
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw "Invalid bytes length";
			var codes = haxe.Unserializer.CODES;
			if(codes == null) {
				codes = haxe.Unserializer.initCodes();
				haxe.Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe.io.Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c21 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c21 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c22 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c22 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c22 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw "Class not found " + name3;
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw "Invalid custom data";
			return o2;
		default:
		}
		this.pos--;
		throw "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos;
	}
	,__class__: haxe.Unserializer
};
haxe.crypto = {};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe.io.Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.ofData = function(b) {
	return new haxe.io.Bytes(b.length,b);
};
haxe.io.Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw haxe.io.Error.OutsideBounds;
		var b1 = this.b;
		var b2 = src.b;
		if(b1 == b2 && pos > srcpos) {
			var i = len;
			while(i > 0) {
				i--;
				b1[i + pos] = b2[i + srcpos];
			}
			return;
		}
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			b1[i1 + pos] = b2[i1 + srcpos];
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,getData: function() {
		return this.b;
	}
	,__class__: haxe.io.Bytes
};
haxe.io.BytesBuffer = function() {
	this.b = new Array();
};
$hxClasses["haxe.io.BytesBuffer"] = haxe.io.BytesBuffer;
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype = {
	addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) throw haxe.io.Error.OutsideBounds;
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,getBytes: function() {
		var bytes = new haxe.io.Bytes(this.b.length,this.b);
		this.b = null;
		return bytes;
	}
	,__class__: haxe.io.BytesBuffer
};
haxe.io.Input = function() { };
$hxClasses["haxe.io.Input"] = haxe.io.Input;
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype = {
	readByte: function() {
		throw "Not implemented";
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw haxe.io.Error.OutsideBounds;
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,read: function(nbytes) {
		var s = haxe.io.Bytes.alloc(nbytes);
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) throw haxe.io.Error.Blocked;
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) return ch2 | ch1 << 8; else return ch1 | ch2 << 8;
	}
	,__class__: haxe.io.Input
};
haxe.io.BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw haxe.io.Error.OutsideBounds;
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe.io.BytesInput;
haxe.io.BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe.io.BytesInput.__super__ = haxe.io.Input;
haxe.io.BytesInput.prototype = $extend(haxe.io.Input.prototype,{
	readByte: function() {
		if(this.len == 0) throw new haxe.io.Eof();
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw haxe.io.Error.OutsideBounds;
		if(this.len == 0 && len > 0) throw new haxe.io.Eof();
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe.io.BytesInput
});
haxe.io.Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.Path = function(path) {
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe.io.Path;
haxe.io.Path.__name__ = ["haxe","io","Path"];
haxe.io.Path.withoutExtension = function(path) {
	var s = new haxe.io.Path(path);
	s.ext = null;
	return s.toString();
};
haxe.io.Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe.io.Path
};
var js = {};
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
openfl.AssetCache = function() {
	this.enabled = true;
	this.bitmapData = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.sound = new haxe.ds.StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl.AssetCache;
openfl.AssetCache.__name__ = ["openfl","AssetCache"];
openfl.AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.sound = new haxe.ds.StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,__class__: openfl.AssetCache
};
openfl.Assets = function() { };
$hxClasses["openfl.Assets"] = openfl.Assets;
openfl.Assets.__name__ = ["openfl","Assets"];
openfl.Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl.Assets.initialize();
	openfl.Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl.Assets.dispatchEvent = function(event) {
	openfl.Assets.initialize();
	return openfl.Assets.dispatcher.dispatchEvent(event);
};
openfl.Assets.exists = function(id,type) {
	openfl.Assets.initialize();
	if(type == null) type = openfl.AssetType.BINARY;
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
openfl.Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.bitmapData.exists(id)) {
		var bitmapData = openfl.Assets.cache.bitmapData.get(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.IMAGE)) {
			if(library.isLocal(symbolName,openfl.AssetType.IMAGE)) {
				var bitmapData1 = library.getBitmapData(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.bitmapData.set(id,bitmapData1);
				return bitmapData1;
			} else haxe.Log.trace("[openfl.Assets] BitmapData asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 139, className : "openfl.Assets", methodName : "getBitmapData"});
		} else haxe.Log.trace("[openfl.Assets] There is no BitmapData asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 145, className : "openfl.Assets", methodName : "getBitmapData"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 151, className : "openfl.Assets", methodName : "getBitmapData"});
	return null;
};
openfl.Assets.getBytes = function(id) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.BINARY)) {
			if(library.isLocal(symbolName,openfl.AssetType.BINARY)) return library.getBytes(symbolName); else haxe.Log.trace("[openfl.Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 188, className : "openfl.Assets", methodName : "getBytes"});
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 194, className : "openfl.Assets", methodName : "getBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 200, className : "openfl.Assets", methodName : "getBytes"});
	return null;
};
openfl.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.font.exists(id)) return openfl.Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.FONT)) {
			if(library.isLocal(symbolName,openfl.AssetType.FONT)) {
				var font = library.getFont(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.font.set(id,font);
				return font;
			} else haxe.Log.trace("[openfl.Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 251, className : "openfl.Assets", methodName : "getFont"});
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 257, className : "openfl.Assets", methodName : "getFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 263, className : "openfl.Assets", methodName : "getFont"});
	return null;
};
openfl.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return openfl.Assets.libraries.get(name);
};
openfl.Assets.getMovieClip = function(id) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MOVIE_CLIP)) {
			if(library.isLocal(symbolName,openfl.AssetType.MOVIE_CLIP)) return library.getMovieClip(symbolName); else haxe.Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 313, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 319, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 325, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl.Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MUSIC)) {
			if(library.isLocal(symbolName,openfl.AssetType.MUSIC)) {
				var sound1 = library.getMusic(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.sound.set(id,sound1);
				return sound1;
			} else haxe.Log.trace("[openfl.Assets] Sound asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 382, className : "openfl.Assets", methodName : "getMusic"});
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 388, className : "openfl.Assets", methodName : "getMusic"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 394, className : "openfl.Assets", methodName : "getMusic"});
	return null;
};
openfl.Assets.getPath = function(id) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe.Log.trace("[openfl.Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 429, className : "openfl.Assets", methodName : "getPath"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 435, className : "openfl.Assets", methodName : "getPath"});
	return null;
};
openfl.Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.SOUND)) {
			if(library.isLocal(symbolName,openfl.AssetType.SOUND)) {
				var sound1 = library.getSound(symbolName);
				if(useCache && openfl.Assets.cache.enabled) openfl.Assets.cache.sound.set(id,sound1);
				return sound1;
			} else haxe.Log.trace("[openfl.Assets] Sound asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 492, className : "openfl.Assets", methodName : "getSound"});
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 498, className : "openfl.Assets", methodName : "getSound"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 504, className : "openfl.Assets", methodName : "getSound"});
	return null;
};
openfl.Assets.getText = function(id) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.TEXT)) {
			if(library.isLocal(symbolName,openfl.AssetType.TEXT)) return library.getText(symbolName); else haxe.Log.trace("[openfl.Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 541, className : "openfl.Assets", methodName : "getText"});
		} else haxe.Log.trace("[openfl.Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 547, className : "openfl.Assets", methodName : "getText"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 553, className : "openfl.Assets", methodName : "getText"});
	return null;
};
openfl.Assets.hasEventListener = function(type) {
	openfl.Assets.initialize();
	return openfl.Assets.dispatcher.hasEventListener(type);
};
openfl.Assets.initialize = function() {
	if(!openfl.Assets.initialized) {
		openfl.Assets.registerLibrary("default",new DefaultAssetLibrary());
		openfl.Assets.initialized = true;
	}
};
openfl.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled) {
		if(type == openfl.AssetType.IMAGE || type == null) {
			if(openfl.Assets.cache.bitmapData.exists(id)) return true;
		}
		if(type == openfl.AssetType.FONT || type == null) {
			if(openfl.Assets.cache.font.exists(id)) return true;
		}
		if(type == openfl.AssetType.SOUND || type == openfl.AssetType.MUSIC || type == null) {
			if(openfl.Assets.cache.sound.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl.Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData.__sourceImage != null || bitmapData.__sourceCanvas != null;
	return true;
};
openfl.Assets.isValidSound = function(sound) {
	return true;
};
openfl.Assets.list = function(type) {
	openfl.Assets.initialize();
	var items = [];
	var $it0 = openfl.Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
openfl.Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.bitmapData.exists(id)) {
		var bitmapData = openfl.Assets.cache.bitmapData.get(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.IMAGE)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadBitmapData(symbolName,function(bitmapData1) {
				openfl.Assets.cache.bitmapData.set(id,bitmapData1);
				handler(bitmapData1);
			}); else library.loadBitmapData(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no BitmapData asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 750, className : "openfl.Assets", methodName : "loadBitmapData"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 756, className : "openfl.Assets", methodName : "loadBitmapData"});
	handler(null);
};
openfl.Assets.loadBytes = function(id,handler) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.BINARY)) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 786, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 792, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
};
openfl.Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.font.exists(id)) {
		handler(openfl.Assets.cache.font.get(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.FONT)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadFont(symbolName,function(font) {
				openfl.Assets.cache.font.set(id,font);
				handler(font);
			}); else library.loadFont(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 843, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 849, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
};
openfl.Assets.loadLibrary = function(name,handler) {
	openfl.Assets.initialize();
	var data = openfl.Assets.getText("libraries/" + name + ".dat");
	if(data != null && data != "") {
		var unserializer = new haxe.Unserializer(data);
		unserializer.setResolver({ resolveEnum : openfl.Assets.resolveEnum, resolveClass : openfl.Assets.resolveClass});
		var library = unserializer.unserialize();
		openfl.Assets.libraries.set(name,library);
		library.eventCallback = openfl.Assets.library_onEvent;
		library.load(handler);
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 880, className : "openfl.Assets", methodName : "loadLibrary"});
};
openfl.Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) {
			handler(sound);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MUSIC)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadMusic(symbolName,function(sound1) {
				openfl.Assets.cache.sound.set(id,sound1);
				handler(sound1);
			}); else library.loadMusic(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 935, className : "openfl.Assets", methodName : "loadMusic"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 941, className : "openfl.Assets", methodName : "loadMusic"});
	handler(null);
};
openfl.Assets.loadMovieClip = function(id,handler) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.MOVIE_CLIP)) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 971, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 977, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
};
openfl.Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	openfl.Assets.initialize();
	if(useCache && openfl.Assets.cache.enabled && openfl.Assets.cache.sound.exists(id)) {
		var sound = openfl.Assets.cache.sound.get(id);
		if(openfl.Assets.isValidSound(sound)) {
			handler(sound);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.SOUND)) {
			if(useCache && openfl.Assets.cache.enabled) library.loadSound(symbolName,function(sound1) {
				openfl.Assets.cache.sound.set(id,sound1);
				handler(sound1);
			}); else library.loadSound(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Sound asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 1034, className : "openfl.Assets", methodName : "loadSound"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 1040, className : "openfl.Assets", methodName : "loadSound"});
	handler(null);
};
openfl.Assets.loadText = function(id,handler) {
	openfl.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,openfl.AssetType.TEXT)) {
			library.loadText(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 1070, className : "openfl.Assets", methodName : "loadText"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 1076, className : "openfl.Assets", methodName : "loadText"});
	handler(null);
};
openfl.Assets.registerLibrary = function(name,library) {
	if(openfl.Assets.libraries.exists(name)) openfl.Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = openfl.Assets.library_onEvent;
	openfl.Assets.libraries.set(name,library);
};
openfl.Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl.Assets.initialize();
	openfl.Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl.Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl.Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl.Assets.unloadLibrary = function(name) {
	openfl.Assets.initialize();
	var library = openfl.Assets.libraries.get(name);
	if(library != null) {
		openfl.Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	openfl.Assets.libraries.remove(name);
};
openfl.Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl.Assets.cache.clear();
		openfl.Assets.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
};
openfl.AssetData = function() {
};
$hxClasses["openfl.AssetData"] = openfl.AssetData;
openfl.AssetData.__name__ = ["openfl","AssetData"];
openfl.AssetData.prototype = {
	__class__: openfl.AssetData
};
openfl.AssetType = $hxClasses["openfl.AssetType"] = { __ename__ : true, __constructs__ : ["BINARY","FONT","IMAGE","MOVIE_CLIP","MUSIC","SOUND","TEMPLATE","TEXT"] };
openfl.AssetType.BINARY = ["BINARY",0];
openfl.AssetType.BINARY.toString = $estr;
openfl.AssetType.BINARY.__enum__ = openfl.AssetType;
openfl.AssetType.FONT = ["FONT",1];
openfl.AssetType.FONT.toString = $estr;
openfl.AssetType.FONT.__enum__ = openfl.AssetType;
openfl.AssetType.IMAGE = ["IMAGE",2];
openfl.AssetType.IMAGE.toString = $estr;
openfl.AssetType.IMAGE.__enum__ = openfl.AssetType;
openfl.AssetType.MOVIE_CLIP = ["MOVIE_CLIP",3];
openfl.AssetType.MOVIE_CLIP.toString = $estr;
openfl.AssetType.MOVIE_CLIP.__enum__ = openfl.AssetType;
openfl.AssetType.MUSIC = ["MUSIC",4];
openfl.AssetType.MUSIC.toString = $estr;
openfl.AssetType.MUSIC.__enum__ = openfl.AssetType;
openfl.AssetType.SOUND = ["SOUND",5];
openfl.AssetType.SOUND.toString = $estr;
openfl.AssetType.SOUND.__enum__ = openfl.AssetType;
openfl.AssetType.TEMPLATE = ["TEMPLATE",6];
openfl.AssetType.TEMPLATE.toString = $estr;
openfl.AssetType.TEMPLATE.__enum__ = openfl.AssetType;
openfl.AssetType.TEXT = ["TEXT",7];
openfl.AssetType.TEXT.toString = $estr;
openfl.AssetType.TEXT.__enum__ = openfl.AssetType;
openfl.Lib = function() { };
$hxClasses["openfl.Lib"] = openfl.Lib;
openfl.Lib.__name__ = ["openfl","Lib"];
openfl.Lib.current = null;
openfl.Lib["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
openfl.Lib.attach = function(name) {
	return new openfl.display.MovieClip();
};
openfl.Lib.create = function(element,width,height,backgroundColor) {
	if(width == null) width = 0;
	if(height == null) height = 0;
	
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
	var stage = new openfl.display.Stage(width,height,element,backgroundColor);
	if(openfl.Lib.current == null) {
		openfl.Lib.current = new openfl.display.MovieClip();
		stage.addChild(openfl.Lib.current);
	}
};
openfl.Lib.getTimer = function() {
	return Std["int"]((haxe.Timer.stamp() - openfl.Lib.__startTime) * 1000);
};
openfl.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl.Lib.notImplemented = function(api) {
	if(!openfl.Lib.__sentWarnings.exists(api)) {
		openfl.Lib.__sentWarnings.set(api,true);
		haxe.Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 114, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl.Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl.Lib.trace = function(arg) {
	haxe.Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 134, className : "openfl.Lib", methodName : "trace"});
};
openfl.Memory = function() { };
$hxClasses["openfl.Memory"] = openfl.Memory;
openfl.Memory.__name__ = ["openfl","Memory"];
openfl.Memory.gcRef = null;
openfl.Memory.len = null;
openfl.Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl.Memory.gcRef.position;
	openfl.Memory.gcRef.position = position;
	var value = action();
	openfl.Memory.gcRef.position = oldPosition;
	return value;
};
openfl.Memory.getByte = function(addr) {
	return openfl.Memory.gcRef.__get(addr);
};
openfl.Memory.getDouble = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readDouble();
	});
};
openfl.Memory.getFloat = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readFloat();
	});
};
openfl.Memory.getI32 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readInt();
	});
};
openfl.Memory.getUI16 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readUnsignedShort();
	});
};
openfl.Memory.select = function(inBytes) {
	openfl.Memory.gcRef = inBytes;
	if(inBytes != null) openfl.Memory.len = inBytes.length; else openfl.Memory.len = 0;
};
openfl.Memory.setByte = function(addr,v) {
	openfl.Memory.gcRef.__set(addr,v);
};
openfl.Memory.setDouble = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeDouble(v);
	});
};
openfl.Memory.setFloat = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeFloat(v);
	});
};
openfl.Memory.setI16 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl.Memory.setI32 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeInt(v);
	});
};
openfl.VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl.VectorDataIterator;
openfl.VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl.VectorDataIterator.prototype = {
	hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl.VectorDataIterator
};
openfl.display.Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl.display.DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl.display.PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl.display.Bitmap;
openfl.display.Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl.display.Bitmap.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Bitmap.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl.geom.Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(this.__worldTransform);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		var context = renderSession.context;
		if(this.bitmapData != null && this.bitmapData.__valid) {
			if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
			this.bitmapData.__syncImageData();
			context.globalAlpha = this.__worldAlpha;
			var transform = this.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(!this.smoothing) {
				context.mozImageSmoothingEnabled = false;
				context.webkitImageSmoothingEnabled = false;
				context.imageSmoothingEnabled = false;
			}
			if(this.get_scrollRect() == null) {
				if(this.bitmapData.__sourceImage != null) context.drawImage(this.bitmapData.__sourceImage,0,0); else context.drawImage(this.bitmapData.__sourceCanvas,0,0);
			} else if(this.bitmapData.__sourceImage != null) context.drawImage(this.bitmapData.__sourceImage,this.get_scrollRect().x,this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height,this.get_scrollRect().x,this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height); else context.drawImage(this.bitmapData.__sourceCanvas,this.get_scrollRect().x,this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height,this.get_scrollRect().x,this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(!this.smoothing) {
				context.mozImageSmoothingEnabled = true;
				context.webkitImageSmoothingEnabled = true;
				context.imageSmoothingEnabled = true;
			}
			if(this.__mask != null) renderSession.maskManager.popMask();
		}
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__valid) {
			if(this.bitmapData.__sourceImage != null) this.__renderDOMImage(renderSession); else this.__renderDOMCanvas(renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderDOMCanvas: function(renderSession) {
		if(this.__image != null) {
			renderSession.element.removeChild(this.__image);
			this.__image = null;
		}
		if(this.__canvas == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__canvasContext = this.__canvas.getContext("2d");
			if(!this.smoothing) {
				this.__canvasContext.mozImageSmoothingEnabled = false;
				this.__canvasContext.webkitImageSmoothingEnabled = false;
				this.__canvasContext.imageSmoothingEnabled = false;
			}
			this.__initializeElement(this.__canvas,renderSession);
		}
		this.bitmapData.__syncImageData();
		this.__canvas.width = this.bitmapData.width;
		this.__canvas.height = this.bitmapData.height;
		this.__canvasContext.globalAlpha = this.__worldAlpha;
		this.__canvasContext.drawImage(this.bitmapData.__sourceCanvas,0,0);
		this.__applyStyle(renderSession,true,false,true);
	}
	,__renderDOMImage: function(renderSession) {
		if(this.__canvas != null) {
			renderSession.element.removeChild(this.__canvas);
			this.__canvas = null;
		}
		if(this.__image == null) {
			this.__image = window.document.createElement("img");
			this.__image.src = this.bitmapData.__sourceImage.src;
			this.__initializeElement(this.__image,renderSession);
		}
		this.__applyStyle(renderSession,true,true,true);
	}
	,__renderMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl.display.Bitmap
});
openfl.display.BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.transparent = transparent;
	if(width > 0 && height > 0) {
		this.width = width;
		this.height = height;
		this.rect = new openfl.geom.Rectangle(0,0,width,height);
		this.__createCanvas(width,height);
		if(!transparent) fillColor = -16777216 | fillColor & 16777215;
		this.__fillRect(new openfl.geom.Rectangle(0,0,width,height),fillColor);
	}
};
$hxClasses["openfl.display.BitmapData"] = openfl.display.BitmapData;
openfl.display.BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl.display.BitmapData.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.BitmapData.__base64Encoder = null;
openfl.display.BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromBase64(base64,type,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromFile = function(path,onload,onfail) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__sourceImage = new Image();
	bitmapData.__sourceImage.onload = function(_) {
		bitmapData.width = bitmapData.__sourceImage.width;
		bitmapData.height = bitmapData.__sourceImage.height;
		bitmapData.rect = new openfl.geom.Rectangle(0,0,bitmapData.__sourceImage.width,bitmapData.__sourceImage.height);
		bitmapData.__valid = true;
		if(onload != null) onload(bitmapData);
	};
	bitmapData.__sourceImage.onerror = function(_1) {
		bitmapData.__valid = false;
		if(onfail != null) onfail();
	};
	bitmapData.__sourceImage.src = path;
	if(bitmapData.__sourceImage.complete) {
	}
	return bitmapData;
};
openfl.display.BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__sourceImage = image;
	bitmapData.width = image.width;
	bitmapData.height = image.height;
	bitmapData.rect = new openfl.geom.Rectangle(0,0,image.width,image.height);
	bitmapData.__valid = true;
	return bitmapData;
};
openfl.display.BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.width = canvas.width;
	bitmapData.height = canvas.height;
	bitmapData.rect = new openfl.geom.Rectangle(0,0,canvas.width,canvas.height);
	bitmapData.__createCanvas(canvas.width,canvas.height);
	bitmapData.__sourceContext.drawImage(canvas,0,0);
	return bitmapData;
};
openfl.display.BitmapData.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(openfl.display.BitmapData.__base64Encoder == null) openfl.display.BitmapData.__base64Encoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(openfl.display.BitmapData.__base64Chars));
	return openfl.display.BitmapData.__base64Encoder.encodeBytes(haxe.io.Bytes.ofData(bytes.byteView)).toString() + extension;
};
openfl.display.BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl.display.BitmapData.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
openfl.display.BitmapData.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
openfl.display.BitmapData.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 38) {
		var b = bytes.readUnsignedByte();
		return (b == 7 || b == 9) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
openfl.display.BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl.display.BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__valid || sourceBitmapData == null || !sourceBitmapData.__valid) return;
		this.__convertToCanvas();
		this.__createImageData();
		sourceBitmapData.__convertToCanvas();
		sourceBitmapData.__createImageData();
		filter.__applyFilter(this.__sourceImageData,sourceBitmapData.__sourceImageData,sourceRect,destPoint);
		this.__sourceImageDataChanged = true;
	}
	,clone: function() {
		this.__syncImageData();
		if(!this.__valid) return new openfl.display.BitmapData(this.width,this.height,this.transparent); else if(this.__sourceImage != null) return openfl.display.BitmapData.fromImage(this.__sourceImage,this.transparent); else return openfl.display.BitmapData.fromCanvas(this.__sourceCanvas,this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		rect = this.__clipRect(rect);
		if(!this.__valid || rect == null) return;
		this.__convertToCanvas();
		this.__createImageData();
		var data = this.__sourceImageData.data;
		var stride = this.width * 4;
		var offset;
		var _g1 = rect.y | 0;
		var _g = rect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = rect.x | 0;
			var _g2 = rect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				offset = row * stride + column * 4;
				data[offset] = data[offset] * colorTransform.redMultiplier + colorTransform.redOffset | 0;
				data[offset + 1] = data[offset + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset | 0;
				data[offset + 2] = data[offset + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset | 0;
				data[offset + 3] = data[offset + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset | 0;
			}
		}
		this.__sourceImageDataChanged = true;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(!this.__valid || sourceRect == null) return;
		if(destChannel == 8 && !this.transparent) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceBitmapData.width) sourceRect.width = sourceBitmapData.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceBitmapData.height) sourceRect.height = sourceBitmapData.height - sourceRect.y;
		var destIdx = -1;
		if(destChannel == 8) destIdx = 3; else if(destChannel == 4) destIdx = 2; else if(destChannel == 2) destIdx = 1; else if(destChannel == 1) destIdx = 0; else throw "Invalid destination BitmapDataChannel passed to BitmapData::copyChannel.";
		var srcIdx = -1;
		if(sourceChannel == 8) srcIdx = 3; else if(sourceChannel == 4) srcIdx = 2; else if(sourceChannel == 2) srcIdx = 1; else if(sourceChannel == 1) srcIdx = 0; else throw "Invalid source BitmapDataChannel passed to BitmapData::copyChannel.";
		sourceBitmapData.__convertToCanvas();
		sourceBitmapData.__createImageData();
		var srcData = sourceBitmapData.__sourceImageData.data;
		var srcStride = sourceBitmapData.width * 4 | 0;
		var srcPosition = sourceRect.x * 4 + srcStride * sourceRect.y + srcIdx | 0;
		var srcRowOffset = srcStride - (4 * sourceRect.width | 0);
		var srcRowEnd = 4 * (sourceRect.x + sourceRect.width) | 0;
		this.__convertToCanvas();
		this.__createImageData();
		var destData = this.__sourceImageData.data;
		var destStride = this.width * 4 | 0;
		var destPosition = destPoint.x * 4 + destStride * destPoint.y + destIdx | 0;
		var destRowOffset = destStride - (4 * sourceRect.width | 0);
		var destRowEnd = 4 * (destPoint.x + sourceRect.width) | 0;
		var length = sourceRect.width * sourceRect.height | 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			destData[destPosition] = srcData[srcPosition];
			srcPosition += 4;
			destPosition += 4;
			if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
			if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
		}
		this.__sourceImageDataChanged = true;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__valid || sourceBitmapData == null) return;
		if(sourceRect.x + sourceRect.width > sourceBitmapData.width) sourceRect.width = sourceBitmapData.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceBitmapData.height) sourceRect.height = sourceBitmapData.height - sourceRect.y;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(alphaBitmapData != null && alphaBitmapData.transparent) {
			if(alphaPoint == null) alphaPoint = new openfl.geom.Point();
			var tempData = this.clone();
			tempData.copyChannel(alphaBitmapData,new openfl.geom.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new openfl.geom.Point(sourceRect.x,sourceRect.y),8,8);
			sourceBitmapData = tempData;
		}
		this.__syncImageData();
		if(!mergeAlpha) {
			if(this.transparent && sourceBitmapData.transparent) this.__sourceContext.clearRect(destPoint.x,destPoint.y,sourceRect.width,sourceRect.height);
		}
		sourceBitmapData.__syncImageData();
		if(sourceBitmapData.__sourceImage != null) this.__sourceContext.drawImage(sourceBitmapData.__sourceImage,sourceRect.x | 0,sourceRect.y | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x | 0,destPoint.y | 0,sourceRect.width | 0,sourceRect.height | 0); else if(sourceBitmapData.__sourceCanvas != null) this.__sourceContext.drawImage(sourceBitmapData.__sourceCanvas,sourceRect.x | 0,sourceRect.y | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x | 0,destPoint.y | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	,dispose: function() {
		this.__sourceImage = null;
		this.__sourceCanvas = null;
		this.__sourceContext = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__valid = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__valid) return;
		this.__convertToCanvas();
		this.__syncImageData();
		var renderSession = new openfl.display.RenderSession();
		renderSession.context = this.__sourceContext;
		renderSession.roundPixels = true;
		if(!smoothing) {
			this.__sourceContext.mozImageSmoothingEnabled = false;
			this.__sourceContext.webkitImageSmoothingEnabled = false;
			this.__sourceContext.imageSmoothingEnabled = false;
		}
		var matrixCache = source.__worldTransform;
		if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl.geom.Matrix();
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__worldTransform = matrixCache;
		source.__updateChildren(true);
		if(!smoothing) {
			this.__sourceContext.mozImageSmoothingEnabled = true;
			this.__sourceContext.webkitImageSmoothingEnabled = true;
			this.__sourceContext.imageSmoothingEnabled = true;
		}
		this.__sourceContext.setTransform(1,0,0,1,0,0);
	}
	,encode: function(rect,compressor,byteArray) {
		openfl.Lib.notImplemented("BitmapData.encode");
		return null;
	}
	,fillRect: function(rect,color) {
		rect = this.__clipRect(rect);
		if(!this.__valid || rect == null) return;
		this.__convertToCanvas();
		this.__syncImageData();
		if(rect.x == 0 && rect.y == 0 && rect.width == this.width && rect.height == this.height) {
			if(this.transparent && (color & -16777216) == 0) {
				this.__sourceCanvas.width = this.width;
				return;
			}
		}
		this.__fillRect(rect,color);
	}
	,floodFill: function(x,y,color) {
		if(!this.__valid) return;
		this.__convertToCanvas();
		this.__createImageData();
		var data = this.__sourceImageData.data;
		var offset = y * (this.width * 4) + x * 4;
		var hitColorR = data[offset];
		var hitColorG = data[offset + 1];
		var hitColorB = data[offset + 2];
		var hitColorA;
		if(this.transparent) hitColorA = data[offset + 3]; else hitColorA = 255;
		var r = (color & 16711680) >>> 16;
		var g = (color & 65280) >>> 8;
		var b = color & 255;
		var a;
		if(this.transparent) a = (color & -16777216) >>> 24; else a = 255;
		if(hitColorR == r && hitColorG == g && hitColorB == b && hitColorA == a) return;
		var dx = [0,-1,1,0];
		var dy = [-1,0,0,1];
		var queue = new Array();
		queue.push(x);
		queue.push(y);
		while(queue.length > 0) {
			var curPointY = queue.pop();
			var curPointX = queue.pop();
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				var nextPointX = curPointX + dx[i];
				var nextPointY = curPointY + dy[i];
				if(nextPointX < 0 || nextPointY < 0 || nextPointX >= this.width || nextPointY >= this.height) continue;
				var nextPointOffset = (nextPointY * this.width + nextPointX) * 4;
				if(data[nextPointOffset] == hitColorR && data[nextPointOffset + 1] == hitColorG && data[nextPointOffset + 2] == hitColorB && data[nextPointOffset + 3] == hitColorA) {
					data[nextPointOffset] = r;
					data[nextPointOffset + 1] = g;
					data[nextPointOffset + 2] = b;
					data[nextPointOffset + 3] = a;
					queue.push(nextPointX);
					queue.push(nextPointY);
				}
			}
		}
		this.__sourceImageDataChanged = true;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		return this.rect.clone();
	}
	,getPixel: function(x,y) {
		if(!this.__valid || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		this.__convertToCanvas();
		this.__createImageData();
		var offset = 4 * y * this.width + x * 4;
		return this.__sourceImageData.data[offset] << 16 | this.__sourceImageData.data[offset + 1] << 8 | this.__sourceImageData.data[offset + 2];
	}
	,getPixel32: function(x,y) {
		if(!this.__valid || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		this.__convertToCanvas();
		this.__createImageData();
		return this.__getInt32(4 * y * this.width + x * 4,this.__sourceImageData.data);
	}
	,getPixels: function(rect) {
		if(!this.__valid) return null;
		this.__convertToCanvas();
		this.__createImageData();
		var byteArray = new openfl.utils.ByteArray();
		if(rect == null || rect.equals(this.rect)) {
			byteArray.set_length(this.__sourceImageData.data.length);
			byteArray.byteView.set(this.__sourceImageData.data);
		} else {
			var srcData = this.__sourceImageData.data;
			var srcStride = this.width * 4 | 0;
			var srcPosition = rect.x * 4 + srcStride * rect.y | 0;
			var srcRowOffset = srcStride - (4 * rect.width | 0);
			var srcRowEnd = 4 * (rect.x + rect.width) | 0;
			var length = 4 * rect.width * rect.height | 0;
			if(byteArray.allocated < length) byteArray.___resizeBuffer(byteArray.allocated = Std["int"](Math.max(length,byteArray.allocated * 2))); else if(byteArray.allocated > length) byteArray.___resizeBuffer(byteArray.allocated = length);
			byteArray.length = length;
			length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				byteArray.__set(i,srcData[srcPosition++]);
				if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
			}
		}
		byteArray.position = 0;
		return byteArray;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result = openfl._Vector.Vector_Impl_._new(length);
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(i >= result.length && !result.fixed) result.length = i + 1;
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl.geom.Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__valid) return false;
		openfl.Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__valid) return;
		openfl.Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var memory = new openfl.utils.ByteArray();
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		memory.set_length(sw * sh * 4);
		memory = this.getPixels(sourceRect);
		memory.position = 0;
		openfl.Memory.select(memory);
		var position;
		var pixelValue;
		var r;
		var g;
		var b;
		var color;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			position = i * 4;
			pixelValue = openfl.Memory._setPositionTemporarily(position,function() {
				return openfl.Memory.gcRef.readInt();
			});
			r = pixelValue >> 8 & 255;
			g = pixelValue >> 16 & 255;
			b = pixelValue >> 24 & 255;
			color = openfl.display.BitmapData.__flipPixel(-16777216 | redArray[r] | greenArray[g] | blueArray[b]);
			openfl.Memory.setI32(position,color);
		}
		memory.position = 0;
		var destRect = new openfl.geom.Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,memory);
		openfl.Memory.select(null);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl.Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		openfl.Lib.notImplemented("BitmapData.scroll");
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl.utils.ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,setPixel: function(x,y,color) {
		if(!this.__valid || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		this.__convertToCanvas();
		this.__createImageData();
		var offset = 4 * y * this.width + x * 4;
		this.__sourceImageData.data[offset] = (color & 16711680) >>> 16;
		this.__sourceImageData.data[offset + 1] = (color & 65280) >>> 8;
		this.__sourceImageData.data[offset + 2] = color & 255;
		if(this.transparent) this.__sourceImageData.data[offset + 3] = 255;
		this.__sourceImageDataChanged = true;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__valid || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		this.__convertToCanvas();
		this.__createImageData();
		var offset = 4 * y * this.width + x * 4;
		this.__sourceImageData.data[offset] = (color & 16711680) >>> 16;
		this.__sourceImageData.data[offset + 1] = (color & 65280) >>> 8;
		this.__sourceImageData.data[offset + 2] = color & 255;
		if(this.transparent) this.__sourceImageData.data[offset + 3] = (color & -16777216) >>> 24; else this.__sourceImageData.data[offset + 3] = 255;
		this.__sourceImageDataChanged = true;
	}
	,setPixels: function(rect,byteArray) {
		rect = this.__clipRect(rect);
		if(!this.__valid || rect == null) return;
		this.__convertToCanvas();
		var len = Math.round(4 * rect.width * rect.height);
		if(rect.x == 0 && rect.y == 0 && rect.width == this.width && rect.height == this.height) {
			if(this.__sourceImageData == null) this.__sourceImageData = this.__sourceContext.createImageData(this.width,this.height);
			this.__sourceImageData.data.set(byteArray.byteView);
		} else {
			this.__createImageData();
			var offset = Math.round(4 * this.width * rect.y + rect.x * 4);
			var pos = offset;
			var boundR = Math.round(4 * (rect.x + rect.width));
			var data = this.__sourceImageData.data;
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				if(pos % (this.width * 4) > boundR - 1) pos += this.width * 4 - boundR;
				data[pos] = byteArray.readByte();
				pos++;
			}
		}
		this.__sourceImageDataChanged = true;
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new openfl.utils.ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl.Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl.Memory._setPositionTemporarily(position,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl.display.BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl.Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl.Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new openfl.utils.ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl.Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl.Memory._setPositionTemporarily(position1,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl.display.BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl.Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl.Memory.setI32(position1,openfl.Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl.Memory.gcRef.readInt();
					}));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl.Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__convertToCanvas: function() {
		if(this.__loading) return;
		if(this.__sourceImage != null) {
			if(this.__sourceCanvas == null) {
				this.__createCanvas(this.__sourceImage.width,this.__sourceImage.height);
				this.__sourceContext.drawImage(this.__sourceImage,0,0);
			}
			this.__sourceImage = null;
		}
	}
	,__createCanvas: function(width,height) {
		if(this.__sourceCanvas == null) {
			this.__sourceCanvas = window.document.createElement("canvas");
			this.__sourceCanvas.width = width;
			this.__sourceCanvas.height = height;
			if(!this.transparent) {
				if(!this.transparent) this.__sourceCanvas.setAttribute("moz-opaque","true");
				this.__sourceContext = this.__sourceCanvas.getContext ("2d", { alpha: false });
			} else this.__sourceContext = this.__sourceCanvas.getContext("2d");
			this.__sourceContext.mozImageSmoothingEnabled = false;
			this.__sourceContext.webkitImageSmoothingEnabled = false;
			this.__sourceContext.imageSmoothingEnabled = false;
			this.__valid = true;
		}
	}
	,__createImageData: function() {
		if(this.__sourceImageData == null) this.__sourceImageData = this.__sourceContext.getImageData(0,0,this.width,this.height);
	}
	,__fillRect: function(rect,color) {
		var a;
		if(this.transparent) a = (color & -16777216) >>> 24; else a = 255;
		var r = (color & 16711680) >>> 16;
		var g = (color & 65280) >>> 8;
		var b = color & 255;
		this.__sourceContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		this.__sourceContext.fillRect(rect.x,rect.y,rect.width,rect.height);
	}
	,__getInt32: function(offset,data) {
		return (this.transparent?data[offset + 3]:255) << 24 | data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
	}
	,__loadFromBase64: function(base64,type,onload) {
		var _g = this;
		this.__sourceImage = window.document.createElement("img");
		var image_onLoaded = function(event) {
			if(_g.__sourceImage == null) _g.__sourceImage = event.target;
			_g.width = _g.__sourceImage.width;
			_g.height = _g.__sourceImage.height;
			_g.rect = new openfl.geom.Rectangle(0,0,_g.width,_g.height);
			_g.__valid = true;
			if(onload != null) onload(_g);
		};
		this.__sourceImage.addEventListener("load",image_onLoaded,false);
		this.__sourceImage.src = "data:" + type + ";base64," + base64;
	}
	,__loadFromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		var type = "";
		if(openfl.display.BitmapData.__isPNG(bytes)) type = "image/png"; else if(openfl.display.BitmapData.__isJPG(bytes)) type = "image/jpeg"; else if(openfl.display.BitmapData.__isGIF(bytes)) type = "image/gif"; else throw new openfl.errors.IOError("BitmapData tried to read a PNG/JPG ByteArray, but found an invalid header.");
		if(rawAlpha != null) this.__loadFromBase64(openfl.display.BitmapData.__base64Encode(bytes),type,function(_) {
			_g.__convertToCanvas();
			_g.__createImageData();
			var data = _g.__sourceImageData.data;
			var _g2 = 0;
			var _g1 = rawAlpha.length;
			while(_g2 < _g1) {
				var i = _g2++;
				data[i * 4 + 3] = rawAlpha.readUnsignedByte();
			}
			_g.__sourceImageDataChanged = true;
			if(onload != null) onload(_g);
		}); else this.__loadFromBase64(openfl.display.BitmapData.__base64Encode(bytes),type,onload);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__valid) return;
		this.__syncImageData();
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(this.__sourceImage != null) context.drawImage(this.__sourceImage,0,0); else context.drawImage(this.__sourceCanvas,0,0);
	}
	,__renderMask: function(renderSession) {
	}
	,__syncImageData: function() {
		if(this.__sourceImageDataChanged) {
			this.__sourceContext.putImageData(this.__sourceImageData,0,0);
			this.__sourceImageData = null;
			this.__sourceImageDataChanged = false;
		}
	}
	,__updateChildren: function(transformOnly) {
	}
	,__class__: openfl.display.BitmapData
};
openfl.display.BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl.display.BitmapDataChannel;
openfl.display.BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
openfl.display.BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl.display.BlendMode.ADD = ["ADD",0];
openfl.display.BlendMode.ADD.toString = $estr;
openfl.display.BlendMode.ADD.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ALPHA = ["ALPHA",1];
openfl.display.BlendMode.ALPHA.toString = $estr;
openfl.display.BlendMode.ALPHA.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DARKEN = ["DARKEN",2];
openfl.display.BlendMode.DARKEN.toString = $estr;
openfl.display.BlendMode.DARKEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl.display.BlendMode.DIFFERENCE.toString = $estr;
openfl.display.BlendMode.DIFFERENCE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ERASE = ["ERASE",4];
openfl.display.BlendMode.ERASE.toString = $estr;
openfl.display.BlendMode.ERASE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl.display.BlendMode.HARDLIGHT.toString = $estr;
openfl.display.BlendMode.HARDLIGHT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.INVERT = ["INVERT",6];
openfl.display.BlendMode.INVERT.toString = $estr;
openfl.display.BlendMode.INVERT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LAYER = ["LAYER",7];
openfl.display.BlendMode.LAYER.toString = $estr;
openfl.display.BlendMode.LAYER.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl.display.BlendMode.LIGHTEN.toString = $estr;
openfl.display.BlendMode.LIGHTEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl.display.BlendMode.MULTIPLY.toString = $estr;
openfl.display.BlendMode.MULTIPLY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.NORMAL = ["NORMAL",10];
openfl.display.BlendMode.NORMAL.toString = $estr;
openfl.display.BlendMode.NORMAL.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.OVERLAY = ["OVERLAY",11];
openfl.display.BlendMode.OVERLAY.toString = $estr;
openfl.display.BlendMode.OVERLAY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SCREEN = ["SCREEN",12];
openfl.display.BlendMode.SCREEN.toString = $estr;
openfl.display.BlendMode.SCREEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl.display.BlendMode.SUBTRACT.toString = $estr;
openfl.display.BlendMode.SUBTRACT.__enum__ = openfl.display.BlendMode;
openfl.display._CapsStyle = {};
openfl.display._CapsStyle.CapsStyle_Impl_ = function() { };
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl.display._CapsStyle.CapsStyle_Impl_;
openfl.display._CapsStyle.CapsStyle_Impl_.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl.display.DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl.display.DirectRenderer;
openfl.display.DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl.display.DirectRenderer.__super__ = openfl.display.DisplayObject;
openfl.display.DirectRenderer.prototype = $extend(openfl.display.DisplayObject.prototype,{
	get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl.display.DirectRenderer
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
openfl.display.FrameLabel = function(name,frame) {
	openfl.events.EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl.display.FrameLabel;
openfl.display.FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl.display.FrameLabel.__super__ = openfl.events.EventDispatcher;
openfl.display.FrameLabel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl.display.FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
openfl.display.GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl.display.GradientType.RADIAL = ["RADIAL",0];
openfl.display.GradientType.RADIAL.toString = $estr;
openfl.display.GradientType.RADIAL.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.LINEAR = ["LINEAR",1];
openfl.display.GradientType.LINEAR.toString = $estr;
openfl.display.GradientType.LINEAR.__enum__ = openfl.display.GradientType;
openfl.display.Graphics = function() {
	this.__commands = new Array();
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
};
$hxClasses["openfl.display.Graphics"] = openfl.display.Graphics;
openfl.display.Graphics.__name__ = ["openfl","display","Graphics"];
openfl.display.Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl.display.DrawCommand.BeginBitmapFill(bitmap,matrix,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(rgb,alpha) {
		if(alpha == null) alpha = 1;
		this.__commands.push(openfl.display.DrawCommand.BeginFill(rgb & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.beginGradientFill");
	}
	,clear: function() {
		this.__commands = new Array();
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.__dirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
	}
	,curveTo: function(cx,cy,x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(cx,cy);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CurveTo(cx,cy,x,y));
		this.__dirty = true;
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawCircle(x,y,radius));
		this.__dirty = true;
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawEllipse(x,y,width,height));
		this.__dirty = true;
	}
	,drawGraphicsData: function(graphicsData) {
		openfl.Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		openfl.Lib.notImplemented("Graphics.drawPath");
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRect(x,y,width,height));
		this.__dirty = true;
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		if(rx > width / 2) rx = width / 2;
		if(ry > height / 2) ry = height / 2;
		if(ry < 0) ry = rx;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.__dirty = true;
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl.Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(0,0);
		this.__inflateBounds(openfl.Lib.current.stage.stageWidth,openfl.Lib.current.stage.stageHeight);
		this.__commands.push(openfl.display.DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.__dirty = true;
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		openfl.Lib.notImplemented("Graphics.drawTriangles");
	}
	,endFill: function() {
		this.__commands.push(openfl.display.DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		openfl.Lib.notImplemented("Graphics.lineBitmapStyle");
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.lineGradientStyle");
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) this.__halfStrokeWidth = thickness / 2; else this.__halfStrokeWidth = 0;
		this.__commands.push(openfl.display.DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.LineTo(x,y));
		this.__dirty = true;
	}
	,moveTo: function(x,y) {
		this.__commands.push(openfl.display.DrawCommand.MoveTo(x,y));
		this.__positionX = x;
		this.__positionY = y;
	}
	,__beginPath: function() {
		if(!this.__inPath) {
			this.__context.beginPath();
			this.__inPath = true;
		}
	}
	,__beginPatternFill: function(bitmapFill,bitmapRepeat) {
		if(this.__setFill || bitmapFill == null) return;
		if(this.__pattern == null) {
			if(bitmapFill.__sourceImage != null) this.__pattern = this.__context.createPattern(bitmapFill.__sourceImage,bitmapRepeat?"repeat":"no-repeat"); else this.__pattern = this.__context.createPattern(bitmapFill.__sourceCanvas,bitmapRepeat?"repeat":"no-repeat");
		}
		this.__context.fillStyle = this.__pattern;
		this.__setFill = true;
	}
	,__closePath: function(closeFill) {
		if(this.__inPath) {
			if(this.__hasFill) {
				this.__context.translate(-this.__bounds.x,-this.__bounds.y);
				if(this.__pendingMatrix != null) {
					this.__context.transform(this.__pendingMatrix.a,this.__pendingMatrix.b,this.__pendingMatrix.c,this.__pendingMatrix.d,this.__pendingMatrix.tx,this.__pendingMatrix.ty);
					this.__context.fill();
					this.__context.transform(this.__inversePendingMatrix.a,this.__inversePendingMatrix.b,this.__inversePendingMatrix.c,this.__inversePendingMatrix.d,this.__inversePendingMatrix.tx,this.__inversePendingMatrix.ty);
				} else this.__context.fill();
				this.__context.translate(this.__bounds.x,this.__bounds.y);
			}
			this.__context.closePath();
			if(this.__hasStroke) this.__context.stroke();
		}
		this.__inPath = false;
		if(closeFill) {
			this.__hasFill = false;
			this.__hasStroke = false;
			this.__pendingMatrix = null;
			this.__inversePendingMatrix = null;
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.clone().transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.clone().transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl.geom.Rectangle(x,y,0,0);
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,__render: function() {
		if(this.__dirty) {
			this.__hasFill = false;
			this.__hasStroke = false;
			this.__inPath = false;
			this.__positionX = 0;
			this.__positionY = 0;
			if(!this.__visible || this.__commands.length == 0 || this.__bounds == null || this.__bounds.width == 0 || this.__bounds.height == 0) {
				this.__canvas = null;
				this.__context = null;
			} else {
				if(this.__canvas == null) {
					this.__canvas = window.document.createElement("canvas");
					this.__context = this.__canvas.getContext("2d");
				}
				this.__canvas.width = Math.ceil(this.__bounds.width);
				this.__canvas.height = Math.ceil(this.__bounds.height);
				var offsetX = this.__bounds.x;
				var offsetY = this.__bounds.y;
				var bitmapFill = null;
				var bitmapRepeat = false;
				var _g = 0;
				var _g1 = this.__commands;
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 0:
						var smooth = command[5];
						var repeat = command[4];
						var matrix = command[3];
						var bitmap = command[2];
						this.__closePath(false);
						if(bitmap != bitmapFill || repeat != bitmapRepeat) {
							bitmapFill = bitmap;
							bitmapRepeat = repeat;
							this.__pattern = null;
							this.__setFill = false;
							bitmap.__syncImageData();
						}
						if(matrix != null) {
							this.__pendingMatrix = matrix;
							this.__inversePendingMatrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
							this.__inversePendingMatrix.invert();
						} else {
							this.__pendingMatrix = null;
							this.__inversePendingMatrix = null;
						}
						this.__hasFill = true;
						break;
					case 1:
						var alpha = command[3];
						var rgb = command[2];
						this.__closePath(false);
						if(alpha == 1) this.__context.fillStyle = "#" + StringTools.hex(rgb,6); else {
							var r = (rgb & 16711680) >>> 16;
							var g = (rgb & 65280) >>> 8;
							var b = rgb & 255;
							this.__context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
						}
						bitmapFill = null;
						this.__setFill = true;
						this.__hasFill = true;
						break;
					case 2:
						var y = command[5];
						var x = command[4];
						var cy = command[3];
						var cx = command[2];
						this.__beginPatternFill(bitmapFill,bitmapRepeat);
						this.__beginPath();
						this.__context.quadraticCurveTo(cx - offsetX,cy - offsetY,x - offsetX,y - offsetY);
						this.__positionX = x;
						this.__positionY = y;
						break;
					case 3:
						var radius = command[4];
						var y1 = command[3];
						var x1 = command[2];
						this.__beginPatternFill(bitmapFill,bitmapRepeat);
						this.__beginPath();
						this.__context.moveTo(x1 - offsetX + radius,y1 - offsetY);
						this.__context.arc(x1 - offsetX,y1 - offsetY,radius,0,Math.PI * 2,true);
						break;
					case 4:
						var height = command[5];
						var width = command[4];
						var y2 = command[3];
						var x2 = command[2];
						x2 -= offsetX;
						y2 -= offsetY;
						var kappa = .5522848;
						var ox = width / 2 * kappa;
						var oy = height / 2 * kappa;
						var xe = x2 + width;
						var ye = y2 + height;
						var xm = x2 + width / 2;
						var ym = y2 + height / 2;
						this.__beginPatternFill(bitmapFill,bitmapRepeat);
						this.__beginPath();
						this.__context.moveTo(x2,ym);
						this.__context.bezierCurveTo(x2,ym - oy,xm - ox,y2,xm,y2);
						this.__context.bezierCurveTo(xm + ox,y2,xe,ym - oy,xe,ym);
						this.__context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
						this.__context.bezierCurveTo(xm - ox,ye,x2,ym + oy,x2,ym);
						break;
					case 5:
						var height1 = command[5];
						var width1 = command[4];
						var y3 = command[3];
						var x3 = command[2];
						var optimizationUsed = false;
						if(bitmapFill != null) {
							var st = 0;
							var sr = 0;
							var sb = 0;
							var sl = 0;
							var canOptimizeMatrix = true;
							if(this.__pendingMatrix != null) {
								if(this.__pendingMatrix.b != 0 || this.__pendingMatrix.c != 0) canOptimizeMatrix = false; else {
									var stl = this.__inversePendingMatrix.transformPoint(new openfl.geom.Point(x3,y3));
									var sbr = this.__inversePendingMatrix.transformPoint(new openfl.geom.Point(x3 + width1,y3 + height1));
									st = stl.y;
									sl = stl.x;
									sb = sbr.y;
									sr = sbr.x;
								}
							} else {
								st = y3;
								sl = x3;
								sb = y3 + height1;
								sr = x3 + width1;
							}
							if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= bitmapFill.width && sb <= bitmapFill.height) {
								optimizationUsed = true;
								if(bitmapFill.__sourceImage != null) this.__context.drawImage(bitmapFill.__sourceImage,sl,st,sr - sl,sb - st,x3,y3,width1,height1); else this.__context.drawImage(bitmapFill.__sourceCanvas,sl,st,sr - sl,sb - st,x3,y3,width1,height1);
							}
						}
						if(!optimizationUsed) {
							this.__beginPatternFill(bitmapFill,bitmapRepeat);
							this.__beginPath();
							this.__context.rect(x3 - offsetX,y3 - offsetY,width1,height1);
						}
						break;
					case 6:
						var ry = command[7];
						var rx = command[6];
						var height2 = command[5];
						var width2 = command[4];
						var y4 = command[3];
						var x4 = command[2];
						this.__beginPatternFill(bitmapFill,bitmapRepeat);
						this.__beginPath();
						this.__drawRoundRect(x4,y4,width2,height2,rx,ry);
						break;
					case 7:
						var count = command[6];
						var flags = command[5];
						var smooth1 = command[4];
						var tileData = command[3];
						var sheet = command[2];
						this.__closePath(false);
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__syncImageData();
						if(sheet.__bitmap.__sourceImage != null) surface = sheet.__bitmap.__sourceImage; else surface = sheet.__bitmap.__sourceCanvas;
						while(index < totalCount) {
							var tileID = tileData[index + 2] | 0;
							if(tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								this.__context.save();
								this.__context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) this.__context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) this.__context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) this.__context.globalAlpha = tileData[index + alphaIndex];
								this.__context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								this.__context.restore();
							}
							index += numValues;
						}
						break;
					case 8:
						this.__closePath(true);
						break;
					case 9:
						var miterLimit = command[9];
						var joints = command[8];
						var caps = command[7];
						var scaleMode = command[6];
						var pixelHinting = command[5];
						var alpha1 = command[4];
						var color = command[3];
						var thickness = command[2];
						this.__closePath(false);
						if(thickness == null) this.__hasStroke = false; else {
							this.__context.lineWidth = thickness;
							this.__context.lineJoin = joints;
							this.__context.lineCap = caps;
							this.__context.miterLimit = miterLimit;
							this.__context.strokeStyle = "#" + StringTools.hex(color,6);
							this.__hasStroke = true;
						}
						break;
					case 10:
						var y5 = command[3];
						var x5 = command[2];
						this.__beginPatternFill(bitmapFill,bitmapRepeat);
						this.__beginPath();
						this.__context.lineTo(x5 - offsetX,y5 - offsetY);
						this.__positionX = x5;
						this.__positionY = y5;
						break;
					case 11:
						var y6 = command[3];
						var x6 = command[2];
						this.__beginPath();
						this.__context.moveTo(x6 - offsetX,y6 - offsetY);
						this.__positionX = x6;
						this.__positionY = y6;
						break;
					}
				}
			}
			this.__dirty = false;
			this.__closePath(false);
		}
	}
	,__renderMask: function(renderSession) {
		if(this.__commands.length != 0) {
			var __context = renderSession.context;
			var __positionX = 0.0;
			var __positionY = 0.0;
			var offsetX = 0;
			var offsetY = 0;
			var _g = 0;
			var _g1 = this.__commands;
			while(_g < _g1.length) {
				var command = _g1[_g];
				++_g;
				switch(command[1]) {
				case 2:
					var y = command[5];
					var x = command[4];
					var cy = command[3];
					var cx = command[2];
					__context.quadraticCurveTo(cx,cy,x,y);
					__positionX = x;
					__positionY = y;
					break;
				case 3:
					var radius = command[4];
					var y1 = command[3];
					var x1 = command[2];
					__context.arc(x1 - offsetX,y1 - offsetY,radius,0,Math.PI * 2,true);
					break;
				case 4:
					var height = command[5];
					var width = command[4];
					var y2 = command[3];
					var x2 = command[2];
					x2 -= offsetX;
					y2 -= offsetY;
					var kappa = .5522848;
					var ox = width / 2 * kappa;
					var oy = height / 2 * kappa;
					var xe = x2 + width;
					var ye = y2 + height;
					var xm = x2 + width / 2;
					var ym = y2 + height / 2;
					__context.moveTo(x2,ym);
					__context.bezierCurveTo(x2,ym - oy,xm - ox,y2,xm,y2);
					__context.bezierCurveTo(xm + ox,y2,xe,ym - oy,xe,ym);
					__context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
					__context.bezierCurveTo(xm - ox,ye,x2,ym + oy,x2,ym);
					break;
				case 6:
					var ry = command[7];
					var rx = command[6];
					var h = command[5];
					var w = command[4];
					var y3 = command[3];
					var x3 = command[2];
					this.__drawRoundRect(x3 - offsetX,y3 - offsetY,w,h,rx,ry);
					break;
				case 5:
					var height1 = command[5];
					var width1 = command[4];
					var y4 = command[3];
					var x4 = command[2];
					__context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
					break;
				case 10:
					var y5 = command[3];
					var x5 = command[2];
					__context.lineTo(x5 - offsetX,y5 - offsetY);
					__positionX = x5;
					__positionY = y5;
					break;
				case 11:
					var y6 = command[3];
					var x6 = command[2];
					__context.moveTo(x6 - offsetX,y6 - offsetY);
					__positionX = x6;
					__positionY = y6;
					break;
				default:
				}
			}
		}
	}
	,__drawRoundRect: function(x,y,width,height,rx,ry) {
		var kappa = .5522848;
		var ox = rx * kappa;
		var oy = ry * kappa;
		var xe = x + width;
		var ye = y + height;
		var cx1 = x + rx;
		var cy1 = y + ry;
		var cx2 = xe - rx;
		var cy2 = ye - ry;
		this.__context.moveTo(x,cy1);
		this.__context.bezierCurveTo(x,cy1 - oy,cx1 - ox,y,cx1,y);
		this.__context.lineTo(cx2,y);
		this.__context.bezierCurveTo(cx2 + ox,y,xe,cy1 - oy,xe,cy1);
		this.__context.lineTo(xe,cy2);
		this.__context.bezierCurveTo(xe,cy2 + oy,cx2 + ox,ye,cx2,ye);
		this.__context.lineTo(cx1,ye);
		this.__context.bezierCurveTo(cx1 - ox,ye,x,cy2 + oy,x,cy2);
		this.__context.lineTo(x,cy1);
	}
	,__class__: openfl.display.Graphics
};
openfl.display.DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : true, __constructs__ : ["BeginBitmapFill","BeginFill","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","EndFill","LineStyle","LineTo","MoveTo"] };
openfl.display.DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginFill = function(rgb,alpha) { var $x = ["BeginFill",1,rgb,alpha]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CurveTo = function(cx,cy,x,y) { var $x = ["CurveTo",2,cx,cy,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",3,x,y,radius]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",4,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",5,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",6,x,y,width,height,rx,ry]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",7,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.EndFill = ["EndFill",8];
openfl.display.DrawCommand.EndFill.toString = $estr;
openfl.display.DrawCommand.EndFill.__enum__ = openfl.display.DrawCommand;
openfl.display.DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",9,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",10,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",11,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl.display.GraphicsPathWinding.EVEN_ODD.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl.display.GraphicsPathWinding.NON_ZERO.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl.display.IGraphicsData;
openfl.display.IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl.display.IGraphicsData.prototype = {
	__class__: openfl.display.IGraphicsData
};
openfl.display.GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl.display.GraphicsDataType.STROKE = ["STROKE",0];
openfl.display.GraphicsDataType.STROKE.toString = $estr;
openfl.display.GraphicsDataType.STROKE.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.SOLID = ["SOLID",1];
openfl.display.GraphicsDataType.SOLID.toString = $estr;
openfl.display.GraphicsDataType.SOLID.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl.display.GraphicsDataType.GRADIENT.toString = $estr;
openfl.display.GraphicsDataType.GRADIENT.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.PATH = ["PATH",3];
openfl.display.GraphicsDataType.PATH.toString = $estr;
openfl.display.GraphicsDataType.PATH.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.BITMAP = ["BITMAP",4];
openfl.display.GraphicsDataType.BITMAP.toString = $estr;
openfl.display.GraphicsDataType.BITMAP.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.END = ["END",5];
openfl.display.GraphicsDataType.END.toString = $estr;
openfl.display.GraphicsDataType.END.__enum__ = openfl.display.GraphicsDataType;
openfl.display.InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl.display.InterpolationMethod.RGB = ["RGB",0];
openfl.display.InterpolationMethod.RGB.toString = $estr;
openfl.display.InterpolationMethod.RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl.display.InterpolationMethod.LINEAR_RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display._JointStyle = {};
openfl.display._JointStyle.JointStyle_Impl_ = function() { };
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl.display._JointStyle.JointStyle_Impl_;
openfl.display._JointStyle.JointStyle_Impl_.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl.display.LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl.display.LineScaleMode.HORIZONTAL.toString = $estr;
openfl.display.LineScaleMode.HORIZONTAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NONE = ["NONE",1];
openfl.display.LineScaleMode.NONE.toString = $estr;
openfl.display.LineScaleMode.NONE.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NORMAL = ["NORMAL",2];
openfl.display.LineScaleMode.NORMAL.toString = $estr;
openfl.display.LineScaleMode.NORMAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl.display.LineScaleMode.VERTICAL.toString = $estr;
openfl.display.LineScaleMode.VERTICAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.Loader = function() {
	openfl.display.Sprite.call(this);
	this.contentLoaderInfo = openfl.display.LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl.display.Loader;
openfl.display.Loader.__name__ = ["openfl","display","Loader"];
openfl.display.Loader.__super__ = openfl.display.Sprite;
openfl.display.Loader.prototype = $extend(openfl.display.Sprite.prototype,{
	load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl.display.BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl.display.BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl.events.Event(openfl.events.Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl.display.Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl.events.Event(openfl.events.Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl.display.Loader
});
openfl.display.LoaderInfo = function() {
	openfl.events.EventDispatcher.call(this);
	this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl.display.LoaderInfo;
openfl.display.LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl.display.LoaderInfo.create = function(ldr) {
	var li = new openfl.display.LoaderInfo();
	if(ldr != null) li.loader = ldr; else li.url = "";
	return li;
};
openfl.display.LoaderInfo.__super__ = openfl.events.EventDispatcher;
openfl.display.LoaderInfo.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.display.LoaderInfo
});
openfl.display.MovieClip = function() {
	openfl.display.Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
};
$hxClasses["openfl.display.MovieClip"] = openfl.display.MovieClip;
openfl.display.MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl.display.MovieClip.__super__ = openfl.display.Sprite;
openfl.display.MovieClip.prototype = $extend(openfl.display.Sprite.prototype,{
	gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl.display.MovieClip
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
openfl.display.OpenGLView = function() {
	openfl.display.DirectRenderer.call(this,"OpenGLView");
	this.__canvas = window.document.createElement("canvas");
	this.__canvas.width = openfl.Lib.current.stage.stageWidth;
	this.__canvas.height = openfl.Lib.current.stage.stageHeight;
	this.__context = this.__canvas.getContext("webgl");
	if(this.__context == null) this.__context = this.__canvas.getContext("experimental-webgl");
	openfl.gl.GL.__context = this.__context;
};
$hxClasses["openfl.display.OpenGLView"] = openfl.display.OpenGLView;
openfl.display.OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl.display.OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl.display.OpenGLView.isSupported = null;
openfl.display.OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	var view = new openfl.display.OpenGLView();
	if(view.__context == null) return false;
	return true;
};
openfl.display.OpenGLView.__super__ = openfl.display.DirectRenderer;
openfl.display.OpenGLView.prototype = $extend(openfl.display.DirectRenderer.prototype,{
	__renderCanvas: function(renderSession) {
		if(!this.__added) {
			this.__added = true;
			haxe.Log.trace("Warning: openfl-html5 only can run OpenGLView content using the DOM rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 61, className : "openfl.display.OpenGLView", methodName : "__renderCanvas"});
			haxe.Log.trace("Please compile your project using -Ddom (on the command-line) or <haxedef name=\"dom\" /> to enable",{ fileName : "OpenGLView.hx", lineNumber : 62, className : "openfl.display.OpenGLView", methodName : "__renderCanvas"});
		}
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				this.__initializeElement(this.__canvas,renderSession);
			}
			if(this.__context != null) {
				openfl.gl.GL.__context = this.__context;
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
		}
	}
	,__class__: openfl.display.OpenGLView
});
openfl.display.PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl.display.PixelSnapping.NEVER = ["NEVER",0];
openfl.display.PixelSnapping.NEVER.toString = $estr;
openfl.display.PixelSnapping.NEVER.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.AUTO = ["AUTO",1];
openfl.display.PixelSnapping.AUTO.toString = $estr;
openfl.display.PixelSnapping.AUTO.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl.display.PixelSnapping.ALWAYS.toString = $estr;
openfl.display.PixelSnapping.ALWAYS.__enum__ = openfl.display.PixelSnapping;
openfl.display.SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl.display.SpreadMethod.REPEAT = ["REPEAT",0];
openfl.display.SpreadMethod.REPEAT.toString = $estr;
openfl.display.SpreadMethod.REPEAT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.REFLECT = ["REFLECT",1];
openfl.display.SpreadMethod.REFLECT.toString = $estr;
openfl.display.SpreadMethod.REFLECT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.PAD = ["PAD",2];
openfl.display.SpreadMethod.PAD.toString = $estr;
openfl.display.SpreadMethod.PAD.__enum__ = openfl.display.SpreadMethod;
openfl.display.Stage = function(width,height,element,color) {
	this.__mouseY = 0;
	this.__mouseX = 0;
	openfl.display.Sprite.call(this);
	this.__element = element;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__initializeDOM();
	this.__originalWidth = width;
	this.__originalHeight = height;
	if(width == 0 && height == 0) {
		if(element != null) {
			width = element.clientWidth;
			height = element.clientHeight;
		} else {
			width = window.innerWidth;
			height = window.innerHeight;
		}
		this.__fullscreen = true;
	}
	this.stageWidth = width;
	this.stageHeight = height;
	if(this.__canvas != null) {
		this.__canvas.width = width;
		this.__canvas.height = height;
	} else {
		this.__div.style.width = width + "px";
		this.__div.style.height = height + "px";
	}
	this.__resize();
	window.addEventListener("resize",$bind(this,this.window_onResize));
	window.addEventListener("focus",$bind(this,this.window_onFocus));
	window.addEventListener("blur",$bind(this,this.window_onBlur));
	if(element != null) {
		if(this.__canvas != null) {
			if(element != this.__canvas) element.appendChild(this.__canvas);
		} else element.appendChild(this.__div);
	}
	this.stage = this;
	this.align = openfl.display.StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.set_displayState(openfl.display.StageDisplayState.NORMAL);
	this.frameRate = 60;
	this.quality = "high";
	this.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	var keyEvents = ["keydown","keyup"];
	var touchEvents = ["touchstart","touchmove","touchend"];
	var mouseEvents = ["mousedown","mousemove","mouseup","dblclick","wheel"];
	var focusEvents = ["focus","blur"];
	var element1;
	if(this.__canvas != null) element1 = this.__canvas; else element1 = this.__div;
	var _g = 0;
	while(_g < keyEvents.length) {
		var type = keyEvents[_g];
		++_g;
		window.addEventListener(type,$bind(this,this.window_onKey),false);
	}
	var _g1 = 0;
	while(_g1 < touchEvents.length) {
		var type1 = touchEvents[_g1];
		++_g1;
		element1.addEventListener(type1,$bind(this,this.element_onTouch),true);
	}
	var _g2 = 0;
	while(_g2 < mouseEvents.length) {
		var type2 = mouseEvents[_g2];
		++_g2;
		element1.addEventListener(type2,$bind(this,this.element_onMouse),true);
	}
	var _g3 = 0;
	while(_g3 < focusEvents.length) {
		var type3 = focusEvents[_g3];
		++_g3;
		element1.addEventListener(type3,$bind(this,this.element_onFocus),true);
	}
	window.requestAnimationFrame($bind(this,this.__render));
};
$hxClasses["openfl.display.Stage"] = openfl.display.Stage;
openfl.display.Stage.__name__ = ["openfl","display","Stage"];
openfl.display.Stage.__super__ = openfl.display.Sprite;
openfl.display.Stage.prototype = $extend(openfl.display.Sprite.prototype,{
	globalToLocal: function(pos) {
		return pos;
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 1;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = 0;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = 1;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = 2;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		stack.push(this);
	}
	,__initializeCanvas: function() {
		if(js.Boot.__instanceof(this.__element,HTMLCanvasElement)) this.__canvas = this.__element; else this.__canvas = window.document.createElement("canvas");
		if(this.__transparent) this.__context = this.__canvas.getContext("2d"); else {
			this.__canvas.setAttribute("moz-opaque","true");
			this.__context = this.__canvas.getContext ("2d", { alpha: false });
		}
		var style = this.__canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
		this.__renderSession = new openfl.display.RenderSession();
		this.__renderSession.context = this.__context;
		this.__renderSession.roundPixels = true;
	}
	,__initializeDOM: function() {
		this.__div = window.document.createElement("div");
		var style = this.__div.style;
		if(!this.__transparent) style.backgroundColor = this.__colorString;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
		window.document.addEventListener("dragstart",function(e) {
			if(e.target.nodeName.toLowerCase() == "img") {
				e.preventDefault();
				return false;
			}
			return true;
		},false);
		this.__renderSession = new openfl.display.RenderSession();
		this.__renderSession.element = this.__div;
		this.__renderSession.roundPixels = true;
		var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
		this.__renderSession.vendorPrefix = prefix.lowercase;
		if(prefix.lowercase == "webkit") this.__renderSession.transformProperty = "-webkit-transform"; else this.__renderSession.transformProperty = "transform";
		this.__renderSession.isWebkitDOM = prefix.lowercase == "webkit";
		if(prefix.lowercase == "webkit") this.__renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.__renderSession.transformOriginProperty = "transform-origin";
	}
	,__initializeGL: function() {
		return false;
	}
	,__render: function() {
		this.__broadcast(new openfl.events.Event(openfl.events.Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl.events.Event(openfl.events.Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		if(this.__canvas != null) {
			if(!this.__fullscreen || this.__element != this.__canvas) {
				if(this.stageWidth != this.__canvas.width || this.stageHeight != this.__canvas.height) {
					this.__canvas.width = this.stageWidth;
					this.__canvas.height = this.stageHeight;
				}
			} else {
				this.stageWidth = this.__canvas.width;
				this.stageHeight = this.__canvas.height;
			}
			if(this.__gl != null) {
				if(!this.__glContextLost) {
					this.__gl.viewport(0,0,this.stageWidth,this.stageHeight);
					this.__gl.bindFramebuffer(36160,null);
					if(this.__transparent) this.__gl.clearColor(0,0,0,0); else this.__gl.clearColor(this.__colorSplit[0],this.__colorSplit[1],this.__colorSplit[2],1);
					this.__gl.clear(16384);
					this.__renderGL(this.__renderSession);
				}
			} else {
				this.__context.setTransform(1,0,0,1,0,0);
				this.__context.globalAlpha = 1;
				if(!this.__transparent && this.__clearBeforeRender) {
					this.__context.fillStyle = this.__colorString;
					this.__context.fillRect(0,0,this.stageWidth,this.stageHeight);
				} else if(this.__transparent && this.__clearBeforeRender) this.__context.clearRect(0,0,this.stageWidth,this.stageHeight);
				this.__renderCanvas(this.__renderSession);
			}
		} else {
			this.__renderSession.z = 1;
			this.__renderDOM(this.__renderSession);
		}
		window.requestAnimationFrame($bind(this,this.__render));
	}
	,__resize: function() {
		if(this.__element != null && (this.__div == null || this.__div != null && this.__fullscreen)) {
			if(this.__fullscreen) {
				this.stageWidth = this.__element.clientWidth;
				this.stageHeight = this.__element.clientHeight;
				if(this.__canvas != null) {
					if(this.__element != this.__canvas) {
						this.__canvas.width = this.stageWidth;
						this.__canvas.height = this.stageHeight;
					}
				} else {
					this.__div.style.width = this.stageWidth + "px";
					this.__div.style.height = this.stageHeight + "px";
				}
			} else {
				var scaleX = this.__element.clientWidth / this.__originalWidth;
				var scaleY = this.__element.clientHeight / this.__originalHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.__canvas != null) {
					if(this.__element != this.__canvas) {
						this.__canvas.style.width = this.__originalWidth * targetRatio + "px";
						this.__canvas.style.height = this.__originalHeight * targetRatio + "px";
						this.__canvas.style.marginLeft = (this.__element.clientWidth - this.__originalWidth * targetRatio) / 2 + "px";
						this.__canvas.style.marginTop = (this.__element.clientHeight - this.__originalHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.__div.style.width = this.__originalWidth * targetRatio + "px";
					this.__div.style.height = this.__originalHeight * targetRatio + "px";
					this.__div.style.marginLeft = (this.__element.clientWidth - this.__originalWidth * targetRatio) / 2 + "px";
					this.__div.style.marginTop = (this.__element.clientHeight - this.__originalHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,__setCursor: function(cursor) {
		if(this.__cursor != cursor) {
			this.__cursor = cursor;
			if(!this.__cursorHidden) {
				var element;
				if(this.__canvas != null) element = this.__canvas; else element = this.__div;
				element.style.cursor = cursor;
			}
		}
	}
	,__setCursorHidden: function(value) {
		if(this.__cursorHidden != value) {
			this.__cursorHidden = value;
			var element;
			if(this.__canvas != null) element = this.__canvas; else element = this.__div;
			if(value) element.style.cursor = "none"; else element.style.cursor = this.__cursor;
		}
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl.geom.Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
				openfl.display.Sprite.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					openfl.display.DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl.display.DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl.display.DisplayObject.__worldRenderDirty > 0) {
			openfl.display.Sprite.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				this.__wasDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty = 0;
				openfl.display.DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		} else if(this.__wasDirty) {
			openfl.display.Sprite.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) this.__wasDirty = false;
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
		this.__glContextLost = true;
	}
	,canvas_onContextRestored: function(event) {
		this.__glContextLost = false;
	}
	,element_onFocus: function(event) {
	}
	,element_onTouch: function(event) {
		event.preventDefault();
		var rect;
		if(this.__canvas != null) rect = this.__canvas.getBoundingClientRect(); else rect = this.__div.getBoundingClientRect();
		var touch = event.changedTouches[0];
		var point = new openfl.geom.Point((touch.pageX - rect.left) * (this.stageWidth / rect.width),(touch.pageY - rect.top) * (this.stageHeight / rect.height));
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		this.__stack = [];
		var type = null;
		var mouseType = null;
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			type = "touchBegin";
			mouseType = openfl.events.MouseEvent.MOUSE_DOWN;
			break;
		case "touchmove":
			type = "touchMove";
			mouseType = openfl.events.MouseEvent.MOUSE_MOVE;
			break;
		case "touchend":
			type = "touchEnd";
			mouseType = openfl.events.MouseEvent.MOUSE_UP;
			break;
		default:
		}
		if(this.__hitTest(this.get_mouseX(),this.get_mouseY(),false,this.__stack,true)) {
			var target = this.__stack[this.__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl.events.TouchEvent.__create(type,event,touch,localPoint,target);
			touchEvent.touchPointID = touch.identifier;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl.events.MouseEvent.__create(mouseType,event,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent,this.__stack);
			this.__fireEvent(mouseEvent,this.__stack);
		} else {
			var touchEvent1 = openfl.events.TouchEvent.__create(type,event,touch,point,this);
			touchEvent1.touchPointID = touch.identifier;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl.events.MouseEvent.__create(mouseType,event,point,this);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent1,[this]);
			this.__fireEvent(mouseEvent1,[this]);
		}
		if(type == "touchMove" && this.__dragObject != null) this.__drag(point);
	}
	,element_onMouse: function(event) {
		var rect;
		if(this.__canvas != null) {
			rect = this.__canvas.getBoundingClientRect();
			this.__mouseX = (event.clientX - rect.left) * (this.stageWidth / rect.width);
			this.__mouseY = (event.clientY - rect.top) * (this.stageHeight / rect.height);
		} else {
			rect = this.__div.getBoundingClientRect();
			this.__mouseX = event.clientX - rect.left;
			this.__mouseY = event.clientY - rect.top;
		}
		this.__stack = [];
		var type;
		var _g = event.type;
		switch(_g) {
		case "mousedown":
			type = openfl.events.MouseEvent.MOUSE_DOWN;
			break;
		case "mouseup":
			type = openfl.events.MouseEvent.MOUSE_UP;
			break;
		case "mousemove":
			type = openfl.events.MouseEvent.MOUSE_MOVE;
			break;
		case "dblclick":
			type = openfl.events.MouseEvent.DOUBLE_CLICK;
			break;
		case "wheel":
			type = openfl.events.MouseEvent.MOUSE_WHEEL;
			break;
		default:
			type = null;
		}
		if(this.__hitTest(this.get_mouseX(),this.get_mouseY(),false,this.__stack,true)) {
			var target = this.__stack[this.__stack.length - 1];
			this.__setCursor(target.buttonMode?"pointer":"default");
			this.__fireEvent(openfl.events.MouseEvent.__create(type,event,target.globalToLocal(new openfl.geom.Point(this.get_mouseX(),this.get_mouseY())),target),this.__stack);
			if(type == openfl.events.MouseEvent.MOUSE_UP) this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.CLICK,event,target.globalToLocal(new openfl.geom.Point(this.get_mouseX(),this.get_mouseY())),target),this.__stack);
		} else {
			this.__setCursor(this.buttonMode?"pointer":"default");
			this.__fireEvent(openfl.events.MouseEvent.__create(type,event,new openfl.geom.Point(this.get_mouseX(),this.get_mouseY()),this),[this]);
			if(type == openfl.events.MouseEvent.MOUSE_UP) this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.CLICK,event,new openfl.geom.Point(this.get_mouseX(),this.get_mouseY()),this),[this]);
		}
		if(this.__dragObject != null) this.__drag(new openfl.geom.Point(this.get_mouseX(),this.get_mouseY()));
	}
	,window_onKey: function(event) {
		var keyCode;
		if(event.keyCode != null) keyCode = event.keyCode; else keyCode = event.which;
		keyCode = openfl.ui.Keyboard.__convertMozillaCode(keyCode);
		var location;
		if(event.location != null) location = event.location; else location = event.keyLocation;
		var keyLocation;
		keyLocation = js.Boot.__cast(location , Int);
		var stack = new Array();
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(new openfl.events.KeyboardEvent(event.type == "keydown"?openfl.events.KeyboardEvent.KEY_DOWN:openfl.events.KeyboardEvent.KEY_UP,true,false,event.charCode,keyCode,keyLocation,event.ctrlKey,event.altKey,event.shiftKey),stack);
		}
	}
	,window_onResize: function(event) {
		this.__resize();
		var event1 = new openfl.events.Event(openfl.events.Event.RESIZE);
		this.__broadcast(event1,false);
	}
	,window_onFocus: function(event) {
		var event1 = new openfl.events.Event(openfl.events.Event.ACTIVATE);
		this.__broadcast(event1,true);
	}
	,window_onBlur: function(event) {
		var event1 = new openfl.events.Event(openfl.events.Event.DEACTIVATE);
		this.__broadcast(event1,true);
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,set_displayState: function(value) {
		switch(value[1]) {
		case 0:
			var fs_exit_function = function() {
			    if (document.exitFullscreen) {
			      document.exitFullscreen();
			    } else if (document.msExitFullscreen) {
			      document.msExitFullscreen();
			    } else if (document.mozCancelFullScreen) {
			      document.mozCancelFullScreen();
			    } else if (document.webkitExitFullscreen) {
			      document.webkitExitFullscreen();
			    }
				}
			fs_exit_function();
			break;
		case 1:case 2:
			var fsfunction = function(elem) {
					if (elem.requestFullscreen) elem.requestFullscreen();
					else if (elem.msRequestFullscreen) elem.msRequestFullscreen();
					else if (elem.mozRequestFullScreen) elem.mozRequestFullScreen();
					else if (elem.webkitRequestFullscreen) elem.webkitRequestFullscreen();
				}
			fsfunction(this.__element);
			break;
		}
		this.displayState = value;
		return value;
	}
	,__class__: openfl.display.Stage
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",set_color:"set_color",get_color:"get_color"})
});
openfl.display.RenderSession = function() {
	this.maskManager = new openfl.display.MaskManager(this);
};
$hxClasses["openfl.display.RenderSession"] = openfl.display.RenderSession;
openfl.display.RenderSession.__name__ = ["openfl","display","RenderSession"];
openfl.display.RenderSession.prototype = {
	__class__: openfl.display.RenderSession
};
openfl.display.MaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl.display.MaskManager"] = openfl.display.MaskManager;
openfl.display.MaskManager.__name__ = ["openfl","display","MaskManager"];
openfl.display.MaskManager.prototype = {
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__worldTransform;
		if(transform == null) transform = new openfl.geom.Matrix();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl.display.MaskManager
};
openfl.display.Stage3D = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl.display.Stage3D;
openfl.display.Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl.display.Stage3D.__super__ = openfl.events.EventDispatcher;
openfl.display.Stage3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl.display.OpenGLView.get_isSupported()) {
			this.context3D = new openfl.display3D.Context3D();
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl.events.ErrorEvent(openfl.events.ErrorEvent.ERROR));
	}
	,__class__: openfl.display.Stage3D
});
openfl.display.StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl.display.StageAlign.TOP_RIGHT.toString = $estr;
openfl.display.StageAlign.TOP_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl.display.StageAlign.TOP_LEFT.toString = $estr;
openfl.display.StageAlign.TOP_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP = ["TOP",2];
openfl.display.StageAlign.TOP.toString = $estr;
openfl.display.StageAlign.TOP.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.RIGHT = ["RIGHT",3];
openfl.display.StageAlign.RIGHT.toString = $estr;
openfl.display.StageAlign.RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.LEFT = ["LEFT",4];
openfl.display.StageAlign.LEFT.toString = $estr;
openfl.display.StageAlign.LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl.display.StageAlign.BOTTOM_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl.display.StageAlign.BOTTOM_LEFT.toString = $estr;
openfl.display.StageAlign.BOTTOM_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM = ["BOTTOM",7];
openfl.display.StageAlign.BOTTOM.toString = $estr;
openfl.display.StageAlign.BOTTOM.__enum__ = openfl.display.StageAlign;
openfl.display.StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl.display.StageDisplayState.NORMAL = ["NORMAL",0];
openfl.display.StageDisplayState.NORMAL.toString = $estr;
openfl.display.StageDisplayState.NORMAL.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl.display.StageDisplayState.FULL_SCREEN.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl.display.StageDisplayState;
openfl.display._StageQuality = {};
openfl.display._StageQuality.StageQuality_Impl_ = function() { };
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl.display._StageQuality.StageQuality_Impl_;
openfl.display._StageQuality.StageQuality_Impl_.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl.display.StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl.display.StageScaleMode.SHOW_ALL.toString = $estr;
openfl.display.StageScaleMode.SHOW_ALL.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl.display.StageScaleMode.NO_SCALE.toString = $estr;
openfl.display.StageScaleMode.NO_SCALE.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl.display.StageScaleMode.NO_BORDER.toString = $estr;
openfl.display.StageScaleMode.NO_BORDER.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl.display.StageScaleMode.EXACT_FIT.toString = $estr;
openfl.display.StageScaleMode.EXACT_FIT.__enum__ = openfl.display.StageScaleMode;
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = new openfl.geom.Point();
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl.geom.Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl.display.Tilesheet
};
openfl.display.TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl.display.TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl.display.TriangleCulling.NEGATIVE.toString = $estr;
openfl.display.TriangleCulling.NEGATIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.NONE = ["NONE",1];
openfl.display.TriangleCulling.NONE.toString = $estr;
openfl.display.TriangleCulling.NONE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl.display.TriangleCulling.POSITIVE.toString = $estr;
openfl.display.TriangleCulling.POSITIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display3D = {};
openfl.display3D.Context3D = function() {
	this.disposed = false;
	this.vertexBuffersCreated = new Array();
	this.indexBuffersCreated = new Array();
	this.programsCreated = new Array();
	this.texturesCreated = new Array();
	this.samplerParameters = new Array();
	var _g1 = 0;
	var _g = openfl.display3D.Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl.display3D.SamplerState();
		this.samplerParameters[i].wrap = openfl.display3D.Context3DWrapMode.REPEAT;
		this.samplerParameters[i].filter = openfl.display3D.Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl.display3D.Context3DMipFilter.MIPNONE;
	}
	var stage = openfl.Lib.current.stage;
	this.ogl = new openfl.display.OpenGLView();
	this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl.display3D.Context3D;
openfl.display3D.Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl.display3D.Context3D.prototype = {
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.updateBlendStatus();
			this.drawing = true;
		}
		openfl.gl.GL.clearColor(red,green,blue,alpha);
		openfl.gl.GL.clearDepth(depth);
		openfl.gl.GL.clearStencil(stencil);
		openfl.gl.GL.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			openfl.gl.GL.enable(2929);
			openfl.gl.GL.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,width,height));
		this.scrollRect = this.ogl.get_scrollRect().clone();
		openfl.gl.GL.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.CubeTexture(openfl.gl.GL.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl.display3D.IndexBuffer3D(openfl.gl.GL.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl.display3D.Program3D(openfl.gl.GL.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.Texture(openfl.gl.GL.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl.display3D.VertexBuffer3D(openfl.gl.GL.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			openfl.gl.GL.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			openfl.gl.GL.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		if(!this.drawing) throw new openfl.errors.Error("Need to clear before drawing if the buffer has not been cleared since the last present() call.");
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		openfl.gl.GL.bindBuffer(34963,indexBuffer.glBuffer);
		openfl.gl.GL.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		openfl.gl.GL.useProgram(null);
		openfl.gl.GL.bindBuffer(34962,null);
		openfl.gl.GL.disable(2884);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		openfl.gl.GL.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) openfl.gl.GL.disable(2884); else {
			openfl.gl.GL.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				openfl.gl.GL.cullFace(1029);
				break;
			case 1028:
				openfl.gl.GL.cullFace(1028);
				break;
			case 1032:
				openfl.gl.GL.cullFace(1032);
				break;
			default:
				throw "Unknown Context3DTriangleFace type.";
			}
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		openfl.gl.GL.depthFunc(passCompareMode);
		openfl.gl.GL.depthMask(depthMask);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		openfl.gl.GL.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl.display3D.Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl.display3D.Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw "Program Type " + Std.string(programType) + " not supported";
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var locationName = this.getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister);
		this.setProgramConstantsFromVector(programType,firstRegister,(function($this) {
			var $r;
			var this1 = matrix.rawData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)),16);
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = -1;
		if(byteArrayOffset != -1) data.position = byteArrayOffset;
		var location = openfl.gl.GL.getUniformLocation(this.currentProgram.glProgram,locationName);
		openfl.gl.GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = openfl.gl.GL.getUniformLocation(this.currentProgram.glProgram,locationName);
		openfl.gl.GL.uniformMatrix3D(location,!transposedMatrix,matrix);
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = openfl.gl.GL.getUniformLocation(this.currentProgram.glProgram,locationName);
		openfl.gl.GL.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setRenderToBackBuffer: function() {
		openfl.gl.GL.bindFramebuffer(36160,this.defaultFrameBuffer);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = openfl.gl.GL.createFramebuffer();
		openfl.gl.GL.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = openfl.gl.GL.createRenderbuffer();
		openfl.gl.GL.bindRenderbuffer(36161,this.renderbuffer);
		openfl.gl.GL.renderbufferStorage(36161,34041,texture.width,texture.height);
		openfl.gl.GL.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		if(enableDepthAndStencil) {
			openfl.gl.GL.enable(2929);
			openfl.gl.GL.enable(2960);
			openfl.gl.GL.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		}
		openfl.gl.GL.bindTexture(3553,texture.glTexture);
		openfl.gl.GL.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		openfl.gl.GL.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl.display3D.Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw "Sampler is out of bounds.";
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			switch(wrap[1]) {
			case 0:
				openfl.gl.GL.texParameteri(3553,10242,33071);
				openfl.gl.GL.texParameteri(3553,10243,33071);
				break;
			case 1:
				openfl.gl.GL.texParameteri(3553,10242,10497);
				openfl.gl.GL.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 0:
				openfl.gl.GL.texParameteri(3553,10240,9729);
				break;
			case 1:
				openfl.gl.GL.texParameteri(3553,10240,9728);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				openfl.gl.GL.texParameteri(3553,10241,9987);
				break;
			case 1:
				openfl.gl.GL.texParameteri(3553,10241,9984);
				break;
			case 2:
				openfl.gl.GL.texParameteri(3553,10241,9729);
				break;
			}
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				openfl.gl.GL.texParameteri(34067,10242,33071);
				openfl.gl.GL.texParameteri(34067,10243,33071);
				break;
			case 1:
				openfl.gl.GL.texParameteri(34067,10242,10497);
				openfl.gl.GL.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 0:
				openfl.gl.GL.texParameteri(34067,10240,9729);
				break;
			case 1:
				openfl.gl.GL.texParameteri(34067,10240,9728);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				openfl.gl.GL.texParameteri(34067,10241,9987);
				break;
			case 1:
				openfl.gl.GL.texParameteri(34067,10241,9984);
				break;
			case 2:
				openfl.gl.GL.texParameteri(34067,10241,9729);
				break;
			}
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			openfl.gl.GL.disable(3089);
			return;
		}
		openfl.gl.GL.enable(3089);
		openfl.gl.GL.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		openfl.gl.GL.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		openfl.gl.GL.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		openfl.gl.GL.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		openfl.gl.GL.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			openfl.gl.GL.activeTexture(33984);
			break;
		case 1:
			openfl.gl.GL.activeTexture(33985);
			break;
		case 2:
			openfl.gl.GL.activeTexture(33986);
			break;
		case 3:
			openfl.gl.GL.activeTexture(33987);
			break;
		case 4:
			openfl.gl.GL.activeTexture(33988);
			break;
		case 5:
			openfl.gl.GL.activeTexture(33989);
			break;
		case 6:
			openfl.gl.GL.activeTexture(33990);
			break;
		case 7:
			openfl.gl.GL.activeTexture(33991);
			break;
		default:
			throw "Does not support texture8 or more";
		}
		if(texture == null) {
			openfl.gl.GL.bindTexture(3553,null);
			openfl.gl.GL.bindTexture(34067,null);
			return;
		}
		var location = openfl.gl.GL.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			openfl.gl.GL.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).glTexture);
			openfl.gl.GL.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			openfl.gl.GL.bindTexture(34067,(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).glTexture);
			openfl.gl.GL.uniform1i(location,textureIndex);
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl.display3D.Context3DWrapMode.REPEAT,openfl.display3D.Context3DTextureFilter.NEAREST,openfl.display3D.Context3DMipFilter.MIPNONE);
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = openfl.gl.GL.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) openfl.gl.GL.disableVertexAttribArray(location);
			return;
		}
		openfl.gl.GL.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl.display3D.Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw "Buffer format " + Std.string(format) + " is not supported";
		openfl.gl.GL.enableVertexAttribArray(location);
		openfl.gl.GL.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,updateBlendStatus: function() {
		if(this.blendEnabled) {
			openfl.gl.GL.enable(3042);
			openfl.gl.GL.blendEquation(32774);
			openfl.gl.GL.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else openfl.gl.GL.disable(3042);
	}
	,__class__: openfl.display3D.Context3D
};
openfl.display3D.AGLSLContext3D = function() {
	openfl.display3D.Context3D.call(this);
	this._yFlip = -1;
};
$hxClasses["openfl.display3D.AGLSLContext3D"] = openfl.display3D.AGLSLContext3D;
openfl.display3D.AGLSLContext3D.__name__ = ["openfl","display3D","AGLSLContext3D"];
openfl.display3D.AGLSLContext3D.__super__ = openfl.display3D.Context3D;
openfl.display3D.AGLSLContext3D.prototype = $extend(openfl.display3D.Context3D.prototype,{
	setCulling: function(triangleFaceToCull) {
		openfl.display3D.Context3D.prototype.setCulling.call(this,triangleFaceToCull);
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw "Unknown culling mode " + triangleFaceToCull + ".";
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = openfl.gl.GL.getUniformLocation(this.currentProgram.glProgram,"yflip");
		openfl.gl.GL.uniform1f(location,this._yFlip);
		openfl.display3D.Context3D.prototype.drawTriangles.call(this,indexBuffer,firstIndex,numTriangles);
	}
	,present: function() {
		this.drawing = false;
	}
	,__class__: openfl.display3D.AGLSLContext3D
});
openfl.display3D._Context3DBlendFactor = {};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl.display3D.Context3DClearMask;
openfl.display3D.Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
openfl.display3D._Context3DCompareMode = {};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : true, __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl.display3D.Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl.display3D.Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPLINEAR.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl.display3D.Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNEAREST.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl.display3D.Context3DMipFilter.MIPNONE.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNONE.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : true, __constructs__ : ["VERTEX","FRAGMENT"] };
openfl.display3D.Context3DProgramType.VERTEX = ["VERTEX",0];
openfl.display3D.Context3DProgramType.VERTEX.toString = $estr;
openfl.display3D.Context3DProgramType.VERTEX.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl.display3D.Context3DProgramType.FRAGMENT.toString = $estr;
openfl.display3D.Context3DProgramType.FRAGMENT.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DRenderMode = $hxClasses["openfl.display3D.Context3DRenderMode"] = { __ename__ : true, __constructs__ : ["AUTO","SOFTWARE"] };
openfl.display3D.Context3DRenderMode.AUTO = ["AUTO",0];
openfl.display3D.Context3DRenderMode.AUTO.toString = $estr;
openfl.display3D.Context3DRenderMode.AUTO.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D.Context3DRenderMode.SOFTWARE = ["SOFTWARE",1];
openfl.display3D.Context3DRenderMode.SOFTWARE.toString = $estr;
openfl.display3D.Context3DRenderMode.SOFTWARE.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D.Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : true, __constructs__ : ["LINEAR","NEAREST"] };
openfl.display3D.Context3DTextureFilter.LINEAR = ["LINEAR",0];
openfl.display3D.Context3DTextureFilter.LINEAR.toString = $estr;
openfl.display3D.Context3DTextureFilter.LINEAR.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.NEAREST = ["NEAREST",1];
openfl.display3D.Context3DTextureFilter.NEAREST.toString = $estr;
openfl.display3D.Context3DTextureFilter.NEAREST.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : true, __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl.display3D.Context3DTextureFormat.BGRA = ["BGRA",0];
openfl.display3D.Context3DTextureFormat.BGRA.toString = $estr;
openfl.display3D.Context3DTextureFormat.BGRA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl.display3D.Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D._Context3DTriangleFace = {};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : true, __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl.display3D.Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : true, __constructs__ : ["CLAMP","REPEAT"] };
openfl.display3D.Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl.display3D.Context3DWrapMode.CLAMP.toString = $estr;
openfl.display3D.Context3DWrapMode.CLAMP.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl.display3D.Context3DWrapMode.REPEAT.toString = $estr;
openfl.display3D.Context3DWrapMode.REPEAT.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl.display3D.IndexBuffer3D;
openfl.display3D.IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl.display3D.IndexBuffer3D.prototype = {
	uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		openfl.gl.GL.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		indices = new Int16Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			i++;
		}
		openfl.gl.GL.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		openfl.gl.GL.bindBuffer(34963,this.glBuffer);
		var indices;
		indices = new Int16Array(count);
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		openfl.gl.GL.bufferData(34963,indices,35044);
	}
	,dispose: function() {
		openfl.gl.GL.deleteBuffer(this.glBuffer);
	}
	,__class__: openfl.display3D.IndexBuffer3D
};
openfl.display3D.OpenFLStage3D = function() { };
$hxClasses["openfl.display3D.OpenFLStage3D"] = openfl.display3D.OpenFLStage3D;
openfl.display3D.OpenFLStage3D.__name__ = ["openfl","display3D","OpenFLStage3D"];
openfl.display3D.OpenFLStage3D.requestAGLSLContext3D = function(stage3D,context3DRenderMode) {
	if(context3DRenderMode == null) context3DRenderMode = "auto";
	if(openfl.display.OpenGLView.get_isSupported()) {
		stage3D.context3D = new openfl.display3D.AGLSLContext3D();
		stage3D.dispatchEvent(new openfl.events.Event(openfl.events.Event.CONTEXT3D_CREATE));
	} else stage3D.dispatchEvent(new openfl.events.ErrorEvent(openfl.events.ErrorEvent.ERROR));
};
openfl.display3D.OpenFLStage3D.getStage3D = function(stage,index) {
	if(openfl.display3D.OpenFLStage3D.stage3Ds.length > index) return openfl.display3D.OpenFLStage3D.stage3Ds[index]; else {
		if(index > 0) throw "Only 1 Stage3D supported for now";
		var stage3D = new openfl.display.Stage3D();
		openfl.display3D.OpenFLStage3D.stage3Ds[index] = stage3D;
		return stage3D;
	}
};
openfl.display3D.OpenFLStage3D.setRenderCallback = function(context3D,func) {
	context3D.setRenderMethod(func);
};
openfl.display3D.OpenFLStage3D.removeRenderCallback = function(context3D,func) {
	context3D.removeRenderMethod(func);
};
openfl.display3D.Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl.display3D.Program3D;
openfl.display3D.Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl.display3D.Program3D.prototype = {
	dispose: function() {
		openfl.gl.GL.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		openfl.gl.GL.attachShader(this.glProgram,vertexShader);
		openfl.gl.GL.attachShader(this.glProgram,fragmentShader);
		openfl.gl.GL.linkProgram(this.glProgram);
		if(openfl.gl.GL.getProgramParameter(this.glProgram,35714) == 0) {
			var result = openfl.gl.GL.getProgramInfoLog(this.glProgram);
			if(result != "") throw result;
		}
	}
	,__class__: openfl.display3D.Program3D
};
openfl.display3D.SamplerState = function() {
};
$hxClasses["openfl.display3D.SamplerState"] = openfl.display3D.SamplerState;
openfl.display3D.SamplerState.__name__ = ["openfl","display3D","SamplerState"];
openfl.display3D.SamplerState.prototype = {
	__class__: openfl.display3D.SamplerState
};
openfl.display3D.VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl.display3D.VertexBuffer3D;
openfl.display3D.VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl.display3D.VertexBuffer3D.prototype = {
	dispose: function() {
		openfl.gl.GL.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		openfl.gl.GL.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			i++;
		}
		openfl.gl.GL.bufferData(34962,float32Array,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		openfl.gl.GL.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data[i];
		}
		openfl.gl.GL.bufferData(34962,float32Array,35044);
	}
	,__class__: openfl.display3D.VertexBuffer3D
};
openfl.display3D.shaders = {};
openfl.display3D.shaders.AGLSLShaderUtils = function() { };
$hxClasses["openfl.display3D.shaders.AGLSLShaderUtils"] = openfl.display3D.shaders.AGLSLShaderUtils;
openfl.display3D.shaders.AGLSLShaderUtils.__name__ = ["openfl","display3D","shaders","AGLSLShaderUtils"];
openfl.display3D.shaders.AGLSLShaderUtils.compile = function(programType,source) {
	var agalMiniAssembler = new aglsl.assembler.AGALMiniAssembler();
	var data = null;
	var concatSource;
	switch(programType) {
	case "vertex":
		concatSource = "part vertex 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("vertex").data;
		break;
	case "fragment":
		concatSource = "part fragment 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("fragment").data;
		break;
	default:
		throw "Unknown Context3DProgramType";
	}
	return data;
};
openfl.display3D.shaders.AGLSLShaderUtils.createShader = function(type,shaderSource) {
	var aglsl1 = new aglsl.AGLSLCompiler();
	var glType;
	var shaderType;
	switch(type[1]) {
	case 0:
		glType = 35633;
		shaderType = "vertex";
		break;
	case 1:
		glType = 35632;
		shaderType = "fragment";
		break;
	}
	haxe.Log.trace("--- AGAL ---\n" + shaderSource,{ fileName : "AGLSLShaderUtils.hx", lineNumber : 60, className : "openfl.display3D.shaders.AGLSLShaderUtils", methodName : "createShader"});
	var shaderSourceString = aglsl1.compile(shaderType,shaderSource);
	var shader = openfl.gl.GL.createShader(glType);
	openfl.gl.GL.shaderSource(shader,shaderSourceString);
	openfl.gl.GL.compileShader(shader);
	if(openfl.gl.GL.getShaderParameter(shader,35713) == 0) {
		haxe.Log.trace("--- ERR ---\n" + shaderSourceString,{ fileName : "AGLSLShaderUtils.hx", lineNumber : 69, className : "openfl.display3D.shaders.AGLSLShaderUtils", methodName : "createShader"});
		var err = openfl.gl.GL.getShaderInfoLog(shader);
		if(err != "") throw err;
	}
	haxe.Log.trace("--- GLSL ---\n" + shaderSourceString,{ fileName : "AGLSLShaderUtils.hx", lineNumber : 75, className : "openfl.display3D.shaders.AGLSLShaderUtils", methodName : "createShader"});
	return shader;
};
openfl.display3D.textures = {};
openfl.display3D.textures.TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl.events.EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl.display3D.textures.TextureBase.__super__ = openfl.events.EventDispatcher;
openfl.display3D.textures.TextureBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispose: function() {
		openfl.gl.GL.deleteTexture(this.glTexture);
	}
	,__class__: openfl.display3D.textures.TextureBase
});
openfl.display3D.textures.CubeTexture = function(glTexture,size) {
	openfl.display3D.textures.TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = openfl.gl.GL.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl.display3D.textures.CubeTexture;
openfl.display3D.textures.CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl.display3D.textures.CubeTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.CubeTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(data,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = data.getPixels(new openfl.geom.Rectangle(0,0,data.width,data.height));
		var source = null;
		source = new Uint8Array(p.length);
		p.position = 0;
		var i = 0;
		while(p.position < p.length) {
			source[i] = p.readUnsignedByte();
			i++;
		}
		openfl.gl.GL.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			openfl.gl.GL.texImage2D(34069,miplevel,6408,data.width,data.height,0,6408,5121,source);
			break;
		case 1:
			openfl.gl.GL.texImage2D(34070,miplevel,6408,data.width,data.height,0,6408,5121,source);
			break;
		case 2:
			openfl.gl.GL.texImage2D(34071,miplevel,6408,data.width,data.height,0,6408,5121,source);
			break;
		case 3:
			openfl.gl.GL.texImage2D(34072,miplevel,6408,data.width,data.height,0,6408,5121,source);
			break;
		case 4:
			openfl.gl.GL.texImage2D(34073,miplevel,6408,data.width,data.height,0,6408,5121,source);
			break;
		case 5:
			openfl.gl.GL.texImage2D(34074,miplevel,6408,data.width,data.height,0,6408,5121,source);
			break;
		default:
			throw "unknown side type";
		}
		openfl.gl.GL.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,glTextureAt: function(index) {
		return this._textures[index];
	}
	,__class__: openfl.display3D.textures.CubeTexture
});
openfl.display3D.textures.Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl.display3D.textures.Texture;
openfl.display3D.textures.Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl.display3D.textures.Texture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.Texture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = bitmapData.getPixels(new openfl.geom.Rectangle(0,0,bitmapData.width,bitmapData.height));
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		openfl.gl.GL.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			openfl.gl.GL.pixelStorei(37440,1);
			openfl.gl.GL.texParameteri(3553,10240,9728);
			openfl.gl.GL.texParameteri(3553,10241,9728);
			openfl.gl.GL.texParameteri(3553,10242,33071);
			openfl.gl.GL.texParameteri(3553,10243,33071);
		}
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		openfl.gl.GL.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,source);
		openfl.gl.GL.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.Texture
});
openfl.errors.ArgumentError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage);
};
$hxClasses["openfl.errors.ArgumentError"] = openfl.errors.ArgumentError;
openfl.errors.ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl.errors.ArgumentError.__super__ = openfl.errors.Error;
openfl.errors.ArgumentError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.ArgumentError
});
openfl.errors.IOError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
};
$hxClasses["openfl.errors.IOError"] = openfl.errors.IOError;
openfl.errors.IOError.__name__ = ["openfl","errors","IOError"];
openfl.errors.IOError.__super__ = openfl.errors.Error;
openfl.errors.IOError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IOError
});
openfl.errors.RangeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.RangeError"] = openfl.errors.RangeError;
openfl.errors.RangeError.__name__ = ["openfl","errors","RangeError"];
openfl.errors.RangeError.__super__ = openfl.errors.Error;
openfl.errors.RangeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.RangeError
});
openfl.errors.TypeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.TypeError"] = openfl.errors.TypeError;
openfl.errors.TypeError.__name__ = ["openfl","errors","TypeError"];
openfl.errors.TypeError.__super__ = openfl.errors.Error;
openfl.errors.TypeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.TypeError
});
openfl.events.AccelerometerEvent = function(type,bubbles,cancelable,timestamp,accelerationX,accelerationY,accelerationZ) {
	if(accelerationZ == null) accelerationZ = 0;
	if(accelerationY == null) accelerationY = 0;
	if(accelerationX == null) accelerationX = 0;
	if(timestamp == null) timestamp = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.timestamp = timestamp;
	this.accelerationX = accelerationX;
	this.accelerationY = accelerationY;
	this.accelerationZ = accelerationZ;
};
$hxClasses["openfl.events.AccelerometerEvent"] = openfl.events.AccelerometerEvent;
openfl.events.AccelerometerEvent.__name__ = ["openfl","events","AccelerometerEvent"];
openfl.events.AccelerometerEvent.UPDATE = null;
openfl.events.AccelerometerEvent.__super__ = openfl.events.Event;
openfl.events.AccelerometerEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.AccelerometerEvent(this.type,this.bubbles,this.cancelable,this.timestamp,this.accelerationX,this.accelerationY,this.accelerationZ);
	}
	,toString: function() {
		return "[AccelerometerEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " timestamp=" + this.timestamp + " accelerationX=" + this.accelerationX + " accelerationY=" + this.accelerationY + " accelerationZ=" + this.accelerationZ + "]";
	}
	,__class__: openfl.events.AccelerometerEvent
});
openfl.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl.events.TextEvent;
openfl.events.TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl.events.TextEvent.__super__ = openfl.events.Event;
openfl.events.TextEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.TextEvent
});
openfl.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.TextEvent.call(this,type,bubbles,cancelable);
	this.text = text;
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl.events.ErrorEvent;
openfl.events.ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl.events.ErrorEvent.__super__ = openfl.events.TextEvent;
openfl.events.ErrorEvent.prototype = $extend(openfl.events.TextEvent.prototype,{
	__class__: openfl.events.ErrorEvent
});
openfl.events._EventDispatcher = {};
openfl.events._EventDispatcher.Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl.events._EventDispatcher.Listener;
openfl.events._EventDispatcher.Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl.events._EventDispatcher.Listener.prototype = {
	match: function(callback,useCapture) {
		return this.callback == callback && this.useCapture == useCapture;
	}
	,__class__: openfl.events._EventDispatcher.Listener
};
openfl.events._EventPhase = {};
openfl.events._EventPhase.EventPhase_Impl_ = function() { };
$hxClasses["openfl.events._EventPhase.EventPhase_Impl_"] = openfl.events._EventPhase.EventPhase_Impl_;
openfl.events._EventPhase.EventPhase_Impl_.__name__ = ["openfl","events","_EventPhase","EventPhase_Impl_"];
openfl.events.FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	if(shiftKey == null) this.shiftKey = false; else this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl.events.FocusEvent;
openfl.events.FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl.events.FocusEvent.__super__ = openfl.events.Event;
openfl.events.FocusEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		var event = new openfl.events.FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,__class__: openfl.events.FocusEvent
});
openfl.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl.events.HTTPStatusEvent;
openfl.events.HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl.events.HTTPStatusEvent.__super__ = openfl.events.Event;
openfl.events.HTTPStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.HTTPStatusEvent
});
openfl.events.IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl.events.IOErrorEvent;
openfl.events.IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl.events.IOErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.IOErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.IOErrorEvent
});
openfl.events.KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl.events.KeyboardEvent;
openfl.events.KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl.events.KeyboardEvent.__super__ = openfl.events.Event;
openfl.events.KeyboardEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.KeyboardEvent
});
openfl.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl.events.MouseEvent;
openfl.events.MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl.events.MouseEvent.__buttonDown = null;
openfl.events.MouseEvent.__create = function(type,event,local,target) {
	var delta = 2;
	if(type == openfl.events.MouseEvent.MOUSE_WHEEL) {
		var mouseEvent = event;
		if(mouseEvent.deltaY > 0) delta = 1; else delta = -1;
	}
	if(type == openfl.events.MouseEvent.MOUSE_DOWN) openfl.events.MouseEvent.__buttonDown = true; else if(type == openfl.events.MouseEvent.MOUSE_UP) openfl.events.MouseEvent.__buttonDown = false;
	var pseudoEvent = new openfl.events.MouseEvent(type,true,false,local.x,local.y,null,event.ctrlKey,event.altKey,event.shiftKey,openfl.events.MouseEvent.__buttonDown,delta);
	pseudoEvent.stageX = openfl.Lib.current.stage.get_mouseX();
	pseudoEvent.stageY = openfl.Lib.current.stage.get_mouseY();
	pseudoEvent.target = target;
	return pseudoEvent;
};
openfl.events.MouseEvent.__super__ = openfl.events.Event;
openfl.events.MouseEvent.prototype = $extend(openfl.events.Event.prototype,{
	updateAfterEvent: function() {
	}
	,__class__: openfl.events.MouseEvent
});
openfl.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl.events.ProgressEvent;
openfl.events.ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl.events.ProgressEvent.__super__ = openfl.events.Event;
openfl.events.ProgressEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.ProgressEvent
});
openfl.events.SecurityErrorEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl.events.SecurityErrorEvent;
openfl.events.SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl.events.SecurityErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.SecurityErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	__class__: openfl.events.SecurityErrorEvent
});
openfl.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl.events.TouchEvent;
openfl.events.TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl.events.TouchEvent.__create = function(type,event,touch,local,target) {
	var evt = new openfl.events.TouchEvent(type,true,false,local.x,local.y,null,null,null,event.ctrlKey,event.altKey,event.shiftKey,false,0,null,0);
	evt.stageX = openfl.Lib.current.stage.get_mouseX();
	evt.stageY = openfl.Lib.current.stage.get_mouseY();
	evt.target = target;
	return evt;
};
openfl.events.TouchEvent.__super__ = openfl.events.Event;
openfl.events.TouchEvent.prototype = $extend(openfl.events.Event.prototype,{
	updateAfterEvent: function() {
	}
	,__class__: openfl.events.TouchEvent
});
openfl.filters = {};
openfl.filters.BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl.filters.BitmapFilter;
openfl.filters.BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl.filters.BitmapFilter.prototype = {
	clone: function() {
		return new openfl.filters.BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl.filters.BitmapFilter
};
openfl.geom.ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl.geom.ColorTransform;
openfl.geom.ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl.geom.ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__class__: openfl.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
openfl.geom.Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl.geom.Matrix3D;
openfl.geom.Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl.geom.Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl.geom.Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(i >= this1.length && !this1.fixed) this1.length = i + 1;
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl.geom.Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl.geom.Matrix3D();
	var a1 = new openfl.geom.Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(0 >= this1.length && !this1.fixed) this1.length = 1;
	this1.data[0] = c + a1.x * a1.x * t;
	var this2 = m.rawData;
	if(5 >= this2.length && !this2.fixed) this2.length = 6;
	this2.data[5] = c + a1.y * a1.y * t;
	var this3 = m.rawData;
	if(10 >= this3.length && !this3.fixed) this3.length = 11;
	this3.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this4 = m.rawData;
	if(4 >= this4.length && !this4.fixed) this4.length = 5;
	this4.data[4] = tmp1 + tmp2;
	var this5 = m.rawData;
	if(1 >= this5.length && !this5.fixed) this5.length = 2;
	this5.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this6 = m.rawData;
	if(8 >= this6.length && !this6.fixed) this6.length = 9;
	this6.data[8] = tmp1 - tmp2;
	var this7 = m.rawData;
	if(2 >= this7.length && !this7.fixed) this7.length = 3;
	this7.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this8 = m.rawData;
	if(9 >= this8.length && !this8.fixed) this8.length = 10;
	this8.data[9] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(6 >= this9.length && !this9.fixed) this9.length = 7;
	this9.data[6] = tmp1 - tmp2;
	return m;
};
openfl.geom.Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(0 >= this1.length && !this1.fixed) this1.length = 1;
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this2 = this.rawData;
		if(1 >= this2.length && !this2.fixed) this2.length = 2;
		this2.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this3 = this.rawData;
		if(2 >= this3.length && !this3.fixed) this3.length = 3;
		this3.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this4 = this.rawData;
		if(3 >= this4.length && !this4.fixed) this4.length = 4;
		this4.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this5 = this.rawData;
		if(4 >= this5.length && !this5.fixed) this5.length = 5;
		this5.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this6 = this.rawData;
		if(5 >= this6.length && !this6.fixed) this6.length = 6;
		this6.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this7 = this.rawData;
		if(6 >= this7.length && !this7.fixed) this7.length = 7;
		this7.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this8 = this.rawData;
		if(7 >= this8.length && !this8.fixed) this8.length = 8;
		this8.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this9 = this.rawData;
		if(8 >= this9.length && !this9.fixed) this9.length = 9;
		this9.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this10 = this.rawData;
		if(9 >= this10.length && !this10.fixed) this10.length = 10;
		this10.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this11 = this.rawData;
		if(10 >= this11.length && !this11.fixed) this11.length = 11;
		this11.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this12 = this.rawData;
		if(11 >= this12.length && !this12.fixed) this12.length = 12;
		this12.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this13 = this.rawData;
		if(12 >= this13.length && !this13.fixed) this13.length = 13;
		this13.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this14 = this.rawData;
		if(13 >= this14.length && !this14.fixed) this14.length = 14;
		this14.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this15 = this.rawData;
		if(14 >= this15.length && !this15.fixed) this15.length = 15;
		this15.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this16 = this.rawData;
		if(15 >= this16.length && !this16.fixed) this16.length = 16;
		this16.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(12 >= this1.length && !this1.fixed) this1.length = 13;
		this1.data[12] = this.rawData.data[12] + x;
		var this2 = this.rawData;
		if(13 >= this2.length && !this2.fixed) this2.length = 14;
		this2.data[13] = this.rawData.data[13] + y;
		var this3 = this.rawData;
		if(14 >= this3.length && !this3.fixed) this3.length = 15;
		this3.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl.geom.Matrix3D(openfl._Vector.Vector_Impl_.copy(this.rawData));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(0 >= this1.length && !this1.fixed) this1.length = 1;
			this1.data[0] = vector3D.x;
			var this2 = this.rawData;
			if(1 >= this2.length && !this2.fixed) this2.length = 2;
			this2.data[1] = vector3D.y;
			var this3 = this.rawData;
			if(2 >= this3.length && !this3.fixed) this3.length = 3;
			this3.data[2] = vector3D.z;
			var this4 = this.rawData;
			if(3 >= this4.length && !this4.fixed) this4.length = 4;
			this4.data[3] = vector3D.w;
			break;
		case 1:
			var this5 = this.rawData;
			if(4 >= this5.length && !this5.fixed) this5.length = 5;
			this5.data[4] = vector3D.x;
			var this6 = this.rawData;
			if(5 >= this6.length && !this6.fixed) this6.length = 6;
			this6.data[5] = vector3D.y;
			var this7 = this.rawData;
			if(6 >= this7.length && !this7.fixed) this7.length = 7;
			this7.data[6] = vector3D.z;
			var this8 = this.rawData;
			if(7 >= this8.length && !this8.fixed) this8.length = 8;
			this8.data[7] = vector3D.w;
			break;
		case 2:
			var this9 = this.rawData;
			if(8 >= this9.length && !this9.fixed) this9.length = 9;
			this9.data[8] = vector3D.x;
			var this10 = this.rawData;
			if(9 >= this10.length && !this10.fixed) this10.length = 10;
			this10.data[9] = vector3D.y;
			var this11 = this.rawData;
			if(10 >= this11.length && !this11.fixed) this11.length = 11;
			this11.data[10] = vector3D.z;
			var this12 = this.rawData;
			if(11 >= this12.length && !this12.fixed) this12.length = 12;
			this12.data[11] = vector3D.w;
			break;
		case 3:
			var this13 = this.rawData;
			if(12 >= this13.length && !this13.fixed) this13.length = 13;
			this13.data[12] = vector3D.x;
			var this14 = this.rawData;
			if(13 >= this14.length && !this14.fixed) this14.length = 14;
			this14.data[13] = vector3D.y;
			var this15 = this.rawData;
			if(14 >= this15.length && !this15.fixed) this15.length = 15;
			this15.data[14] = vector3D.z;
			var this16 = this.rawData;
			if(15 >= this16.length && !this16.fixed) this16.length = 16;
			this16.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyFrom: function(other) {
		this.rawData = openfl._Vector.Vector_Impl_.copy(other.rawData);
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(c >= this1.length && !this1.fixed) this1.length = c + 1;
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(key >= vector.length && !vector.fixed) vector.length = key + 1;
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(0 >= this1.length && !this1.fixed) this1.length = 1;
			this1.data[0] = vector3D.x;
			var this2 = this.rawData;
			if(4 >= this2.length && !this2.fixed) this2.length = 5;
			this2.data[4] = vector3D.y;
			var this3 = this.rawData;
			if(8 >= this3.length && !this3.fixed) this3.length = 9;
			this3.data[8] = vector3D.z;
			var this4 = this.rawData;
			if(12 >= this4.length && !this4.fixed) this4.length = 13;
			this4.data[12] = vector3D.w;
			break;
		case 1:
			var this5 = this.rawData;
			if(1 >= this5.length && !this5.fixed) this5.length = 2;
			this5.data[1] = vector3D.x;
			var this6 = this.rawData;
			if(5 >= this6.length && !this6.fixed) this6.length = 6;
			this6.data[5] = vector3D.y;
			var this7 = this.rawData;
			if(9 >= this7.length && !this7.fixed) this7.length = 10;
			this7.data[9] = vector3D.z;
			var this8 = this.rawData;
			if(13 >= this8.length && !this8.fixed) this8.length = 14;
			this8.data[13] = vector3D.w;
			break;
		case 2:
			var this9 = this.rawData;
			if(2 >= this9.length && !this9.fixed) this9.length = 3;
			this9.data[2] = vector3D.x;
			var this10 = this.rawData;
			if(6 >= this10.length && !this10.fixed) this10.length = 7;
			this10.data[6] = vector3D.y;
			var this11 = this.rawData;
			if(10 >= this11.length && !this11.fixed) this11.length = 11;
			this11.data[10] = vector3D.z;
			var this12 = this.rawData;
			if(14 >= this12.length && !this12.fixed) this12.length = 15;
			this12.data[14] = vector3D.w;
			break;
		case 3:
			var this13 = this.rawData;
			if(3 >= this13.length && !this13.fixed) this13.length = 4;
			this13.data[3] = vector3D.x;
			var this14 = this.rawData;
			if(7 >= this14.length && !this14.fixed) this14.length = 8;
			this14.data[7] = vector3D.y;
			var this15 = this.rawData;
			if(11 >= this15.length && !this15.fixed) this15.length = 12;
			this15.data[11] = vector3D.z;
			var this16 = this.rawData;
			if(15 >= this16.length && !this16.fixed) this16.length = 16;
			this16.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + Std.string((function($this) {
				var $r;
				var $int = row;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + " out of bounds [0, ..., 3]");
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + row + " out of bounds [0, ..., 3]");
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = openfl._Vector.Vector_Impl_.copy(this.rawData);
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		var vec = openfl._Vector.Vector_Impl_._new();
		var m = new openfl.geom.Matrix3D(openfl._Vector.Vector_Impl_.copy(this.rawData));
		var mr = openfl._Vector.Vector_Impl_.copy(m.rawData);
		var pos = new openfl.geom.Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		if(12 >= mr.length && !mr.fixed) mr.length = 13;
		mr.data[12] = 0;
		if(13 >= mr.length && !mr.fixed) mr.length = 14;
		mr.data[13] = 0;
		if(14 >= mr.length && !mr.fixed) mr.length = 15;
		mr.data[14] = 0;
		var scale = new openfl.geom.Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		if(0 >= mr.length && !mr.fixed) mr.length = 1;
		mr.data[0] = mr.data[0] / scale.x;
		if(1 >= mr.length && !mr.fixed) mr.length = 2;
		mr.data[1] = mr.data[1] / scale.x;
		if(2 >= mr.length && !mr.fixed) mr.length = 3;
		mr.data[2] = mr.data[2] / scale.x;
		if(4 >= mr.length && !mr.fixed) mr.length = 5;
		mr.data[4] = mr.data[4] / scale.y;
		if(5 >= mr.length && !mr.fixed) mr.length = 6;
		mr.data[5] = mr.data[5] / scale.y;
		if(6 >= mr.length && !mr.fixed) mr.length = 7;
		mr.data[6] = mr.data[6] / scale.y;
		if(8 >= mr.length && !mr.fixed) mr.length = 9;
		mr.data[8] = mr.data[8] / scale.z;
		if(9 >= mr.length && !mr.fixed) mr.length = 10;
		mr.data[9] = mr.data[9] / scale.z;
		if(10 >= mr.length && !mr.fixed) mr.length = 11;
		mr.data[10] = mr.data[10] / scale.z;
		var rot = new openfl.geom.Vector3D();
		switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			rot.x = (mr.data[6] - mr.data[9]) / len;
			rot.y = (mr.data[8] - mr.data[2]) / len;
			rot.z = (mr.data[1] - mr.data[4]) / len;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data;
				var this1;
				this1 = new Array(vec.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data,0,vec.data.length);
				vec.data = data;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data1;
				var this2;
				this2 = new Array(vec.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data1,0,vec.data.length);
				vec.data = data1;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data2;
				var this3;
				this3 = new Array(vec.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data2,0,vec.data.length);
				vec.data = data2;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(i >= this1.length && !this1.fixed) this1.length = i + 1;
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(0 >= this1.length && !this1.fixed) this1.length = 1;
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this2 = this.rawData;
			if(1 >= this2.length && !this2.fixed) this2.length = 2;
			this2.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this3 = this.rawData;
			if(2 >= this3.length && !this3.fixed) this3.length = 3;
			this3.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this4 = this.rawData;
			if(3 >= this4.length && !this4.fixed) this4.length = 4;
			this4.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this5 = this.rawData;
			if(4 >= this5.length && !this5.fixed) this5.length = 5;
			this5.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this6 = this.rawData;
			if(5 >= this6.length && !this6.fixed) this6.length = 6;
			this6.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this7 = this.rawData;
			if(6 >= this7.length && !this7.fixed) this7.length = 7;
			this7.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this8 = this.rawData;
			if(7 >= this8.length && !this8.fixed) this8.length = 8;
			this8.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(8 >= this9.length && !this9.fixed) this9.length = 9;
			this9.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this10 = this.rawData;
			if(9 >= this10.length && !this10.fixed) this10.length = 10;
			this10.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this11 = this.rawData;
			if(10 >= this11.length && !this11.fixed) this11.length = 11;
			this11.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this12 = this.rawData;
			if(11 >= this12.length && !this12.fixed) this12.length = 12;
			this12.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this13 = this.rawData;
			if(12 >= this13.length && !this13.fixed) this13.length = 13;
			this13.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this14 = this.rawData;
			if(13 >= this14.length && !this14.fixed) this14.length = 14;
			this14.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this15 = this.rawData;
			if(14 >= this15.length && !this15.fixed) this15.length = 15;
			this15.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this16 = this.rawData;
			if(15 >= this16.length && !this16.fixed) this16.length = 16;
			this16.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl.geom.Vector3D(0,0,-1);
		if(up == null) up = new openfl.geom.Vector3D(0,-1,0);
		var dir = new openfl.geom.Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl.geom.Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl.geom.Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl.geom.Vector3D(-dir.y,dir.x,0); else vup = new openfl.geom.Vector3D(1,0,0);
		right = new openfl.geom.Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(0 >= this1.length && !this1.fixed) this1.length = 1;
		this1.data[0] = right.x;
		var this2 = this.rawData;
		if(4 >= this2.length && !this2.fixed) this2.length = 5;
		this2.data[4] = right.y;
		var this3 = this.rawData;
		if(8 >= this3.length && !this3.fixed) this3.length = 9;
		this3.data[8] = right.z;
		var this4 = this.rawData;
		if(12 >= this4.length && !this4.fixed) this4.length = 13;
		this4.data[12] = 0.0;
		var this5 = this.rawData;
		if(1 >= this5.length && !this5.fixed) this5.length = 2;
		this5.data[1] = vup.x;
		var this6 = this.rawData;
		if(5 >= this6.length && !this6.fixed) this6.length = 6;
		this6.data[5] = vup.y;
		var this7 = this.rawData;
		if(9 >= this7.length && !this7.fixed) this7.length = 10;
		this7.data[9] = vup.z;
		var this8 = this.rawData;
		if(13 >= this8.length && !this8.fixed) this8.length = 14;
		this8.data[13] = 0.0;
		var this9 = this.rawData;
		if(2 >= this9.length && !this9.fixed) this9.length = 3;
		this9.data[2] = dir.x;
		var this10 = this.rawData;
		if(6 >= this10.length && !this10.fixed) this10.length = 7;
		this10.data[6] = dir.y;
		var this11 = this.rawData;
		if(10 >= this11.length && !this11.fixed) this11.length = 11;
		this11.data[10] = dir.z;
		var this12 = this.rawData;
		if(14 >= this12.length && !this12.fixed) this12.length = 15;
		this12.data[14] = 0.0;
		var this13 = this.rawData;
		if(3 >= this13.length && !this13.fixed) this13.length = 4;
		this13.data[3] = pos.x;
		var this14 = this.rawData;
		if(7 >= this14.length && !this14.fixed) this14.length = 8;
		this14.data[7] = pos.y;
		var this15 = this.rawData;
		if(11 >= this15.length && !this15.fixed) this15.length = 12;
		this15.data[11] = pos.z;
		var this16 = this.rawData;
		if(15 >= this16.length && !this16.fixed) this16.length = 16;
		this16.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(0 >= this1.length && !this1.fixed) this1.length = 1;
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this2 = this.rawData;
		if(1 >= this2.length && !this2.fixed) this2.length = 2;
		this2.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this3 = this.rawData;
		if(2 >= this3.length && !this3.fixed) this3.length = 3;
		this3.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this4 = this.rawData;
		if(3 >= this4.length && !this4.fixed) this4.length = 4;
		this4.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this5 = this.rawData;
		if(4 >= this5.length && !this5.fixed) this5.length = 5;
		this5.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this6 = this.rawData;
		if(5 >= this6.length && !this6.fixed) this6.length = 6;
		this6.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this7 = this.rawData;
		if(6 >= this7.length && !this7.fixed) this7.length = 7;
		this7.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this8 = this.rawData;
		if(7 >= this8.length && !this8.fixed) this8.length = 8;
		this8.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this9 = this.rawData;
		if(8 >= this9.length && !this9.fixed) this9.length = 9;
		this9.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this10 = this.rawData;
		if(9 >= this10.length && !this10.fixed) this10.length = 10;
		this10.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this11 = this.rawData;
		if(10 >= this11.length && !this11.fixed) this11.length = 11;
		this11.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this12 = this.rawData;
		if(11 >= this12.length && !this12.fixed) this12.length = 12;
		this12.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this13 = this.rawData;
		if(12 >= this13.length && !this13.fixed) this13.length = 13;
		this13.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this14 = this.rawData;
		if(13 >= this14.length && !this14.fixed) this14.length = 14;
		this14.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this15 = this.rawData;
		if(14 >= this15.length && !this15.fixed) this15.length = 15;
		this15.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this16 = this.rawData;
		if(15 >= this16.length && !this16.fixed) this16.length = 16;
		this16.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl.geom.Matrix3D();
		m.set_position(new openfl.geom.Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(0 >= this1.length && !this1.fixed) this1.length = 1;
			this1.data[0] = cy * cz * scale[0];
			var this2 = this.rawData;
			if(1 >= this2.length && !this2.fixed) this2.length = 2;
			this2.data[1] = cy * sz * scale[1];
			var this3 = this.rawData;
			if(2 >= this3.length && !this3.fixed) this3.length = 3;
			this3.data[2] = -sy * scale[2];
			var this4 = this.rawData;
			if(3 >= this4.length && !this4.fixed) this4.length = 4;
			this4.data[3] = 0;
			var this5 = this.rawData;
			if(4 >= this5.length && !this5.fixed) this5.length = 5;
			this5.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this6 = this.rawData;
			if(5 >= this6.length && !this6.fixed) this6.length = 6;
			this6.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this7 = this.rawData;
			if(6 >= this7.length && !this7.fixed) this7.length = 7;
			this7.data[6] = sx * cy * scale[6];
			var this8 = this.rawData;
			if(7 >= this8.length && !this8.fixed) this8.length = 8;
			this8.data[7] = 0;
			var this9 = this.rawData;
			if(8 >= this9.length && !this9.fixed) this9.length = 9;
			this9.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this10 = this.rawData;
			if(9 >= this10.length && !this10.fixed) this10.length = 10;
			this10.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this11 = this.rawData;
			if(10 >= this11.length && !this11.fixed) this11.length = 11;
			this11.data[10] = cx * cy * scale[10];
			var this12 = this.rawData;
			if(11 >= this12.length && !this12.fixed) this12.length = 12;
			this12.data[11] = 0;
			var this13 = this.rawData;
			if(12 >= this13.length && !this13.fixed) this13.length = 13;
			this13.data[12] = components.data[0].x;
			var this14 = this.rawData;
			if(13 >= this14.length && !this14.fixed) this14.length = 14;
			this14.data[13] = components.data[0].y;
			var this15 = this.rawData;
			if(14 >= this15.length && !this15.fixed) this15.length = 15;
			this15.data[14] = components.data[0].z;
			var this16 = this.rawData;
			if(15 >= this16.length && !this16.fixed) this16.length = 16;
			this16.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl.geom.Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this17 = this.rawData;
			if(0 >= this17.length && !this17.fixed) this17.length = 1;
			this17.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this18 = this.rawData;
			if(1 >= this18.length && !this18.fixed) this18.length = 2;
			this18.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this19 = this.rawData;
			if(2 >= this19.length && !this19.fixed) this19.length = 3;
			this19.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this20 = this.rawData;
			if(3 >= this20.length && !this20.fixed) this20.length = 4;
			this20.data[3] = 0;
			var this21 = this.rawData;
			if(4 >= this21.length && !this21.fixed) this21.length = 5;
			this21.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this22 = this.rawData;
			if(5 >= this22.length && !this22.fixed) this22.length = 6;
			this22.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this23 = this.rawData;
			if(6 >= this23.length && !this23.fixed) this23.length = 7;
			this23.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this24 = this.rawData;
			if(7 >= this24.length && !this24.fixed) this24.length = 8;
			this24.data[7] = 0;
			var this25 = this.rawData;
			if(8 >= this25.length && !this25.fixed) this25.length = 9;
			this25.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this26 = this.rawData;
			if(9 >= this26.length && !this26.fixed) this26.length = 10;
			this26.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this27 = this.rawData;
			if(10 >= this27.length && !this27.fixed) this27.length = 11;
			this27.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this28 = this.rawData;
			if(11 >= this28.length && !this28.fixed) this28.length = 12;
			this28.data[11] = 0;
			var this29 = this.rawData;
			if(12 >= this29.length && !this29.fixed) this29.length = 13;
			this29.data[12] = components.data[0].x;
			var this30 = this.rawData;
			if(13 >= this30.length && !this30.fixed) this30.length = 14;
			this30.data[13] = components.data[0].y;
			var this31 = this.rawData;
			if(14 >= this31.length && !this31.fixed) this31.length = 15;
			this31.data[14] = components.data[0].z;
			var this32 = this.rawData;
			if(15 >= this32.length && !this32.fixed) this32.length = 16;
			this32.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this33 = this.rawData;
			if(0 >= this33.length && !this33.fixed) this33.length = 1;
			this33.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this34 = this.rawData;
			if(5 >= this34.length && !this34.fixed) this34.length = 6;
			this34.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this35 = this.rawData;
			if(10 >= this35.length && !this35.fixed) this35.length = 11;
			this35.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			if(i >= vout.length && !vout.fixed) vout.length = i + 1;
			vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			var key = i + 1;
			if(key >= vout.length && !vout.fixed) vout.length = key + 1;
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(key1 >= vout.length && !vout.fixed) vout.length = key1 + 1;
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = openfl._Vector.Vector_Impl_.copy(this.rawData);
		var this1 = this.rawData;
		if(1 >= this1.length && !this1.fixed) this1.length = 2;
		this1.data[1] = oRawData.data[4];
		var this2 = this.rawData;
		if(2 >= this2.length && !this2.fixed) this2.length = 3;
		this2.data[2] = oRawData.data[8];
		var this3 = this.rawData;
		if(3 >= this3.length && !this3.fixed) this3.length = 4;
		this3.data[3] = oRawData.data[12];
		var this4 = this.rawData;
		if(4 >= this4.length && !this4.fixed) this4.length = 5;
		this4.data[4] = oRawData.data[1];
		var this5 = this.rawData;
		if(6 >= this5.length && !this5.fixed) this5.length = 7;
		this5.data[6] = oRawData.data[9];
		var this6 = this.rawData;
		if(7 >= this6.length && !this6.fixed) this6.length = 8;
		this6.data[7] = oRawData.data[13];
		var this7 = this.rawData;
		if(8 >= this7.length && !this7.fixed) this7.length = 9;
		this7.data[8] = oRawData.data[2];
		var this8 = this.rawData;
		if(9 >= this8.length && !this8.fixed) this8.length = 10;
		this8.data[9] = oRawData.data[6];
		var this9 = this.rawData;
		if(11 >= this9.length && !this9.fixed) this9.length = 12;
		this9.data[11] = oRawData.data[14];
		var this10 = this.rawData;
		if(12 >= this10.length && !this10.fixed) this10.length = 13;
		this10.data[12] = oRawData.data[3];
		var this11 = this.rawData;
		if(13 >= this11.length && !this11.fixed) this11.length = 14;
		this11.data[13] = oRawData.data[7];
		var this12 = this.rawData;
		if(14 >= this12.length && !this12.fixed) this12.length = 15;
		this12.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl.geom.Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(12 >= this1.length && !this1.fixed) this1.length = 13;
		this1.data[12] = val.x;
		var this2 = this.rawData;
		if(13 >= this2.length && !this2.fixed) this2.length = 14;
		this2.data[13] = val.y;
		var this3 = this.rawData;
		if(14 >= this3.length && !this3.fixed) this3.length = 15;
		this3.data[14] = val.z;
		return val;
	}
	,__class__: openfl.geom.Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
openfl.geom.Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : true, __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl.geom.Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl.geom.Orientation3D.AXIS_ANGLE.toString = $estr;
openfl.geom.Orientation3D.AXIS_ANGLE.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl.geom.Orientation3D.EULER_ANGLES.toString = $estr;
openfl.geom.Orientation3D.EULER_ANGLES.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.QUATERNION = ["QUATERNION",2];
openfl.geom.Orientation3D.QUATERNION.toString = $estr;
openfl.geom.Orientation3D.QUATERNION.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Transform = function(displayObject) {
	this.colorTransform = new openfl.geom.ColorTransform();
	this.concatenatedColorTransform = new openfl.geom.ColorTransform();
	this.concatenatedMatrix = new openfl.geom.Matrix();
	this.pixelBounds = new openfl.geom.Rectangle();
	this.__displayObject = displayObject;
	this.__matrix = new openfl.geom.Matrix();
};
$hxClasses["openfl.geom.Transform"] = openfl.geom.Transform;
openfl.geom.Transform.__name__ = ["openfl","geom","Transform"];
openfl.geom.Transform.prototype = {
	get_matrix: function() {
		if(this.__matrix != null) {
			this.__matrix.identity();
			this.__matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			this.__matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			this.__matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return this.__matrix.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) return this.__matrix = null;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl.geom.Transform
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
};
openfl.gl = {};
openfl.gl.GL = function() { };
$hxClasses["openfl.gl.GL"] = openfl.gl.GL;
openfl.gl.GL.__name__ = ["openfl","gl","GL"];
openfl.gl.GL.__properties__ = {get_version:"get_version",get_drawingBufferWidth:"get_drawingBufferWidth",get_drawingBufferHeight:"get_drawingBufferHeight"}
openfl.gl.GL.drawingBufferHeight = null;
openfl.gl.GL.drawingBufferWidth = null;
openfl.gl.GL.version = null;
openfl.gl.GL.__context = null;
openfl.gl.GL.activeTexture = function(texture) {
	openfl.gl.GL.__context.activeTexture(texture);
};
openfl.gl.GL.attachShader = function(program,shader) {
	openfl.gl.GL.__context.attachShader(program,shader);
};
openfl.gl.GL.bindAttribLocation = function(program,index,name) {
	openfl.gl.GL.__context.bindAttribLocation(program,index,name);
};
openfl.gl.GL.bindBitmapDataTexture = function(texture) {
	if(texture.__glTexture == null) {
		texture.__glTexture = openfl.gl.GL.__context.createTexture();
		openfl.gl.GL.__context.bindTexture(3553,texture.__glTexture);
		openfl.gl.GL.__context.texParameteri(3553,10242,33071);
		openfl.gl.GL.__context.texParameteri(3553,10243,33071);
		openfl.gl.GL.__context.texParameteri(3553,10241,9728);
		openfl.gl.GL.__context.texParameteri(3553,10240,9728);
		texture.__syncImageData();
		if(texture.__sourceImage != null) openfl.gl.GL.__context.texImage2D(3553,0,6408,6408,5121,texture.__sourceImage); else openfl.gl.GL.__context.texImage2D(3553,0,6408,6408,5121,texture.__sourceCanvas);
	} else openfl.gl.GL.__context.bindTexture(3553,texture.__glTexture);
};
openfl.gl.GL.bindBuffer = function(target,buffer) {
	openfl.gl.GL.__context.bindBuffer(target,buffer);
};
openfl.gl.GL.bindFramebuffer = function(target,framebuffer) {
	openfl.gl.GL.__context.bindFramebuffer(target,framebuffer);
};
openfl.gl.GL.bindRenderbuffer = function(target,renderbuffer) {
	openfl.gl.GL.__context.bindRenderbuffer(target,renderbuffer);
};
openfl.gl.GL.bindTexture = function(target,texture) {
	openfl.gl.GL.__context.bindTexture(target,texture);
};
openfl.gl.GL.blendColor = function(red,green,blue,alpha) {
	openfl.gl.GL.__context.blendColor(red,green,blue,alpha);
};
openfl.gl.GL.blendEquation = function(mode) {
	openfl.gl.GL.__context.blendEquation(mode);
};
openfl.gl.GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	openfl.gl.GL.__context.blendEquationSeparate(modeRGB,modeAlpha);
};
openfl.gl.GL.blendFunc = function(sfactor,dfactor) {
	openfl.gl.GL.__context.blendFunc(sfactor,dfactor);
};
openfl.gl.GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	openfl.gl.GL.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
openfl.gl.GL.bufferData = function(target,data,usage) {
	openfl.gl.GL.__context.bufferData(target,data,usage);
};
openfl.gl.GL.bufferSubData = function(target,offset,data) {
	openfl.gl.GL.__context.bufferSubData(target,offset,data);
};
openfl.gl.GL.checkFramebufferStatus = function(target) {
	return openfl.gl.GL.__context.checkFramebufferStatus(target);
};
openfl.gl.GL.clear = function(mask) {
	openfl.gl.GL.__context.clear(mask);
};
openfl.gl.GL.clearColor = function(red,green,blue,alpha) {
	openfl.gl.GL.__context.clearColor(red,green,blue,alpha);
};
openfl.gl.GL.clearDepth = function(depth) {
	openfl.gl.GL.__context.clearDepth(depth);
};
openfl.gl.GL.clearStencil = function(s) {
	openfl.gl.GL.__context.clearStencil(s);
};
openfl.gl.GL.colorMask = function(red,green,blue,alpha) {
	openfl.gl.GL.__context.colorMask(red,green,blue,alpha);
};
openfl.gl.GL.compileShader = function(shader) {
	openfl.gl.GL.__context.compileShader(shader);
};
openfl.gl.GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	openfl.gl.GL.__context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
openfl.gl.GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	openfl.gl.GL.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
openfl.gl.GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	openfl.gl.GL.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
openfl.gl.GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	openfl.gl.GL.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
openfl.gl.GL.createBuffer = function() {
	return openfl.gl.GL.__context.createBuffer();
};
openfl.gl.GL.createFramebuffer = function() {
	return openfl.gl.GL.__context.createFramebuffer();
};
openfl.gl.GL.createProgram = function() {
	return openfl.gl.GL.__context.createProgram();
};
openfl.gl.GL.createRenderbuffer = function() {
	return openfl.gl.GL.__context.createRenderbuffer();
};
openfl.gl.GL.createShader = function(type) {
	return openfl.gl.GL.__context.createShader(type);
};
openfl.gl.GL.createTexture = function() {
	return openfl.gl.GL.__context.createTexture();
};
openfl.gl.GL.cullFace = function(mode) {
	openfl.gl.GL.__context.cullFace(mode);
};
openfl.gl.GL.deleteBuffer = function(buffer) {
	openfl.gl.GL.__context.deleteBuffer(buffer);
};
openfl.gl.GL.deleteFramebuffer = function(framebuffer) {
	openfl.gl.GL.__context.deleteFramebuffer(framebuffer);
};
openfl.gl.GL.deleteProgram = function(program) {
	openfl.gl.GL.__context.deleteProgram(program);
};
openfl.gl.GL.deleteRenderbuffer = function(renderbuffer) {
	openfl.gl.GL.__context.deleteRenderbuffer(renderbuffer);
};
openfl.gl.GL.deleteShader = function(shader) {
	openfl.gl.GL.__context.deleteShader(shader);
};
openfl.gl.GL.deleteTexture = function(texture) {
	openfl.gl.GL.__context.deleteTexture(texture);
};
openfl.gl.GL.depthFunc = function(func) {
	openfl.gl.GL.__context.depthFunc(func);
};
openfl.gl.GL.depthMask = function(flag) {
	openfl.gl.GL.__context.depthMask(flag);
};
openfl.gl.GL.depthRange = function(zNear,zFar) {
	openfl.gl.GL.__context.depthRange(zNear,zFar);
};
openfl.gl.GL.detachShader = function(program,shader) {
	openfl.gl.GL.__context.detachShader(program,shader);
};
openfl.gl.GL.disable = function(cap) {
	openfl.gl.GL.__context.disable(cap);
};
openfl.gl.GL.disableVertexAttribArray = function(index) {
	openfl.gl.GL.__context.disableVertexAttribArray(index);
};
openfl.gl.GL.drawArrays = function(mode,first,count) {
	openfl.gl.GL.__context.drawArrays(mode,first,count);
};
openfl.gl.GL.drawElements = function(mode,count,type,offset) {
	openfl.gl.GL.__context.drawElements(mode,count,type,offset);
};
openfl.gl.GL.enable = function(cap) {
	openfl.gl.GL.__context.enable(cap);
};
openfl.gl.GL.enableVertexAttribArray = function(index) {
	openfl.gl.GL.__context.enableVertexAttribArray(index);
};
openfl.gl.GL.finish = function() {
	openfl.gl.GL.__context.finish();
};
openfl.gl.GL.flush = function() {
	openfl.gl.GL.__context.flush();
};
openfl.gl.GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	openfl.gl.GL.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
openfl.gl.GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	openfl.gl.GL.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
openfl.gl.GL.frontFace = function(mode) {
	openfl.gl.GL.__context.frontFace(mode);
};
openfl.gl.GL.generateMipmap = function(target) {
	openfl.gl.GL.__context.generateMipmap(target);
};
openfl.gl.GL.getActiveAttrib = function(program,index) {
	return openfl.gl.GL.__context.getActiveAttrib(program,index);
};
openfl.gl.GL.getActiveUniform = function(program,index) {
	return openfl.gl.GL.__context.getActiveUniform(program,index);
};
openfl.gl.GL.getAttachedShaders = function(program) {
	return openfl.gl.GL.__context.getAttachedShaders(program);
};
openfl.gl.GL.getAttribLocation = function(program,name) {
	return openfl.gl.GL.__context.getAttribLocation(program,name);
};
openfl.gl.GL.getBufferParameter = function(target,pname) {
	return openfl.gl.GL.__context.getBufferParameter(target,pname);
};
openfl.gl.GL.getContextAttributes = function() {
	return openfl.gl.GL.__context.getContextAttributes();
};
openfl.gl.GL.getError = function() {
	return openfl.gl.GL.__context.getError();
};
openfl.gl.GL.getExtension = function(name) {
	return openfl.gl.GL.__context.getExtension(name);
};
openfl.gl.GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return openfl.gl.GL.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
openfl.gl.GL.getParameter = function(pname) {
	return openfl.gl.GL.__context.getParameter(pname);
};
openfl.gl.GL.getProgramInfoLog = function(program) {
	return openfl.gl.GL.__context.getProgramInfoLog(program);
};
openfl.gl.GL.getProgramParameter = function(program,pname) {
	return openfl.gl.GL.__context.getProgramParameter(program,pname);
};
openfl.gl.GL.getRenderbufferParameter = function(target,pname) {
	return openfl.gl.GL.__context.getRenderbufferParameter(target,pname);
};
openfl.gl.GL.getShaderInfoLog = function(shader) {
	return openfl.gl.GL.__context.getShaderInfoLog(shader);
};
openfl.gl.GL.getShaderParameter = function(shader,pname) {
	return openfl.gl.GL.__context.getShaderParameter(shader,pname);
};
openfl.gl.GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	openfl.Lib.notImplemented("GL.getShaderPrecisionFormat");
	return null;
};
openfl.gl.GL.getShaderSource = function(shader) {
	return openfl.gl.GL.__context.getShaderSource(shader);
};
openfl.gl.GL.getSupportedExtensions = function() {
	return openfl.gl.GL.__context.getSupportedExtensions();
};
openfl.gl.GL.getTexParameter = function(target,pname) {
	return openfl.gl.GL.__context.getTexParameter(target,pname);
};
openfl.gl.GL.getUniform = function(program,location) {
	return openfl.gl.GL.__context.getUniform(program,location);
};
openfl.gl.GL.getUniformLocation = function(program,name) {
	return openfl.gl.GL.__context.getUniformLocation(program,name);
};
openfl.gl.GL.getVertexAttrib = function(index,pname) {
	return openfl.gl.GL.__context.getVertexAttrib(index,pname);
};
openfl.gl.GL.getVertexAttribOffset = function(index,pname) {
	return openfl.gl.GL.__context.getVertexAttribOffset(index,pname);
};
openfl.gl.GL.hint = function(target,mode) {
	openfl.gl.GL.__context.hint(target,mode);
};
openfl.gl.GL.isBuffer = function(buffer) {
	return openfl.gl.GL.__context.isBuffer(buffer);
};
openfl.gl.GL.isEnabled = function(cap) {
	return openfl.gl.GL.__context.isEnabled(cap);
};
openfl.gl.GL.isFramebuffer = function(framebuffer) {
	return openfl.gl.GL.__context.isFramebuffer(framebuffer);
};
openfl.gl.GL.isProgram = function(program) {
	return openfl.gl.GL.__context.isProgram(program);
};
openfl.gl.GL.isRenderbuffer = function(renderbuffer) {
	return openfl.gl.GL.__context.isRenderbuffer(renderbuffer);
};
openfl.gl.GL.isShader = function(shader) {
	return openfl.gl.GL.__context.isShader(shader);
};
openfl.gl.GL.isTexture = function(texture) {
	return openfl.gl.GL.__context.isTexture(texture);
};
openfl.gl.GL.lineWidth = function(width) {
	openfl.gl.GL.__context.lineWidth(width);
};
openfl.gl.GL.linkProgram = function(program) {
	openfl.gl.GL.__context.linkProgram(program);
};
openfl.gl.GL.pixelStorei = function(pname,param) {
	openfl.gl.GL.__context.pixelStorei(pname,param);
};
openfl.gl.GL.polygonOffset = function(factor,units) {
	openfl.gl.GL.__context.polygonOffset(factor,units);
};
openfl.gl.GL.readPixels = function(x,y,width,height,format,type,pixels) {
	openfl.gl.GL.__context.readPixels(x,y,width,height,format,type,pixels);
};
openfl.gl.GL.renderbufferStorage = function(target,internalformat,width,height) {
	openfl.gl.GL.__context.renderbufferStorage(target,internalformat,width,height);
};
openfl.gl.GL.sampleCoverage = function(value,invert) {
	openfl.gl.GL.__context.sampleCoverage(value,invert);
};
openfl.gl.GL.scissor = function(x,y,width,height) {
	openfl.gl.GL.__context.scissor(x,y,width,height);
};
openfl.gl.GL.shaderSource = function(shader,source) {
	openfl.gl.GL.__context.shaderSource(shader,source);
};
openfl.gl.GL.stencilFunc = function(func,ref,mask) {
	openfl.gl.GL.__context.stencilFunc(func,ref,mask);
};
openfl.gl.GL.stencilFuncSeparate = function(face,func,ref,mask) {
	openfl.gl.GL.__context.stencilFuncSeparate(face,func,ref,mask);
};
openfl.gl.GL.stencilMask = function(mask) {
	openfl.gl.GL.__context.stencilMask(mask);
};
openfl.gl.GL.stencilMaskSeparate = function(face,mask) {
	openfl.gl.GL.__context.stencilMaskSeparate(face,mask);
};
openfl.gl.GL.stencilOp = function(fail,zfail,zpass) {
	openfl.gl.GL.__context.stencilOp(fail,zfail,zpass);
};
openfl.gl.GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	openfl.gl.GL.__context.stencilOpSeparate(face,fail,zfail,zpass);
};
openfl.gl.GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	openfl.gl.GL.__context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
openfl.gl.GL.texParameterf = function(target,pname,param) {
	openfl.gl.GL.__context.texParameterf(target,pname,param);
};
openfl.gl.GL.texParameteri = function(target,pname,param) {
	openfl.gl.GL.__context.texParameteri(target,pname,param);
};
openfl.gl.GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	openfl.gl.GL.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
openfl.gl.GL.uniform1f = function(location,x) {
	openfl.gl.GL.__context.uniform1f(location,x);
};
openfl.gl.GL.uniform1fv = function(location,x) {
	openfl.gl.GL.__context.uniform1fv(location,x);
};
openfl.gl.GL.uniform1i = function(location,x) {
	openfl.gl.GL.__context.uniform1i(location,x);
};
openfl.gl.GL.uniform1iv = function(location,v) {
	openfl.gl.GL.__context.uniform1iv(location,v);
};
openfl.gl.GL.uniform2f = function(location,x,y) {
	openfl.gl.GL.__context.uniform2f(location,x,y);
};
openfl.gl.GL.uniform2fv = function(location,v) {
	openfl.gl.GL.__context.uniform2fv(location,v);
};
openfl.gl.GL.uniform2i = function(location,x,y) {
	openfl.gl.GL.__context.uniform2i(location,x,y);
};
openfl.gl.GL.uniform2iv = function(location,v) {
	openfl.gl.GL.__context.uniform2iv(location,v);
};
openfl.gl.GL.uniform3f = function(location,x,y,z) {
	openfl.gl.GL.__context.uniform3f(location,x,y,z);
};
openfl.gl.GL.uniform3fv = function(location,v) {
	openfl.gl.GL.__context.uniform3fv(location,v);
};
openfl.gl.GL.uniform3i = function(location,x,y,z) {
	openfl.gl.GL.__context.uniform3i(location,x,y,z);
};
openfl.gl.GL.uniform3iv = function(location,v) {
	openfl.gl.GL.__context.uniform3iv(location,v);
};
openfl.gl.GL.uniform4f = function(location,x,y,z,w) {
	openfl.gl.GL.__context.uniform4f(location,x,y,z,w);
};
openfl.gl.GL.uniform4fv = function(location,v) {
	openfl.gl.GL.__context.uniform4fv(location,v);
};
openfl.gl.GL.uniform4i = function(location,x,y,z,w) {
	openfl.gl.GL.__context.uniform4i(location,x,y,z,w);
};
openfl.gl.GL.uniform4iv = function(location,v) {
	openfl.gl.GL.__context.uniform4iv(location,v);
};
openfl.gl.GL.uniformMatrix2fv = function(location,transpose,v) {
	openfl.gl.GL.__context.uniformMatrix2fv(location,transpose,v);
};
openfl.gl.GL.uniformMatrix3fv = function(location,transpose,v) {
	openfl.gl.GL.__context.uniformMatrix3fv(location,transpose,v);
};
openfl.gl.GL.uniformMatrix4fv = function(location,transpose,v) {
	openfl.gl.GL.__context.uniformMatrix4fv(location,transpose,v);
};
openfl.gl.GL.uniformMatrix3D = function(location,transpose,matrix) {
	openfl.gl.GL.__context.uniformMatrix4fv(location,transpose,new Float32Array((function($this) {
		var $r;
		var this1 = matrix.rawData;
		var value = new Array();
		{
			var _g1 = 0;
			var _g = this1.data.length;
			while(_g1 < _g) {
				var i = _g1++;
				value.push(this1.data[i]);
			}
		}
		$r = value;
		return $r;
	}(this))));
};
openfl.gl.GL.useProgram = function(program) {
	openfl.gl.GL.__context.useProgram(program);
};
openfl.gl.GL.validateProgram = function(program) {
	openfl.gl.GL.__context.validateProgram(program);
};
openfl.gl.GL.vertexAttrib1f = function(indx,x) {
	openfl.gl.GL.__context.vertexAttrib1f(indx,x);
};
openfl.gl.GL.vertexAttrib1fv = function(indx,values) {
	openfl.gl.GL.__context.vertexAttrib1fv(indx,values);
};
openfl.gl.GL.vertexAttrib2f = function(indx,x,y) {
	openfl.gl.GL.__context.vertexAttrib2f(indx,x,y);
};
openfl.gl.GL.vertexAttrib2fv = function(indx,values) {
	openfl.gl.GL.__context.vertexAttrib2fv(indx,values);
};
openfl.gl.GL.vertexAttrib3f = function(indx,x,y,z) {
	openfl.gl.GL.__context.vertexAttrib3f(indx,x,y,z);
};
openfl.gl.GL.vertexAttrib3fv = function(indx,values) {
	openfl.gl.GL.__context.vertexAttrib3fv(indx,values);
};
openfl.gl.GL.vertexAttrib4f = function(indx,x,y,z,w) {
	openfl.gl.GL.__context.vertexAttrib4f(indx,x,y,z,w);
};
openfl.gl.GL.vertexAttrib4fv = function(indx,values) {
	openfl.gl.GL.__context.vertexAttrib4fv(indx,values);
};
openfl.gl.GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	openfl.gl.GL.__context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
openfl.gl.GL.viewport = function(x,y,width,height) {
	openfl.gl.GL.__context.viewport(x,y,width,height);
};
openfl.gl.GL.get_drawingBufferHeight = function() {
	return openfl.Lib.current.stage.stageHeight;
};
openfl.gl.GL.get_drawingBufferWidth = function() {
	return openfl.Lib.current.stage.stageWidth;
};
openfl.gl.GL.get_version = function() {
	return 7938;
};
openfl.media = {};
openfl.media.ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl.media.ID3Info;
openfl.media.ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl.media.ID3Info.prototype = {
	__class__: openfl.media.ID3Info
};
openfl.media.Sound = function(stream,context) {
	openfl.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl.media.Sound;
openfl.media.Sound.__name__ = ["openfl","media","Sound"];
openfl.media.Sound.__super__ = openfl.events.EventDispatcher;
openfl.media.Sound.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
		if(openfl.media.Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe.io.Path.withoutExtension(stream.url);
		if(!openfl.media.Sound.__registeredSounds.exists(this.__soundID)) {
			openfl.media.Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		openfl.Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl.Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl.media.SoundTransform(1,0);
		var instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops,sndTransform.volume,sndTransform.pan);
		return new openfl.media.SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl.media.ID3Info();
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
		}
	}
	,__class__: openfl.media.Sound
	,__properties__: {get_id3:"get_id3"}
});
openfl.media.SoundChannel = function(soundInstance) {
	openfl.events.EventDispatcher.call(this,this);
	this.__soundInstance = soundInstance;
	this.__soundInstance.addEventListener("complete",$bind(this,this.soundInstance_onComplete));
};
$hxClasses["openfl.media.SoundChannel"] = openfl.media.SoundChannel;
openfl.media.SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl.media.SoundChannel.__super__ = openfl.events.EventDispatcher;
openfl.media.SoundChannel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	stop: function() {
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		this.__soundInstance.stop();
		this.__soundInstance = null;
	}
	,get_position: function() {
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		return new openfl.media.SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,__class__: openfl.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
openfl.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl.media.SoundLoaderContext;
openfl.media.SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl.media.SoundLoaderContext.prototype = {
	__class__: openfl.media.SoundLoaderContext
};
openfl.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl.media.SoundTransform;
openfl.media.SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl.media.SoundTransform.prototype = {
	__class__: openfl.media.SoundTransform
};
openfl.net = {};
openfl.net.URLLoader = function(request) {
	openfl.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl.net.URLLoader;
openfl.net.URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl.net.URLLoader.__super__ = openfl.events.EventDispatcher;
openfl.net.URLLoader.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,openfl.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,openfl.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = openfl.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl.events.Event(openfl.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl.events.ProgressEvent(openfl.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl.events.SecurityErrorEvent(openfl.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl.events.HTTPStatusEvent(openfl.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
openfl.net.URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl.net.URLLoaderDataFormat.BINARY.toString = $estr;
openfl.net.URLLoaderDataFormat.BINARY.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl.net.URLLoaderDataFormat.TEXT.toString = $estr;
openfl.net.URLLoaderDataFormat.TEXT.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl.net.URLLoaderDataFormat.VARIABLES.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl.net.URLRequest;
openfl.net.URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == openfl.net.URLRequestMethod.GET || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,openfl.utils.ByteArray)) {
			res = res.slice();
			res.push(new openfl.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl.net.URLRequest
};
openfl.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl.net.URLRequestHeader;
openfl.net.URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl.net.URLRequestHeader.prototype = {
	__class__: openfl.net.URLRequestHeader
};
openfl.net.URLRequestMethod = function() { };
$hxClasses["openfl.net.URLRequestMethod"] = openfl.net.URLRequestMethod;
openfl.net.URLRequestMethod.__name__ = ["openfl","net","URLRequestMethod"];
openfl.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl.net.URLVariables;
openfl.net.URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl.net.URLVariables
};
openfl.sensors = {};
openfl.sensors.Accelerometer = function() {
	openfl.events.EventDispatcher.call(this);
	this._interval = 0;
	this.set_muted(false);
	this.setRequestedUpdateInterval(openfl.sensors.Accelerometer.defaultInterval);
};
$hxClasses["openfl.sensors.Accelerometer"] = openfl.sensors.Accelerometer;
openfl.sensors.Accelerometer.__name__ = ["openfl","sensors","Accelerometer"];
openfl.sensors.Accelerometer.__properties__ = {get_isSupported:"get_isSupported"}
openfl.sensors.Accelerometer.isSupported = null;
openfl.sensors.Accelerometer.get_isSupported = function() {
	return false;
};
openfl.sensors.Accelerometer.__super__ = openfl.events.EventDispatcher;
openfl.sensors.Accelerometer.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		openfl.events.EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		this.update();
	}
	,setRequestedUpdateInterval: function(interval) {
		this._interval = interval;
		if(this._interval < 0) throw new openfl.errors.ArgumentError(); else if(this._interval == 0) this._interval = openfl.sensors.Accelerometer.defaultInterval;
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
		if(openfl.sensors.Accelerometer.get_isSupported() && !this.muted) {
			this.timer = new haxe.Timer(this._interval);
			this.timer.run = $bind(this,this.update);
		}
	}
	,update: function() {
		var event = new openfl.events.AccelerometerEvent(openfl.events.AccelerometerEvent.UPDATE);
		var data_x = 0;
		var data_y = 1;
		var data_z = 0;
		event.timestamp = haxe.Timer.stamp();
		event.accelerationX = data_x;
		event.accelerationY = data_y;
		event.accelerationZ = data_z;
		this.dispatchEvent(event);
	}
	,set_muted: function(inVal) {
		this.muted = inVal;
		this.setRequestedUpdateInterval(this._interval);
		return inVal;
	}
	,__class__: openfl.sensors.Accelerometer
	,__properties__: {set_muted:"set_muted"}
});
openfl.system = {};
openfl.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl.system.ApplicationDomain;
openfl.system.ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl.system.ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl.system.ApplicationDomain
};
openfl.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl.system.LoaderContext;
openfl.system.LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl.system.LoaderContext.prototype = {
	__class__: openfl.system.LoaderContext
};
openfl.system.SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl.system.SecurityDomain;
openfl.system.SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl.system.SecurityDomain.prototype = {
	__class__: openfl.system.SecurityDomain
};
openfl.text = {};
openfl.text._AntiAliasType = {};
openfl.text._AntiAliasType.AntiAliasType_Impl_ = function() { };
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl.text._AntiAliasType.AntiAliasType_Impl_;
openfl.text._AntiAliasType.AntiAliasType_Impl_.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl.text.Font = function() {
};
$hxClasses["openfl.text.Font"] = openfl.text.Font;
openfl.text.Font.__name__ = ["openfl","text","Font"];
openfl.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl.text.Font.registerFont = function(font) {
};
openfl.text.Font.prototype = {
	__class__: openfl.text.Font
};
openfl.text.FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : true, __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl.text.FontStyle.REGULAR = ["REGULAR",0];
openfl.text.FontStyle.REGULAR.toString = $estr;
openfl.text.FontStyle.REGULAR.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.ITALIC = ["ITALIC",1];
openfl.text.FontStyle.ITALIC.toString = $estr;
openfl.text.FontStyle.ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl.text.FontStyle.BOLD_ITALIC.toString = $estr;
openfl.text.FontStyle.BOLD_ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD = ["BOLD",3];
openfl.text.FontStyle.BOLD.toString = $estr;
openfl.text.FontStyle.BOLD.__enum__ = openfl.text.FontStyle;
openfl.text.FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : true, __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl.text.FontType.DEVICE = ["DEVICE",0];
openfl.text.FontType.DEVICE.toString = $estr;
openfl.text.FontType.DEVICE.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED = ["EMBEDDED",1];
openfl.text.FontType.EMBEDDED.toString = $estr;
openfl.text.FontType.EMBEDDED.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl.text.FontType.EMBEDDED_CFF.toString = $estr;
openfl.text.FontType.EMBEDDED_CFF.__enum__ = openfl.text.FontType;
openfl.text.GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl.text.GridFitType.NONE = ["NONE",0];
openfl.text.GridFitType.NONE.toString = $estr;
openfl.text.GridFitType.NONE.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.PIXEL = ["PIXEL",1];
openfl.text.GridFitType.PIXEL.toString = $estr;
openfl.text.GridFitType.PIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl.text.GridFitType.SUBPIXEL.toString = $estr;
openfl.text.GridFitType.SUBPIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.TextField = function() {
	openfl.display.InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.set_type(openfl.text.TextFieldType.DYNAMIC);
	this.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl.text.GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl.text.TextField.__defaultTextFormat == null) {
		openfl.text.TextField.__defaultTextFormat = new openfl.text.TextFormat("Times New Roman",12,0,false,false,false,"","",openfl.text.TextFormatAlign.LEFT,0,0,0,0);
		openfl.text.TextField.__defaultTextFormat.blockIndent = 0;
		openfl.text.TextField.__defaultTextFormat.bullet = false;
		openfl.text.TextField.__defaultTextFormat.letterSpacing = 0;
		openfl.text.TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl.text.TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl.text.TextField;
openfl.text.TextField.__name__ = ["openfl","text","TextField"];
openfl.text.TextField.__defaultTextFormat = null;
openfl.text.TextField.__super__ = openfl.display.InteractiveObject;
openfl.text.TextField.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl.Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineMetrics");
		return null;
	}
	,getLineOffset: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl.Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = new openfl.geom.Rectangle(0,0,this.__width,this.__height);
		bounds.transform(this.__worldTransform);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getFont: function(format) {
		var font;
		if(format.italic) font = "italic "; else font = "normal ";
		font += "normal ";
		if(format.bold) font += "bold "; else font += "normal ";
		font += format.size + "px";
		font += "/" + (format.size + format.leading + 4) + "px ";
		font += "'" + (function($this) {
			var $r;
			var _g = format.font;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case "_sans":
					$r = "sans-serif";
					break;
				case "_serif":
					$r = "serif";
					break;
				case "_typewriter":
					$r = "monospace";
					break;
				default:
					$r = format.font;
				}
				return $r;
			}($this));
			return $r;
		}(this));
		font += "'";
		return font;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__measureText: function() {
		if(this.__ranges == null) {
			this.__context.font = this.__getFont(this.__textFormat);
			return [this.__context.measureText(this.__text).width];
		} else {
			var measurements = [];
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				this.__context.font = this.__getFont(range.format);
				measurements.push(this.__context.measureText(this.get_text().substring(range.start,range.end)).width);
			}
			return measurements;
		}
	}
	,__measureTextWithDOM: function() {
		var div = this.__div;
		if(this.__div == null) {
			div = window.document.createElement("div");
			div.innerHTML = this.__text;
			div.style.setProperty("font",this.__getFont(this.__textFormat),null);
			div.style.position = "absolute";
			div.style.top = "110%";
			window.document.body.appendChild(div);
		}
		this.__measuredWidth = div.clientWidth;
		if(this.__div == null) div.style.width = Std.string(this.__width) + "px";
		this.__measuredHeight = div.clientHeight;
		if(this.__div == null) window.document.body.removeChild(div);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__dirty) {
			if((this.__text == null || this.__text == "") && !this.background && !this.border || (this.get_width() <= 0 || this.get_height() <= 0) && this.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
				this.__canvas = null;
				this.__context = null;
			} else {
				if(this.__canvas == null) {
					this.__canvas = window.document.createElement("canvas");
					this.__context = this.__canvas.getContext("2d");
				}
				if(this.__text != null && this.__text != "") {
					var measurements = this.__measureText();
					var textWidth = 0.0;
					var _g = 0;
					while(_g < measurements.length) {
						var measurement = measurements[_g];
						++_g;
						textWidth += measurement;
					}
					if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) this.__width = textWidth + 4;
					this.__canvas.width = Math.ceil(this.__width);
					this.__canvas.height = Math.ceil(this.__height);
					if(this.border || this.background) {
						this.__context.rect(0.5,0.5,this.__width - 1,this.__height - 1);
						if(this.background) {
							this.__context.fillStyle = "#" + StringTools.hex(this.backgroundColor,6);
							this.__context.fill();
						}
						if(this.border) {
							this.__context.lineWidth = 1;
							this.__context.strokeStyle = "#" + StringTools.hex(this.borderColor,6);
							this.__context.stroke();
						}
					}
					if(this.__ranges == null) this.__renderText(this.get_text(),this.__textFormat,0); else {
						var currentIndex = 0;
						var range;
						var offsetX = 0.0;
						var _g1 = 0;
						var _g2 = this.__ranges.length;
						while(_g1 < _g2) {
							var i = _g1++;
							range = this.__ranges[i];
							this.__renderText(this.get_text().substring(range.start,range.end),range.format,offsetX);
							offsetX += measurements[i];
						}
					}
				} else {
					if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) this.__width = 4;
					this.__canvas.width = Math.ceil(this.__width);
					this.__canvas.height = Math.ceil(this.__height);
					if(this.border || this.background) {
						if(this.border) this.__context.rect(0.5,0.5,this.__width - 1,this.__height - 1); else this.__context.rect(0,0,this.__width,this.__height);
						if(this.background) {
							this.__context.fillStyle = "#" + StringTools.hex(this.backgroundColor,6);
							this.__context.fill();
						}
						if(this.border) {
							this.__context.lineWidth = 1;
							this.__context.lineCap = "square";
							this.__context.strokeStyle = "#" + StringTools.hex(this.borderColor,6);
							this.__context.stroke();
						}
					}
				}
			}
			this.__dirty = false;
		}
		if(this.__canvas != null) {
			var context = renderSession.context;
			context.globalAlpha = this.__worldAlpha;
			var transform = this.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(this.get_scrollRect() == null) context.drawImage(this.__canvas,0,0); else context.drawImage(this.__canvas,this.get_scrollRect().x,this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height,this.get_scrollRect().x,this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
		}
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(this.__dirty || this.__div == null) {
				if(this.__text != "" || this.background || this.border) {
					if(this.__div == null) {
						this.__div = window.document.createElement("div");
						this.__initializeElement(this.__div,renderSession);
						this.__style.setProperty("cursor","inherit",null);
					}
					this.__div.innerHTML = this.__text;
					if(this.background) this.__style.setProperty("background-color","#" + StringTools.hex(this.backgroundColor,6),null); else this.__style.removeProperty("background-color");
					if(this.border) this.__style.setProperty("border","solid 1px #" + StringTools.hex(this.borderColor,6),null); else this.__style.removeProperty("border");
					this.__style.setProperty("font",this.__getFont(this.__textFormat),null);
					this.__style.setProperty("color","#" + StringTools.hex(this.__textFormat.color,6),null);
					if(this.autoSize != openfl.text.TextFieldAutoSize.NONE) this.__style.setProperty("width","auto",null); else this.__style.setProperty("width",this.__width + "px",null);
					this.__style.setProperty("height",this.__height + "px",null);
					var _g = this.__textFormat.align;
					switch(_g[1]) {
					case 3:
						this.__style.setProperty("text-align","center",null);
						break;
					case 1:
						this.__style.setProperty("text-align","right",null);
						break;
					default:
						this.__style.setProperty("text-align","left",null);
					}
					this.__dirty = false;
				} else if(this.__div != null) {
					renderSession.element.removeChild(this.__div);
					this.__div = null;
				}
			}
			if(this.__div != null) this.__applyStyle(renderSession,true,true,false);
		} else if(this.__div != null) {
			renderSession.element.removeChild(this.__div);
			this.__div = null;
			this.__style = null;
		}
	}
	,__renderText: function(text,format,offsetX) {
		this.__context.font = this.__getFont(format);
		this.__context.textBaseline = "top";
		this.__context.fillStyle = "#" + StringTools.hex(format.color,6);
		var lines = text.split("\n");
		var yOffset = 0;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var _g1 = format.align;
			switch(_g1[1]) {
			case 3:
				this.__context.textAlign = "center";
				this.__context.fillText(line,this.__width / 2,2 + yOffset,this.__width - 4);
				break;
			case 1:
				this.__context.textAlign = "end";
				this.__context.fillText(line,this.__width - 2,2 + yOffset,this.__width - 4);
				break;
			default:
				this.__context.textAlign = "start";
				this.__context.fillText(line,2 + offsetX,2 + yOffset,this.__width - 4);
			}
			yOffset += this.get_textHeight();
		}
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) this.__dirty = true;
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) this.__dirty = true;
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = true;
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		if(this.__canvas != null) {
			var sizes = this.__measureText();
			var total = 0;
			var _g = 0;
			while(_g < sizes.length) {
				var size = sizes[_g];
				++_g;
				total += size;
			}
			return total;
		} else if(this.__div != null) return this.__div.clientWidth; else {
			this.__measureTextWithDOM();
			return this.__measuredWidth;
		}
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185; else if(this.__div != null) return this.__div.clientHeight; else {
			this.__measureTextWithDOM();
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_width: function() {
		if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) return (this.get_textWidth() + 4) * this.get_scaleX(); else return this.__width * this.get_scaleX();
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl.text.TextField
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
openfl.text.TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl.text.TextFormatRange;
openfl.text.TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl.text.TextFormatRange.prototype = {
	__class__: openfl.text.TextFormatRange
};
openfl.text.TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl.text.TextFieldAutoSize.CENTER = ["CENTER",0];
openfl.text.TextFieldAutoSize.CENTER.toString = $estr;
openfl.text.TextFieldAutoSize.CENTER.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.LEFT = ["LEFT",1];
openfl.text.TextFieldAutoSize.LEFT.toString = $estr;
openfl.text.TextFieldAutoSize.LEFT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.NONE = ["NONE",2];
openfl.text.TextFieldAutoSize.NONE.toString = $estr;
openfl.text.TextFieldAutoSize.NONE.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl.text.TextFieldAutoSize.RIGHT.toString = $estr;
openfl.text.TextFieldAutoSize.RIGHT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : true, __constructs__ : ["DYNAMIC","INPUT"] };
openfl.text.TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl.text.TextFieldType.DYNAMIC.toString = $estr;
openfl.text.TextFieldType.DYNAMIC.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFieldType.INPUT = ["INPUT",1];
openfl.text.TextFieldType.INPUT.toString = $estr;
openfl.text.TextFieldType.INPUT.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl.text.TextFormat;
openfl.text.TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl.text.TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl.text.TextFormat
};
openfl.text.TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl.text.TextFormatAlign.LEFT = ["LEFT",0];
openfl.text.TextFormatAlign.LEFT.toString = $estr;
openfl.text.TextFormatAlign.LEFT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.RIGHT = ["RIGHT",1];
openfl.text.TextFormatAlign.RIGHT.toString = $estr;
openfl.text.TextFormatAlign.RIGHT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl.text.TextFormatAlign.JUSTIFY.toString = $estr;
openfl.text.TextFormatAlign.JUSTIFY.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.CENTER = ["CENTER",3];
openfl.text.TextFormatAlign.CENTER.toString = $estr;
openfl.text.TextFormatAlign.CENTER.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl.text.TextLineMetrics;
openfl.text.TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl.text.TextLineMetrics.prototype = {
	__class__: openfl.text.TextLineMetrics
};
openfl.ui = {};
openfl.ui._KeyLocation = {};
openfl.ui._KeyLocation.KeyLocation_Impl_ = function() { };
$hxClasses["openfl.ui._KeyLocation.KeyLocation_Impl_"] = openfl.ui._KeyLocation.KeyLocation_Impl_;
openfl.ui._KeyLocation.KeyLocation_Impl_.__name__ = ["openfl","ui","_KeyLocation","KeyLocation_Impl_"];
openfl.ui.Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl.ui.Keyboard;
openfl.ui.Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl.ui.Keyboard.capsLock = null;
openfl.ui.Keyboard.numLock = null;
openfl.ui.Keyboard.isAccessible = function() {
	return false;
};
openfl.ui.Keyboard.__convertMozillaCode = function(code) {
	switch(code) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 14:
		return 13;
	case 16:
		return 16;
	case 17:
		return 17;
	case 20:
		return 20;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 33;
	case 34:
		return 34;
	case 35:
		return 35;
	case 36:
		return 36;
	case 37:
		return 37;
	case 39:
		return 39;
	case 38:
		return 38;
	case 40:
		return 40;
	case 45:
		return 45;
	case 46:
		return 46;
	case 144:
		return 144;
	default:
		return code;
	}
};
openfl.ui.Keyboard.__convertWebkitCode = function(code) {
	var _g = code.toLowerCase();
	switch(_g) {
	case "backspace":
		return 8;
	case "tab":
		return 9;
	case "enter":
		return 13;
	case "shift":
		return 16;
	case "control":
		return 17;
	case "capslock":
		return 20;
	case "escape":
		return 27;
	case "space":
		return 32;
	case "pageup":
		return 33;
	case "pagedown":
		return 34;
	case "end":
		return 35;
	case "home":
		return 36;
	case "left":
		return 37;
	case "right":
		return 39;
	case "up":
		return 38;
	case "down":
		return 40;
	case "insert":
		return 45;
	case "delete":
		return 46;
	case "numlock":
		return 144;
	case "break":
		return 19;
	}
	if(code.indexOf("U+") == 0) return Std.parseInt("0x" + HxOverrides.substr(code,3,null));
	throw "Unrecognized key code: " + code;
	return 0;
};
openfl.utils = {};
openfl.utils.ByteArray = function() {
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	this.___resizeBuffer(this.allocated);
};
$hxClasses["openfl.utils.ByteArray"] = openfl.utils.ByteArray;
openfl.utils.ByteArray.__name__ = ["openfl","utils","ByteArray"];
openfl.utils.ByteArray.fromBytes = function(inBytes) {
	var result = new openfl.utils.ByteArray();
	result.byteView = new Uint8Array(inBytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
openfl.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new openfl.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
openfl.utils.ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new openfl.errors.IOError("Read error - Out of bounds");
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readFullBytes: function(bytes,pos,len) {
		if(this.length < len) {
			if(this.allocated < len) this.___resizeBuffer(this.allocated = Std["int"](Math.max(len,this.allocated * 2))); else if(this.allocated > len) this.___resizeBuffer(this.allocated = len);
			this.length = len;
			len;
		}
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var data = this.data;
			data.setInt8(this.position++,bytes.b[i]);
		}
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function() {
		var bytes = haxe.io.Bytes.ofData(this.byteView);
		var buf = format.tools.Inflate.run(bytes).getData();
		this.byteView = new Uint8Array(buf);
		this.data = new DataView(this.byteView.buffer);
		this.set_length(this.allocated = this.byteView.buffer.byteLength);
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new openfl.errors.IOError("Write error - Out of bounds");
		if(length == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position += length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this._getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(inBytes) {
		this.byteView = new Uint8Array(inBytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,_getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: openfl.utils.ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
openfl.utils.Endian = function() { };
$hxClasses["openfl.utils.Endian"] = openfl.utils.Endian;
openfl.utils.Endian.__name__ = ["openfl","utils","Endian"];
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
ApplicationMain.images = new haxe.ds.StringMap();
ApplicationMain.urlLoaders = new haxe.ds.StringMap();
ApplicationMain.assetsLoaded = 0;
ApplicationMain.total = 0;
openfl.display.DisplayObject.__instanceCount = 0;
openfl.display.DisplayObject.__worldRenderDirty = 0;
openfl.display.DisplayObject.__worldTransformDirty = 0;
Main.ctr = 0;
away3d.library.assets.NamedAssetBase.DEFAULT_NAMESPACE = "default";
aglsl.Context3D.enableErrorChecking = false;
aglsl.Context3D.resources = [];
aglsl.Context3D.driverInfo = "Call getter function instead";
aglsl.Context3D.maxvertexconstants = 128;
aglsl.Context3D.maxfragconstants = 28;
aglsl.Context3D.maxtemp = 8;
aglsl.Context3D.maxstreams = 8;
aglsl.Context3D.maxtextures = 8;
aglsl.Context3D.defaultsampler = new aglsl.Sampler();
away3d.Away3D.WEBSITE_URL = "http://www.away3d.com";
away3d.Away3D.MAJOR_VERSION = 4;
away3d.Away3D.MINOR_VERSION = 1;
away3d.Away3D.REVISION = 5;
away3d.animators.ParticleAnimationSet.POST_PRIORITY = 9;
away3d.animators.ParticleAnimationSet.COLOR_PRIORITY = 18;
away3d.animators.data.ParticlePropertiesMode.GLOBAL = 0;
away3d.animators.data.ParticlePropertiesMode.LOCAL_STATIC = 1;
away3d.animators.data.ParticlePropertiesMode.LOCAL_DYNAMIC = 2;
away3d.animators.nodes.ParticleNodeBase.GLOBAL = "Global";
away3d.animators.nodes.ParticleNodeBase.LOCAL_STATIC = "LocalStatic";
away3d.animators.nodes.ParticleNodeBase.LOCAL_DYNAMIC = "LocalDynamic";
away3d.animators.nodes.ParticleNodeBase.MODES = [away3d.animators.nodes.ParticleNodeBase.GLOBAL,away3d.animators.nodes.ParticleNodeBase.LOCAL_STATIC,away3d.animators.nodes.ParticleNodeBase.LOCAL_DYNAMIC];
away3d.animators.nodes.ParticlePositionNode.POSITION_INDEX = 0;
away3d.animators.nodes.ParticlePositionNode.POSITION_VECTOR3D = "PositionVector3D";
away3d.animators.nodes.ParticleTimeNode.TIME_STREAM_INDEX = 0;
away3d.animators.nodes.ParticleTimeNode.TIME_CONSTANT_INDEX = 1;
away3d.animators.nodes.ParticleVelocityNode.VELOCITY_INDEX = 0;
away3d.animators.nodes.ParticleVelocityNode.VELOCITY_VECTOR3D = "VelocityVector3D";
away3d.core.managers.AGALProgram3DCache._currentId = 0;
openfl.events.Event.ACTIVATE = "activate";
openfl.events.Event.ADDED = "added";
openfl.events.Event.ADDED_TO_STAGE = "addedToStage";
openfl.events.Event.CANCEL = "cancel";
openfl.events.Event.CHANGE = "change";
openfl.events.Event.CLOSE = "close";
openfl.events.Event.COMPLETE = "complete";
openfl.events.Event.CONNECT = "connect";
openfl.events.Event.CONTEXT3D_CREATE = "context3DCreate";
openfl.events.Event.DEACTIVATE = "deactivate";
openfl.events.Event.ENTER_FRAME = "enterFrame";
openfl.events.Event.ID3 = "id3";
openfl.events.Event.INIT = "init";
openfl.events.Event.MOUSE_LEAVE = "mouseLeave";
openfl.events.Event.OPEN = "open";
openfl.events.Event.REMOVED = "removed";
openfl.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl.events.Event.RENDER = "render";
openfl.events.Event.RESIZE = "resize";
openfl.events.Event.SCROLL = "scroll";
openfl.events.Event.SELECT = "select";
openfl.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl.events.Event.UNLOAD = "unload";
openfl.events.Event.SOUND_COMPLETE = "soundComplete";
away3d.events.MouseEvent3D.MOUSE_OVER = "mouseOver3d";
away3d.events.MouseEvent3D.MOUSE_OUT = "mouseOut3d";
away3d.events.MouseEvent3D.MOUSE_UP = "mouseUp3d";
away3d.events.MouseEvent3D.MOUSE_DOWN = "mouseDown3d";
away3d.events.MouseEvent3D.MOUSE_MOVE = "mouseMove3d";
away3d.events.MouseEvent3D.CLICK = "click3d";
away3d.events.MouseEvent3D.DOUBLE_CLICK = "doubleClick3d";
away3d.events.MouseEvent3D.MOUSE_WHEEL = "mouseWheel3d";
away3d.core.managers.Mouse3DManager._viewCount = 0;
away3d.core.managers.Mouse3DManager._queuedEvents = new Array();
away3d.core.managers.Mouse3DManager._mouseUp = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_UP);
away3d.core.managers.Mouse3DManager._mouseClick = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.CLICK);
away3d.core.managers.Mouse3DManager._mouseOut = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_OUT);
away3d.core.managers.Mouse3DManager._mouseDown = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_DOWN);
away3d.core.managers.Mouse3DManager._mouseMove = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_MOVE);
away3d.core.managers.Mouse3DManager._mouseOver = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_OVER);
away3d.core.managers.Mouse3DManager._mouseWheel = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_WHEEL);
away3d.core.managers.Mouse3DManager._mouseDoubleClick = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.DOUBLE_CLICK);
away3d.core.managers.Mouse3DManager._previousCollidingView = -1;
away3d.core.managers.Mouse3DManager._collidingView = -1;
away3d.core.managers.Stage3DManager._numStageProxies = 0;
openfl.geom.Matrix.__identity = new openfl.geom.Matrix();
away3d.core.managers.Stage3DProxy._frameEventDriver = new openfl.display.Shape();
away3d.core.managers.Touch3DManager._collidingObjectFromTouchId = new haxe.ds.IntMap();
away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId = new haxe.ds.IntMap();
away3d.core.managers.Touch3DManager._queuedEvents = new Array();
away3d.core.math.MathConsts.RADIANS_TO_DEGREES = 180 / Math.PI;
away3d.core.math.MathConsts.DEGREES_TO_RADIANS = Math.PI / 180;
away3d.core.math.Plane3D.ALIGN_ANY = 0;
away3d.core.math.Plane3D.ALIGN_XY_AXIS = 1;
away3d.core.math.Plane3D.ALIGN_YZ_AXIS = 2;
away3d.core.math.Plane3D.ALIGN_XZ_AXIS = 3;
away3d.core.math.PlaneClassification.BACK = 0;
away3d.core.math.PlaneClassification.FRONT = 1;
away3d.core.math.PlaneClassification.IN = 0;
away3d.core.math.PlaneClassification.OUT = 1;
away3d.core.math.PlaneClassification.INTERSECT = 2;
away3d.core.math.Vector3DUtils.MathPI = Math.PI;
away3d.core.traverse.PartitionTraverser._collectionMark = 0;
away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT = new openfl.geom.Rectangle(0,0,1,1);
away3d.core.pick.PickingType.SHADER = new away3d.core.pick.ShaderPicker();
away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED = new away3d.core.pick.RaycastPicker(false);
away3d.core.pick.PickingType.RAYCAST_BEST_HIT = new away3d.core.pick.RaycastPicker(true);
away3d.core.render.DefaultRenderer.RTT_PASSES = 1;
away3d.core.render.DefaultRenderer.SCREEN_PASSES = 2;
away3d.core.render.DefaultRenderer.ALL_PASSES = 3;
away3d.debug.Debug.active = false;
away3d.debug.Debug.warningsAsErrors = false;
openfl.errors.Error.DEFAULT_TO_STRING = "Error";
away3d.events.AnimatorEvent.START = "start";
away3d.events.AnimatorEvent.STOP = "stop";
away3d.events.AnimatorEvent.CYCLE_COMPLETE = "cycle_complete";
away3d.events.Asset3DEvent.ASSET_COMPLETE = "assetComplete";
away3d.events.Asset3DEvent.ENTITY_COMPLETE = "entityComplete";
away3d.events.Asset3DEvent.SKYBOX_COMPLETE = "skyboxComplete";
away3d.events.Asset3DEvent.CAMERA_COMPLETE = "cameraComplete";
away3d.events.Asset3DEvent.MESH_COMPLETE = "meshComplete";
away3d.events.Asset3DEvent.GEOMETRY_COMPLETE = "geometryComplete";
away3d.events.Asset3DEvent.SKELETON_COMPLETE = "skeletonComplete";
away3d.events.Asset3DEvent.SKELETON_POSE_COMPLETE = "skeletonPoseComplete";
away3d.events.Asset3DEvent.CONTAINER_COMPLETE = "containerComplete";
away3d.events.Asset3DEvent.TEXTURE_COMPLETE = "textureComplete";
away3d.events.Asset3DEvent.TEXTURE_PROJECTOR_COMPLETE = "textureProjectorComplete";
away3d.events.Asset3DEvent.MATERIAL_COMPLETE = "materialComplete";
away3d.events.Asset3DEvent.ANIMATOR_COMPLETE = "animatorComplete";
away3d.events.Asset3DEvent.ANIMATION_SET_COMPLETE = "animationSetComplete";
away3d.events.Asset3DEvent.ANIMATION_STATE_COMPLETE = "animationStateComplete";
away3d.events.Asset3DEvent.ANIMATION_NODE_COMPLETE = "animationNodeComplete";
away3d.events.Asset3DEvent.STATE_TRANSITION_COMPLETE = "stateTransitionComplete";
away3d.events.Asset3DEvent.SEGMENT_SET_COMPLETE = "segmentSetComplete";
away3d.events.Asset3DEvent.LIGHT_COMPLETE = "lightComplete";
away3d.events.Asset3DEvent.LIGHTPICKER_COMPLETE = "lightPickerComplete";
away3d.events.Asset3DEvent.EFFECTMETHOD_COMPLETE = "effectMethodComplete";
away3d.events.Asset3DEvent.SHADOWMAPMETHOD_COMPLETE = "shadowMapMethodComplete";
away3d.events.Asset3DEvent.ASSET_RENAME = "assetRename";
away3d.events.Asset3DEvent.ASSET_CONFLICT_RESOLVED = "assetConflictResolved";
away3d.events.Asset3DEvent.TEXTURE_SIZE_ERROR = "textureSizeError";
away3d.events.CameraEvent.LENS_CHANGED = "lensChanged";
away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED = "SubGeometryAdded";
away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED = "SubGeometryRemoved";
away3d.events.GeometryEvent.BOUNDS_INVALID = "BoundsInvalid";
away3d.events.LensEvent.MATRIX_CHANGED = "matrixChanged";
away3d.events.LightEvent.CASTS_SHADOW_CHANGE = "castsShadowChange";
away3d.events.Object3DEvent.VISIBLITY_UPDATED = "visiblityUpdated";
away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED = "scenetransformChanged";
away3d.events.Object3DEvent.SCENE_CHANGED = "sceneChanged";
away3d.events.Object3DEvent.POSITION_CHANGED = "positionChanged";
away3d.events.Object3DEvent.ROTATION_CHANGED = "rotationChanged";
away3d.events.Object3DEvent.SCALE_CHANGED = "scaleChanged";
away3d.events.Scene3DEvent.ADDED_TO_SCENE = "addedToScene";
away3d.events.Scene3DEvent.REMOVED_FROM_SCENE = "removedFromScene";
away3d.events.Scene3DEvent.PARTITION_CHANGED = "partitionChanged";
away3d.events.ShadingMethodEvent.SHADER_INVALIDATED = "ShaderInvalidated";
away3d.events.Stage3DEvent.CONTEXT3D_CREATED = "Context3DCreated";
away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED = "Context3DDisposed";
away3d.events.Stage3DEvent.CONTEXT3D_RECREATED = "Context3DRecreated";
away3d.events.Stage3DEvent.VIEWPORT_UPDATED = "ViewportUpdated";
away3d.events.TouchEvent3D.TOUCH_END = "touchEnd3d";
away3d.events.TouchEvent3D.TOUCH_BEGIN = "touchBegin3d";
away3d.events.TouchEvent3D.TOUCH_MOVE = "touchMove3d";
away3d.events.TouchEvent3D.TOUCH_OUT = "touchOut3d";
away3d.events.TouchEvent3D.TOUCH_OVER = "touchOver3d";
away3d.library.assets.Asset3DType.ENTITY = "entity";
away3d.library.assets.Asset3DType.SKYBOX = "skybox";
away3d.library.assets.Asset3DType.CAMERA = "camera";
away3d.library.assets.Asset3DType.SEGMENT_SET = "segmentSet";
away3d.library.assets.Asset3DType.MESH = "mesh";
away3d.library.assets.Asset3DType.GEOMETRY = "geometry";
away3d.library.assets.Asset3DType.SKELETON = "skeleton";
away3d.library.assets.Asset3DType.SKELETON_POSE = "skeletonPose";
away3d.library.assets.Asset3DType.CONTAINER = "container";
away3d.library.assets.Asset3DType.TEXTURE = "texture";
away3d.library.assets.Asset3DType.TEXTURE_PROJECTOR = "textureProjector";
away3d.library.assets.Asset3DType.MATERIAL = "material";
away3d.library.assets.Asset3DType.ANIMATION_SET = "animationSet";
away3d.library.assets.Asset3DType.ANIMATION_STATE = "animationState";
away3d.library.assets.Asset3DType.ANIMATION_NODE = "animationNode";
away3d.library.assets.Asset3DType.ANIMATOR = "animator";
away3d.library.assets.Asset3DType.STATE_TRANSITION = "stateTransition";
away3d.library.assets.Asset3DType.LIGHT = "light";
away3d.library.assets.Asset3DType.LIGHT_PICKER = "lightPicker";
away3d.library.assets.Asset3DType.SHADOW_MAP_METHOD = "shadowMapMethod";
away3d.library.assets.Asset3DType.EFFECTS_METHOD = "effectsMethod";
away3d.materials.MaterialBase.MATERIAL_ID_COUNT = 0;
away3d.materials.LightSources.LIGHTS = 1;
away3d.materials.LightSources.PROBES = 2;
away3d.materials.LightSources.ALL = 3;
away3d.materials.compilation.RegisterPool._regPool = new haxe.ds.StringMap();
away3d.materials.compilation.RegisterPool._regCompsPool = new haxe.ds.StringMap();
away3d.materials.compilation.ShaderRegisterElement.COMPONENTS = ["x","y","z","w"];
away3d.materials.passes.MaterialPassBase._previousUsedStreams = [0,0,0,0,0,0,0,0];
away3d.materials.passes.MaterialPassBase._previousUsedTexs = [0,0,0,0,0,0,0,0];
away3d.materials.passes.SegmentPass.ONE_VECTOR = [1,1,1,1];
away3d.materials.passes.SegmentPass.FRONT_VECTOR = [0,0,-1,0];
away3d.materials.utils.MipmapGenerator._matrix = new openfl.geom.Matrix();
away3d.materials.utils.MipmapGenerator._rect = new openfl.geom.Rectangle();
away3d.textures.BitmapTexture._mipMaps = [];
away3d.textures.BitmapTexture._mipMapUses = [];
away3d.tools.helpers.ParticleGeometryHelper.MAX_VERTEX = 65535;
away3d.tools.utils.TextureUtils.MAX_SIZE = 4096;
away3d.utils.Cast._hexChars = "0123456789abcdefABCDEF";
away3d.utils.Cast._notClasses = new haxe.ds.StringMap();
away3d.utils.Cast._classes = new haxe.ds.StringMap();
format.tools._InflateImpl.Window.SIZE = 32768;
format.tools._InflateImpl.Window.BUFSIZE = 65536;
format.tools.InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
format.tools.InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
format.tools.InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
format.tools.InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
format.tools.InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
format.tools.InflateImpl.FIXED_HUFFMAN = null;
haxe.Unserializer.DEFAULT_RESOLVER = Type;
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Unserializer.CODES = null;
haxe.ds.ObjectMap.count = 0;
openfl.Assets.cache = new openfl.AssetCache();
openfl.Assets.libraries = new haxe.ds.StringMap();
openfl.Assets.dispatcher = new openfl.events.EventDispatcher();
openfl.Assets.initialized = false;
openfl.Lib.__sentWarnings = new haxe.ds.StringMap();
openfl.Lib.__startTime = haxe.Timer.stamp();
openfl.display.BitmapData.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
openfl.display.BitmapDataChannel.ALPHA = 8;
openfl.display.BitmapDataChannel.BLUE = 4;
openfl.display.BitmapDataChannel.GREEN = 2;
openfl.display.BitmapDataChannel.RED = 1;
openfl.display._CapsStyle.CapsStyle_Impl_.NONE = "butt";
openfl.display._CapsStyle.CapsStyle_Impl_.ROUND = "round";
openfl.display._CapsStyle.CapsStyle_Impl_.SQUARE = "square";
openfl.display.Graphics.TILE_SCALE = 1;
openfl.display.Graphics.TILE_ROTATION = 2;
openfl.display.Graphics.TILE_RGB = 4;
openfl.display.Graphics.TILE_ALPHA = 8;
openfl.display.Graphics.TILE_TRANS_2x2 = 16;
openfl.display.Graphics.TILE_BLEND_NORMAL = 0;
openfl.display.Graphics.TILE_BLEND_ADD = 65536;
openfl.display._JointStyle.JointStyle_Impl_.MITER = "miter";
openfl.display._JointStyle.JointStyle_Impl_.ROUND = "round";
openfl.display._JointStyle.JointStyle_Impl_.BEVEL = "bevel";
openfl.display.OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl.display.OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl.display._StageQuality.StageQuality_Impl_.BEST = "best";
openfl.display._StageQuality.StageQuality_Impl_.HIGH = "high";
openfl.display._StageQuality.StageQuality_Impl_.MEDIUM = "medium";
openfl.display._StageQuality.StageQuality_Impl_.LOW = "low";
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl.display3D.Context3D.MAX_SAMPLERS = 8;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_ALPHA = 772;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_COLOR = 774;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE = 1;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_ALPHA = 773;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_COLOR = 775;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_ALPHA = 771;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_COLOR = 769;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_ALPHA = 770;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_COLOR = 768;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ZERO = 0;
openfl.display3D.Context3DClearMask.ALL = 17664;
openfl.display3D.Context3DClearMask.COLOR = 16384;
openfl.display3D.Context3DClearMask.DEPTH = 256;
openfl.display3D.Context3DClearMask.STENCIL = 1024;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.ALWAYS = 519;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.EQUAL = 514;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER = 516;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER_EQUAL = 518;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS = 513;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS_EQUAL = 515;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NEVER = 512;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NOT_EQUAL = 517;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.BACK = 1028;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT = 1029;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT_AND_BACK = 1032;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.NONE = 0;
openfl.display3D.OpenFLStage3D.stage3Ds = [];
openfl.events.TextEvent.LINK = "link";
openfl.events.TextEvent.TEXT_INPUT = "textInput";
openfl.events.ErrorEvent.ERROR = "error";
openfl.events._EventPhase.EventPhase_Impl_.CAPTURING_PHASE = 0;
openfl.events._EventPhase.EventPhase_Impl_.AT_TARGET = 1;
openfl.events._EventPhase.EventPhase_Impl_.BUBBLING_PHASE = 2;
openfl.events.FocusEvent.FOCUS_IN = "focusIn";
openfl.events.FocusEvent.FOCUS_OUT = "focusOut";
openfl.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl.events.IOErrorEvent.IO_ERROR = "ioError";
openfl.events.KeyboardEvent.KEY_DOWN = "keyDown";
openfl.events.KeyboardEvent.KEY_UP = "keyUp";
openfl.events.MouseEvent.CLICK = "click";
openfl.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl.events.MouseEvent.MIDDLE_CLICK = "middleClick";
openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl.events.MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl.events.MouseEvent.MOUSE_DOWN = "mouseDown";
openfl.events.MouseEvent.MOUSE_MOVE = "mouseMove";
openfl.events.MouseEvent.MOUSE_OUT = "mouseOut";
openfl.events.MouseEvent.MOUSE_OVER = "mouseOver";
openfl.events.MouseEvent.MOUSE_UP = "mouseUp";
openfl.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl.events.MouseEvent.RIGHT_CLICK = "rightClick";
openfl.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl.events.MouseEvent.ROLL_OUT = "rollOut";
openfl.events.MouseEvent.ROLL_OVER = "rollOver";
openfl.events.ProgressEvent.PROGRESS = "progress";
openfl.events.ProgressEvent.SOCKET_DATA = "socketData";
openfl.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl.events.TouchEvent.TOUCH_END = "touchEnd";
openfl.events.TouchEvent.TOUCH_MOVE = "touchMove";
openfl.events.TouchEvent.TOUCH_OUT = "touchOut";
openfl.events.TouchEvent.TOUCH_OVER = "touchOver";
openfl.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl.events.TouchEvent.TOUCH_TAP = "touchTap";
openfl.gl.GL.DEPTH_BUFFER_BIT = 256;
openfl.gl.GL.STENCIL_BUFFER_BIT = 1024;
openfl.gl.GL.COLOR_BUFFER_BIT = 16384;
openfl.gl.GL.POINTS = 0;
openfl.gl.GL.LINES = 1;
openfl.gl.GL.LINE_LOOP = 2;
openfl.gl.GL.LINE_STRIP = 3;
openfl.gl.GL.TRIANGLES = 4;
openfl.gl.GL.TRIANGLE_STRIP = 5;
openfl.gl.GL.TRIANGLE_FAN = 6;
openfl.gl.GL.ZERO = 0;
openfl.gl.GL.ONE = 1;
openfl.gl.GL.SRC_COLOR = 768;
openfl.gl.GL.ONE_MINUS_SRC_COLOR = 769;
openfl.gl.GL.SRC_ALPHA = 770;
openfl.gl.GL.ONE_MINUS_SRC_ALPHA = 771;
openfl.gl.GL.DST_ALPHA = 772;
openfl.gl.GL.ONE_MINUS_DST_ALPHA = 773;
openfl.gl.GL.DST_COLOR = 774;
openfl.gl.GL.ONE_MINUS_DST_COLOR = 775;
openfl.gl.GL.SRC_ALPHA_SATURATE = 776;
openfl.gl.GL.FUNC_ADD = 32774;
openfl.gl.GL.BLEND_EQUATION = 32777;
openfl.gl.GL.BLEND_EQUATION_RGB = 32777;
openfl.gl.GL.BLEND_EQUATION_ALPHA = 34877;
openfl.gl.GL.FUNC_SUBTRACT = 32778;
openfl.gl.GL.FUNC_REVERSE_SUBTRACT = 32779;
openfl.gl.GL.BLEND_DST_RGB = 32968;
openfl.gl.GL.BLEND_SRC_RGB = 32969;
openfl.gl.GL.BLEND_DST_ALPHA = 32970;
openfl.gl.GL.BLEND_SRC_ALPHA = 32971;
openfl.gl.GL.CONSTANT_COLOR = 32769;
openfl.gl.GL.ONE_MINUS_CONSTANT_COLOR = 32770;
openfl.gl.GL.CONSTANT_ALPHA = 32771;
openfl.gl.GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
openfl.gl.GL.BLEND_COLOR = 32773;
openfl.gl.GL.ARRAY_BUFFER = 34962;
openfl.gl.GL.ELEMENT_ARRAY_BUFFER = 34963;
openfl.gl.GL.ARRAY_BUFFER_BINDING = 34964;
openfl.gl.GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
openfl.gl.GL.STREAM_DRAW = 35040;
openfl.gl.GL.STATIC_DRAW = 35044;
openfl.gl.GL.DYNAMIC_DRAW = 35048;
openfl.gl.GL.BUFFER_SIZE = 34660;
openfl.gl.GL.BUFFER_USAGE = 34661;
openfl.gl.GL.CURRENT_VERTEX_ATTRIB = 34342;
openfl.gl.GL.FRONT = 1028;
openfl.gl.GL.BACK = 1029;
openfl.gl.GL.FRONT_AND_BACK = 1032;
openfl.gl.GL.CULL_FACE = 2884;
openfl.gl.GL.BLEND = 3042;
openfl.gl.GL.DITHER = 3024;
openfl.gl.GL.STENCIL_TEST = 2960;
openfl.gl.GL.DEPTH_TEST = 2929;
openfl.gl.GL.SCISSOR_TEST = 3089;
openfl.gl.GL.POLYGON_OFFSET_FILL = 32823;
openfl.gl.GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
openfl.gl.GL.SAMPLE_COVERAGE = 32928;
openfl.gl.GL.NO_ERROR = 0;
openfl.gl.GL.INVALID_ENUM = 1280;
openfl.gl.GL.INVALID_VALUE = 1281;
openfl.gl.GL.INVALID_OPERATION = 1282;
openfl.gl.GL.OUT_OF_MEMORY = 1285;
openfl.gl.GL.CW = 2304;
openfl.gl.GL.CCW = 2305;
openfl.gl.GL.LINE_WIDTH = 2849;
openfl.gl.GL.ALIASED_POINT_SIZE_RANGE = 33901;
openfl.gl.GL.ALIASED_LINE_WIDTH_RANGE = 33902;
openfl.gl.GL.CULL_FACE_MODE = 2885;
openfl.gl.GL.FRONT_FACE = 2886;
openfl.gl.GL.DEPTH_RANGE = 2928;
openfl.gl.GL.DEPTH_WRITEMASK = 2930;
openfl.gl.GL.DEPTH_CLEAR_VALUE = 2931;
openfl.gl.GL.DEPTH_FUNC = 2932;
openfl.gl.GL.STENCIL_CLEAR_VALUE = 2961;
openfl.gl.GL.STENCIL_FUNC = 2962;
openfl.gl.GL.STENCIL_FAIL = 2964;
openfl.gl.GL.STENCIL_PASS_DEPTH_FAIL = 2965;
openfl.gl.GL.STENCIL_PASS_DEPTH_PASS = 2966;
openfl.gl.GL.STENCIL_REF = 2967;
openfl.gl.GL.STENCIL_VALUE_MASK = 2963;
openfl.gl.GL.STENCIL_WRITEMASK = 2968;
openfl.gl.GL.STENCIL_BACK_FUNC = 34816;
openfl.gl.GL.STENCIL_BACK_FAIL = 34817;
openfl.gl.GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
openfl.gl.GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
openfl.gl.GL.STENCIL_BACK_REF = 36003;
openfl.gl.GL.STENCIL_BACK_VALUE_MASK = 36004;
openfl.gl.GL.STENCIL_BACK_WRITEMASK = 36005;
openfl.gl.GL.VIEWPORT = 2978;
openfl.gl.GL.SCISSOR_BOX = 3088;
openfl.gl.GL.COLOR_CLEAR_VALUE = 3106;
openfl.gl.GL.COLOR_WRITEMASK = 3107;
openfl.gl.GL.UNPACK_ALIGNMENT = 3317;
openfl.gl.GL.PACK_ALIGNMENT = 3333;
openfl.gl.GL.MAX_TEXTURE_SIZE = 3379;
openfl.gl.GL.MAX_VIEWPORT_DIMS = 3386;
openfl.gl.GL.SUBPIXEL_BITS = 3408;
openfl.gl.GL.RED_BITS = 3410;
openfl.gl.GL.GREEN_BITS = 3411;
openfl.gl.GL.BLUE_BITS = 3412;
openfl.gl.GL.ALPHA_BITS = 3413;
openfl.gl.GL.DEPTH_BITS = 3414;
openfl.gl.GL.STENCIL_BITS = 3415;
openfl.gl.GL.POLYGON_OFFSET_UNITS = 10752;
openfl.gl.GL.POLYGON_OFFSET_FACTOR = 32824;
openfl.gl.GL.TEXTURE_BINDING_2D = 32873;
openfl.gl.GL.SAMPLE_BUFFERS = 32936;
openfl.gl.GL.SAMPLES = 32937;
openfl.gl.GL.SAMPLE_COVERAGE_VALUE = 32938;
openfl.gl.GL.SAMPLE_COVERAGE_INVERT = 32939;
openfl.gl.GL.COMPRESSED_TEXTURE_FORMATS = 34467;
openfl.gl.GL.DONT_CARE = 4352;
openfl.gl.GL.FASTEST = 4353;
openfl.gl.GL.NICEST = 4354;
openfl.gl.GL.GENERATE_MIPMAP_HINT = 33170;
openfl.gl.GL.BYTE = 5120;
openfl.gl.GL.UNSIGNED_BYTE = 5121;
openfl.gl.GL.SHORT = 5122;
openfl.gl.GL.UNSIGNED_SHORT = 5123;
openfl.gl.GL.INT = 5124;
openfl.gl.GL.UNSIGNED_INT = 5125;
openfl.gl.GL.FLOAT = 5126;
openfl.gl.GL.DEPTH_COMPONENT = 6402;
openfl.gl.GL.ALPHA = 6406;
openfl.gl.GL.RGB = 6407;
openfl.gl.GL.RGBA = 6408;
openfl.gl.GL.LUMINANCE = 6409;
openfl.gl.GL.LUMINANCE_ALPHA = 6410;
openfl.gl.GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
openfl.gl.GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
openfl.gl.GL.UNSIGNED_SHORT_5_6_5 = 33635;
openfl.gl.GL.FRAGMENT_SHADER = 35632;
openfl.gl.GL.VERTEX_SHADER = 35633;
openfl.gl.GL.MAX_VERTEX_ATTRIBS = 34921;
openfl.gl.GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
openfl.gl.GL.MAX_VARYING_VECTORS = 36348;
openfl.gl.GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
openfl.gl.GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
openfl.gl.GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
openfl.gl.GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
openfl.gl.GL.SHADER_TYPE = 35663;
openfl.gl.GL.DELETE_STATUS = 35712;
openfl.gl.GL.LINK_STATUS = 35714;
openfl.gl.GL.VALIDATE_STATUS = 35715;
openfl.gl.GL.ATTACHED_SHADERS = 35717;
openfl.gl.GL.ACTIVE_UNIFORMS = 35718;
openfl.gl.GL.ACTIVE_ATTRIBUTES = 35721;
openfl.gl.GL.SHADING_LANGUAGE_VERSION = 35724;
openfl.gl.GL.CURRENT_PROGRAM = 35725;
openfl.gl.GL.NEVER = 512;
openfl.gl.GL.LESS = 513;
openfl.gl.GL.EQUAL = 514;
openfl.gl.GL.LEQUAL = 515;
openfl.gl.GL.GREATER = 516;
openfl.gl.GL.NOTEQUAL = 517;
openfl.gl.GL.GEQUAL = 518;
openfl.gl.GL.ALWAYS = 519;
openfl.gl.GL.KEEP = 7680;
openfl.gl.GL.REPLACE = 7681;
openfl.gl.GL.INCR = 7682;
openfl.gl.GL.DECR = 7683;
openfl.gl.GL.INVERT = 5386;
openfl.gl.GL.INCR_WRAP = 34055;
openfl.gl.GL.DECR_WRAP = 34056;
openfl.gl.GL.VENDOR = 7936;
openfl.gl.GL.RENDERER = 7937;
openfl.gl.GL.VERSION = 7938;
openfl.gl.GL.NEAREST = 9728;
openfl.gl.GL.LINEAR = 9729;
openfl.gl.GL.NEAREST_MIPMAP_NEAREST = 9984;
openfl.gl.GL.LINEAR_MIPMAP_NEAREST = 9985;
openfl.gl.GL.NEAREST_MIPMAP_LINEAR = 9986;
openfl.gl.GL.LINEAR_MIPMAP_LINEAR = 9987;
openfl.gl.GL.TEXTURE_MAG_FILTER = 10240;
openfl.gl.GL.TEXTURE_MIN_FILTER = 10241;
openfl.gl.GL.TEXTURE_WRAP_S = 10242;
openfl.gl.GL.TEXTURE_WRAP_T = 10243;
openfl.gl.GL.TEXTURE_2D = 3553;
openfl.gl.GL.TEXTURE = 5890;
openfl.gl.GL.TEXTURE_CUBE_MAP = 34067;
openfl.gl.GL.TEXTURE_BINDING_CUBE_MAP = 34068;
openfl.gl.GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
openfl.gl.GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
openfl.gl.GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
openfl.gl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
openfl.gl.GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
openfl.gl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
openfl.gl.GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
openfl.gl.GL.TEXTURE0 = 33984;
openfl.gl.GL.TEXTURE1 = 33985;
openfl.gl.GL.TEXTURE2 = 33986;
openfl.gl.GL.TEXTURE3 = 33987;
openfl.gl.GL.TEXTURE4 = 33988;
openfl.gl.GL.TEXTURE5 = 33989;
openfl.gl.GL.TEXTURE6 = 33990;
openfl.gl.GL.TEXTURE7 = 33991;
openfl.gl.GL.TEXTURE8 = 33992;
openfl.gl.GL.TEXTURE9 = 33993;
openfl.gl.GL.TEXTURE10 = 33994;
openfl.gl.GL.TEXTURE11 = 33995;
openfl.gl.GL.TEXTURE12 = 33996;
openfl.gl.GL.TEXTURE13 = 33997;
openfl.gl.GL.TEXTURE14 = 33998;
openfl.gl.GL.TEXTURE15 = 33999;
openfl.gl.GL.TEXTURE16 = 34000;
openfl.gl.GL.TEXTURE17 = 34001;
openfl.gl.GL.TEXTURE18 = 34002;
openfl.gl.GL.TEXTURE19 = 34003;
openfl.gl.GL.TEXTURE20 = 34004;
openfl.gl.GL.TEXTURE21 = 34005;
openfl.gl.GL.TEXTURE22 = 34006;
openfl.gl.GL.TEXTURE23 = 34007;
openfl.gl.GL.TEXTURE24 = 34008;
openfl.gl.GL.TEXTURE25 = 34009;
openfl.gl.GL.TEXTURE26 = 34010;
openfl.gl.GL.TEXTURE27 = 34011;
openfl.gl.GL.TEXTURE28 = 34012;
openfl.gl.GL.TEXTURE29 = 34013;
openfl.gl.GL.TEXTURE30 = 34014;
openfl.gl.GL.TEXTURE31 = 34015;
openfl.gl.GL.ACTIVE_TEXTURE = 34016;
openfl.gl.GL.REPEAT = 10497;
openfl.gl.GL.CLAMP_TO_EDGE = 33071;
openfl.gl.GL.MIRRORED_REPEAT = 33648;
openfl.gl.GL.FLOAT_VEC2 = 35664;
openfl.gl.GL.FLOAT_VEC3 = 35665;
openfl.gl.GL.FLOAT_VEC4 = 35666;
openfl.gl.GL.INT_VEC2 = 35667;
openfl.gl.GL.INT_VEC3 = 35668;
openfl.gl.GL.INT_VEC4 = 35669;
openfl.gl.GL.BOOL = 35670;
openfl.gl.GL.BOOL_VEC2 = 35671;
openfl.gl.GL.BOOL_VEC3 = 35672;
openfl.gl.GL.BOOL_VEC4 = 35673;
openfl.gl.GL.FLOAT_MAT2 = 35674;
openfl.gl.GL.FLOAT_MAT3 = 35675;
openfl.gl.GL.FLOAT_MAT4 = 35676;
openfl.gl.GL.SAMPLER_2D = 35678;
openfl.gl.GL.SAMPLER_CUBE = 35680;
openfl.gl.GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
openfl.gl.GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
openfl.gl.GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
openfl.gl.GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
openfl.gl.GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
openfl.gl.GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
openfl.gl.GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
openfl.gl.GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
openfl.gl.GL.POINT_SPRITE = 34913;
openfl.gl.GL.COMPILE_STATUS = 35713;
openfl.gl.GL.LOW_FLOAT = 36336;
openfl.gl.GL.MEDIUM_FLOAT = 36337;
openfl.gl.GL.HIGH_FLOAT = 36338;
openfl.gl.GL.LOW_INT = 36339;
openfl.gl.GL.MEDIUM_INT = 36340;
openfl.gl.GL.HIGH_INT = 36341;
openfl.gl.GL.FRAMEBUFFER = 36160;
openfl.gl.GL.RENDERBUFFER = 36161;
openfl.gl.GL.RGBA4 = 32854;
openfl.gl.GL.RGB5_A1 = 32855;
openfl.gl.GL.RGB565 = 36194;
openfl.gl.GL.DEPTH_COMPONENT16 = 33189;
openfl.gl.GL.STENCIL_INDEX = 6401;
openfl.gl.GL.STENCIL_INDEX8 = 36168;
openfl.gl.GL.DEPTH_STENCIL = 34041;
openfl.gl.GL.RENDERBUFFER_WIDTH = 36162;
openfl.gl.GL.RENDERBUFFER_HEIGHT = 36163;
openfl.gl.GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
openfl.gl.GL.RENDERBUFFER_RED_SIZE = 36176;
openfl.gl.GL.RENDERBUFFER_GREEN_SIZE = 36177;
openfl.gl.GL.RENDERBUFFER_BLUE_SIZE = 36178;
openfl.gl.GL.RENDERBUFFER_ALPHA_SIZE = 36179;
openfl.gl.GL.RENDERBUFFER_DEPTH_SIZE = 36180;
openfl.gl.GL.RENDERBUFFER_STENCIL_SIZE = 36181;
openfl.gl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
openfl.gl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
openfl.gl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
openfl.gl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
openfl.gl.GL.COLOR_ATTACHMENT0 = 36064;
openfl.gl.GL.DEPTH_ATTACHMENT = 36096;
openfl.gl.GL.STENCIL_ATTACHMENT = 36128;
openfl.gl.GL.DEPTH_STENCIL_ATTACHMENT = 33306;
openfl.gl.GL.NONE = 0;
openfl.gl.GL.FRAMEBUFFER_COMPLETE = 36053;
openfl.gl.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
openfl.gl.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
openfl.gl.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
openfl.gl.GL.FRAMEBUFFER_UNSUPPORTED = 36061;
openfl.gl.GL.FRAMEBUFFER_BINDING = 36006;
openfl.gl.GL.RENDERBUFFER_BINDING = 36007;
openfl.gl.GL.MAX_RENDERBUFFER_SIZE = 34024;
openfl.gl.GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
openfl.gl.GL.UNPACK_FLIP_Y_WEBGL = 37440;
openfl.gl.GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
openfl.gl.GL.CONTEXT_LOST_WEBGL = 37442;
openfl.gl.GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
openfl.gl.GL.BROWSER_DEFAULT_WEBGL = 37444;
openfl.media.Sound.__registeredSounds = new haxe.ds.StringMap();
openfl.net.URLRequestMethod.DELETE = "DELETE";
openfl.net.URLRequestMethod.GET = "GET";
openfl.net.URLRequestMethod.HEAD = "HEAD";
openfl.net.URLRequestMethod.OPTIONS = "OPTIONS";
openfl.net.URLRequestMethod.POST = "POST";
openfl.net.URLRequestMethod.PUT = "PUT";
openfl.sensors.Accelerometer.defaultInterval = 34;
openfl.system.ApplicationDomain.currentDomain = new openfl.system.ApplicationDomain(null);
openfl.system.SecurityDomain.currentDomain = new openfl.system.SecurityDomain();
openfl.text._AntiAliasType.AntiAliasType_Impl_.ADVANCED = "advanced";
openfl.text._AntiAliasType.AntiAliasType_Impl_.NORMAL = "normal";
openfl.ui._KeyLocation.KeyLocation_Impl_.STANDARD = 0;
openfl.ui._KeyLocation.KeyLocation_Impl_.LEFT = 1;
openfl.ui._KeyLocation.KeyLocation_Impl_.RIGHT = 2;
openfl.ui._KeyLocation.KeyLocation_Impl_.NUM_PAD = 3;
openfl.ui.Keyboard.NUMBER_0 = 48;
openfl.ui.Keyboard.NUMBER_1 = 49;
openfl.ui.Keyboard.NUMBER_2 = 50;
openfl.ui.Keyboard.NUMBER_3 = 51;
openfl.ui.Keyboard.NUMBER_4 = 52;
openfl.ui.Keyboard.NUMBER_5 = 53;
openfl.ui.Keyboard.NUMBER_6 = 54;
openfl.ui.Keyboard.NUMBER_7 = 55;
openfl.ui.Keyboard.NUMBER_8 = 56;
openfl.ui.Keyboard.NUMBER_9 = 57;
openfl.ui.Keyboard.A = 65;
openfl.ui.Keyboard.B = 66;
openfl.ui.Keyboard.C = 67;
openfl.ui.Keyboard.D = 68;
openfl.ui.Keyboard.E = 69;
openfl.ui.Keyboard.F = 70;
openfl.ui.Keyboard.G = 71;
openfl.ui.Keyboard.H = 72;
openfl.ui.Keyboard.I = 73;
openfl.ui.Keyboard.J = 74;
openfl.ui.Keyboard.K = 75;
openfl.ui.Keyboard.L = 76;
openfl.ui.Keyboard.M = 77;
openfl.ui.Keyboard.N = 78;
openfl.ui.Keyboard.O = 79;
openfl.ui.Keyboard.P = 80;
openfl.ui.Keyboard.Q = 81;
openfl.ui.Keyboard.R = 82;
openfl.ui.Keyboard.S = 83;
openfl.ui.Keyboard.T = 84;
openfl.ui.Keyboard.U = 85;
openfl.ui.Keyboard.V = 86;
openfl.ui.Keyboard.W = 87;
openfl.ui.Keyboard.X = 88;
openfl.ui.Keyboard.Y = 89;
openfl.ui.Keyboard.Z = 90;
openfl.ui.Keyboard.NUMPAD_0 = 96;
openfl.ui.Keyboard.NUMPAD_1 = 97;
openfl.ui.Keyboard.NUMPAD_2 = 98;
openfl.ui.Keyboard.NUMPAD_3 = 99;
openfl.ui.Keyboard.NUMPAD_4 = 100;
openfl.ui.Keyboard.NUMPAD_5 = 101;
openfl.ui.Keyboard.NUMPAD_6 = 102;
openfl.ui.Keyboard.NUMPAD_7 = 103;
openfl.ui.Keyboard.NUMPAD_8 = 104;
openfl.ui.Keyboard.NUMPAD_9 = 105;
openfl.ui.Keyboard.NUMPAD_MULTIPLY = 106;
openfl.ui.Keyboard.NUMPAD_ADD = 107;
openfl.ui.Keyboard.NUMPAD_ENTER = 108;
openfl.ui.Keyboard.NUMPAD_SUBTRACT = 109;
openfl.ui.Keyboard.NUMPAD_DECIMAL = 110;
openfl.ui.Keyboard.NUMPAD_DIVIDE = 111;
openfl.ui.Keyboard.F1 = 112;
openfl.ui.Keyboard.F2 = 113;
openfl.ui.Keyboard.F3 = 114;
openfl.ui.Keyboard.F4 = 115;
openfl.ui.Keyboard.F5 = 116;
openfl.ui.Keyboard.F6 = 117;
openfl.ui.Keyboard.F7 = 118;
openfl.ui.Keyboard.F8 = 119;
openfl.ui.Keyboard.F9 = 120;
openfl.ui.Keyboard.F10 = 121;
openfl.ui.Keyboard.F11 = 122;
openfl.ui.Keyboard.F12 = 123;
openfl.ui.Keyboard.F13 = 124;
openfl.ui.Keyboard.F14 = 125;
openfl.ui.Keyboard.F15 = 126;
openfl.ui.Keyboard.BACKSPACE = 8;
openfl.ui.Keyboard.TAB = 9;
openfl.ui.Keyboard.ALTERNATE = 18;
openfl.ui.Keyboard.ENTER = 13;
openfl.ui.Keyboard.COMMAND = 15;
openfl.ui.Keyboard.SHIFT = 16;
openfl.ui.Keyboard.CONTROL = 17;
openfl.ui.Keyboard.CAPS_LOCK = 20;
openfl.ui.Keyboard.NUMPAD = 21;
openfl.ui.Keyboard.ESCAPE = 27;
openfl.ui.Keyboard.SPACE = 32;
openfl.ui.Keyboard.PAGE_UP = 33;
openfl.ui.Keyboard.PAGE_DOWN = 34;
openfl.ui.Keyboard.END = 35;
openfl.ui.Keyboard.HOME = 36;
openfl.ui.Keyboard.LEFT = 37;
openfl.ui.Keyboard.RIGHT = 39;
openfl.ui.Keyboard.UP = 38;
openfl.ui.Keyboard.DOWN = 40;
openfl.ui.Keyboard.INSERT = 45;
openfl.ui.Keyboard.DELETE = 46;
openfl.ui.Keyboard.NUMLOCK = 144;
openfl.ui.Keyboard.BREAK = 19;
openfl.ui.Keyboard.SEMICOLON = 186;
openfl.ui.Keyboard.EQUAL = 187;
openfl.ui.Keyboard.COMMA = 188;
openfl.ui.Keyboard.MINUS = 189;
openfl.ui.Keyboard.PERIOD = 190;
openfl.ui.Keyboard.SLASH = 191;
openfl.ui.Keyboard.BACKQUOTE = 192;
openfl.ui.Keyboard.LEFTBRACKET = 219;
openfl.ui.Keyboard.BACKSLASH = 220;
openfl.ui.Keyboard.RIGHTBRACKET = 221;
openfl.ui.Keyboard.QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_CANCEL = 3;
openfl.ui.Keyboard.DOM_VK_HELP = 6;
openfl.ui.Keyboard.DOM_VK_BACK_SPACE = 8;
openfl.ui.Keyboard.DOM_VK_TAB = 9;
openfl.ui.Keyboard.DOM_VK_CLEAR = 12;
openfl.ui.Keyboard.DOM_VK_RETURN = 13;
openfl.ui.Keyboard.DOM_VK_ENTER = 14;
openfl.ui.Keyboard.DOM_VK_SHIFT = 16;
openfl.ui.Keyboard.DOM_VK_CONTROL = 17;
openfl.ui.Keyboard.DOM_VK_ALT = 18;
openfl.ui.Keyboard.DOM_VK_PAUSE = 19;
openfl.ui.Keyboard.DOM_VK_CAPS_LOCK = 20;
openfl.ui.Keyboard.DOM_VK_ESCAPE = 27;
openfl.ui.Keyboard.DOM_VK_SPACE = 32;
openfl.ui.Keyboard.DOM_VK_PAGE_UP = 33;
openfl.ui.Keyboard.DOM_VK_PAGE_DOWN = 34;
openfl.ui.Keyboard.DOM_VK_END = 35;
openfl.ui.Keyboard.DOM_VK_HOME = 36;
openfl.ui.Keyboard.DOM_VK_LEFT = 37;
openfl.ui.Keyboard.DOM_VK_UP = 38;
openfl.ui.Keyboard.DOM_VK_RIGHT = 39;
openfl.ui.Keyboard.DOM_VK_DOWN = 40;
openfl.ui.Keyboard.DOM_VK_PRINTSCREEN = 44;
openfl.ui.Keyboard.DOM_VK_INSERT = 45;
openfl.ui.Keyboard.DOM_VK_DELETE = 46;
openfl.ui.Keyboard.DOM_VK_0 = 48;
openfl.ui.Keyboard.DOM_VK_1 = 49;
openfl.ui.Keyboard.DOM_VK_2 = 50;
openfl.ui.Keyboard.DOM_VK_3 = 51;
openfl.ui.Keyboard.DOM_VK_4 = 52;
openfl.ui.Keyboard.DOM_VK_5 = 53;
openfl.ui.Keyboard.DOM_VK_6 = 54;
openfl.ui.Keyboard.DOM_VK_7 = 55;
openfl.ui.Keyboard.DOM_VK_8 = 56;
openfl.ui.Keyboard.DOM_VK_9 = 57;
openfl.ui.Keyboard.DOM_VK_SEMICOLON = 59;
openfl.ui.Keyboard.DOM_VK_EQUALS = 61;
openfl.ui.Keyboard.DOM_VK_A = 65;
openfl.ui.Keyboard.DOM_VK_B = 66;
openfl.ui.Keyboard.DOM_VK_C = 67;
openfl.ui.Keyboard.DOM_VK_D = 68;
openfl.ui.Keyboard.DOM_VK_E = 69;
openfl.ui.Keyboard.DOM_VK_F = 70;
openfl.ui.Keyboard.DOM_VK_G = 71;
openfl.ui.Keyboard.DOM_VK_H = 72;
openfl.ui.Keyboard.DOM_VK_I = 73;
openfl.ui.Keyboard.DOM_VK_J = 74;
openfl.ui.Keyboard.DOM_VK_K = 75;
openfl.ui.Keyboard.DOM_VK_L = 76;
openfl.ui.Keyboard.DOM_VK_M = 77;
openfl.ui.Keyboard.DOM_VK_N = 78;
openfl.ui.Keyboard.DOM_VK_O = 79;
openfl.ui.Keyboard.DOM_VK_P = 80;
openfl.ui.Keyboard.DOM_VK_Q = 81;
openfl.ui.Keyboard.DOM_VK_R = 82;
openfl.ui.Keyboard.DOM_VK_S = 83;
openfl.ui.Keyboard.DOM_VK_T = 84;
openfl.ui.Keyboard.DOM_VK_U = 85;
openfl.ui.Keyboard.DOM_VK_V = 86;
openfl.ui.Keyboard.DOM_VK_W = 87;
openfl.ui.Keyboard.DOM_VK_X = 88;
openfl.ui.Keyboard.DOM_VK_Y = 89;
openfl.ui.Keyboard.DOM_VK_Z = 90;
openfl.ui.Keyboard.DOM_VK_CONTEXT_MENU = 93;
openfl.ui.Keyboard.DOM_VK_NUMPAD0 = 96;
openfl.ui.Keyboard.DOM_VK_NUMPAD1 = 97;
openfl.ui.Keyboard.DOM_VK_NUMPAD2 = 98;
openfl.ui.Keyboard.DOM_VK_NUMPAD3 = 99;
openfl.ui.Keyboard.DOM_VK_NUMPAD4 = 100;
openfl.ui.Keyboard.DOM_VK_NUMPAD5 = 101;
openfl.ui.Keyboard.DOM_VK_NUMPAD6 = 102;
openfl.ui.Keyboard.DOM_VK_NUMPAD7 = 103;
openfl.ui.Keyboard.DOM_VK_NUMPAD8 = 104;
openfl.ui.Keyboard.DOM_VK_NUMPAD9 = 105;
openfl.ui.Keyboard.DOM_VK_MULTIPLY = 106;
openfl.ui.Keyboard.DOM_VK_ADD = 107;
openfl.ui.Keyboard.DOM_VK_SEPARATOR = 108;
openfl.ui.Keyboard.DOM_VK_SUBTRACT = 109;
openfl.ui.Keyboard.DOM_VK_DECIMAL = 110;
openfl.ui.Keyboard.DOM_VK_DIVIDE = 111;
openfl.ui.Keyboard.DOM_VK_F1 = 112;
openfl.ui.Keyboard.DOM_VK_F2 = 113;
openfl.ui.Keyboard.DOM_VK_F3 = 114;
openfl.ui.Keyboard.DOM_VK_F4 = 115;
openfl.ui.Keyboard.DOM_VK_F5 = 116;
openfl.ui.Keyboard.DOM_VK_F6 = 117;
openfl.ui.Keyboard.DOM_VK_F7 = 118;
openfl.ui.Keyboard.DOM_VK_F8 = 119;
openfl.ui.Keyboard.DOM_VK_F9 = 120;
openfl.ui.Keyboard.DOM_VK_F10 = 121;
openfl.ui.Keyboard.DOM_VK_F11 = 122;
openfl.ui.Keyboard.DOM_VK_F12 = 123;
openfl.ui.Keyboard.DOM_VK_F13 = 124;
openfl.ui.Keyboard.DOM_VK_F14 = 125;
openfl.ui.Keyboard.DOM_VK_F15 = 126;
openfl.ui.Keyboard.DOM_VK_F16 = 127;
openfl.ui.Keyboard.DOM_VK_F17 = 128;
openfl.ui.Keyboard.DOM_VK_F18 = 129;
openfl.ui.Keyboard.DOM_VK_F19 = 130;
openfl.ui.Keyboard.DOM_VK_F20 = 131;
openfl.ui.Keyboard.DOM_VK_F21 = 132;
openfl.ui.Keyboard.DOM_VK_F22 = 133;
openfl.ui.Keyboard.DOM_VK_F23 = 134;
openfl.ui.Keyboard.DOM_VK_F24 = 135;
openfl.ui.Keyboard.DOM_VK_NUM_LOCK = 144;
openfl.ui.Keyboard.DOM_VK_SCROLL_LOCK = 145;
openfl.ui.Keyboard.DOM_VK_COMMA = 188;
openfl.ui.Keyboard.DOM_VK_PERIOD = 190;
openfl.ui.Keyboard.DOM_VK_SLASH = 191;
openfl.ui.Keyboard.DOM_VK_BACK_QUOTE = 192;
openfl.ui.Keyboard.DOM_VK_OPEN_BRACKET = 219;
openfl.ui.Keyboard.DOM_VK_BACK_SLASH = 220;
openfl.ui.Keyboard.DOM_VK_CLOSE_BRACKET = 221;
openfl.ui.Keyboard.DOM_VK_QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_META = 224;
openfl.ui.Keyboard.DOM_VK_KANA = 21;
openfl.ui.Keyboard.DOM_VK_HANGUL = 21;
openfl.ui.Keyboard.DOM_VK_JUNJA = 23;
openfl.ui.Keyboard.DOM_VK_FINAL = 24;
openfl.ui.Keyboard.DOM_VK_HANJA = 25;
openfl.ui.Keyboard.DOM_VK_KANJI = 25;
openfl.ui.Keyboard.DOM_VK_CONVERT = 28;
openfl.ui.Keyboard.DOM_VK_NONCONVERT = 29;
openfl.ui.Keyboard.DOM_VK_ACEPT = 30;
openfl.ui.Keyboard.DOM_VK_MODECHANGE = 31;
openfl.ui.Keyboard.DOM_VK_SELECT = 41;
openfl.ui.Keyboard.DOM_VK_PRINT = 42;
openfl.ui.Keyboard.DOM_VK_EXECUTE = 43;
openfl.ui.Keyboard.DOM_VK_SLEEP = 95;
openfl.utils.Endian.BIG_ENDIAN = "bigEndian";
openfl.utils.Endian.LITTLE_ENDIAN = "littleEndian";
ApplicationMain.main();
})(typeof window != "undefined" ? window : exports);
